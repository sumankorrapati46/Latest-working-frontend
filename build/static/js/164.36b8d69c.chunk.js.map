{"version":3,"file":"static/js/164.36b8d69c.chunk.js","mappings":"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","sources":["pages/RegistrationForm.jsx","api/apiService.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as yup from 'yup';\r\nimport { authAPI } from '../api/apiService';\r\nimport { Link, useLocation } from 'react-router-dom';\r\nimport '../styles/RegistrationForm.css';\r\n\r\n// Update Yup schema for password validation\r\nconst schema = yup.object().shape({\r\n  name: yup.string().required('Name is required'),\r\n  dateOfBirth: yup\r\n    .string()\r\n    .required('Date of Birth is required')\r\n    .test('age-range', 'Age must be between 18 and 90 years', function (value) {\r\n      if (!value) return false;\r\n      const dob = new Date(value);\r\n      const today = new Date();\r\n      const ageDifMs = today - dob;\r\n      const ageDate = new Date(ageDifMs);\r\n      const age = Math.abs(ageDate.getUTCFullYear() - 1970);\r\n      return age >= 18 && age <= 90;\r\n    }),\r\n  gender: yup.string().required('Gender is required'),\r\n  email: yup.string()\r\n    .required('Email is required')\r\n    .matches(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, 'Email must include @ and be valid'),\r\n  phoneNumber: yup\r\n    .string()\r\n    .matches(/^\\d{10}$/, 'Enter a valid 10-digit phone number')\r\n    .required('Phone number is required'),\r\n  role: yup.string().required('Role is required'),\r\n  password: yup\r\n    .string()\r\n    .required('Password is required')\r\n    .min(8, 'Password must be at least 8 characters')\r\n    .matches(/[A-Z]/, 'Password must contain at least one uppercase letter')\r\n    .matches(/[a-z]/, 'Password must contain at least one lowercase letter')\r\n    .matches(/[0-9]/, 'Password must contain at least one number')\r\n    .matches(/[@$!%*?&#^()_+\\-=[\\]{};':\"\\\\|,.<>/?]/, 'Password must contain at least one special character'),\r\n});\r\n\r\nconst RegistrationForm = () => {\r\n  const location = useLocation();\r\n  const initialRole = location.state?.role || '';\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors },\r\n  } = useForm({\r\n    resolver: yupResolver(schema),\r\n    defaultValues: { role: initialRole },\r\n  });\r\n\r\n  const [emailValue, setEmailValue] = useState('');\r\n  const [otpSent, setOtpSent] = useState(false);\r\n  const [otp, setOtp] = useState('');\r\n  const [emailVerified, setEmailVerified] = useState(false);\r\n  const [resendTimer, setResendTimer] = useState(0);\r\n\r\n  useEffect(() => {\r\n    if (!resendTimer) return;\r\n    const timer = setTimeout(() => setResendTimer((t) => t - 1), 1000);\r\n    return () => clearTimeout(timer);\r\n  }, [resendTimer]);\r\n\r\n  const handleSendOTP = async () => {\r\n    if (!emailValue.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/)) {\r\n      alert('Enter a valid email first');\r\n      return;\r\n    }\r\n    try {\r\n      await authAPI.sendOTP(emailValue);\r\n      setOtpSent(true);\r\n      setResendTimer(30);\r\n      alert('OTP sent');\r\n    } catch (e) {\r\n      alert(e.response?.data?.message || 'Failed to send OTP');\r\n      console.error(e);\r\n    }\r\n  };\r\n   \r\n  // ✅ Handle Verify OTP\r\n  const handleVerifyOTP = async () => {\r\n    try {\r\n      await authAPI.verifyOTP({\r\n        email: emailValue,\r\n        otp: otp,\r\n      });\r\n      alert(\"Email verified successfully!\");\r\n      setEmailVerified(true);\r\n    } catch (error) {\r\n      alert(\"OTP verification error.\");\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  // ✅ Final Registration Submission to backend\r\n  const onSubmit = async (data) => {\r\n    if (!emailVerified) {\r\n      alert('Please verify your email before submitting.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      console.log('Submitting registration data:', data);\r\n      const response = await authAPI.register(data);\r\n      console.log('Registration successful:', response);\r\n      \r\n      // Show success message with approval notice\r\n      alert('Registration successful! Please wait for admin approval. You will receive an email with login credentials once approved.');\r\n      \r\n      // Reset form\r\n      reset();\r\n      setEmailVerified(false);\r\n      setOtpSent(false);\r\n      setEmailValue('');\r\n      setOtp('');\r\n      \r\n      // Don't navigate to login - user needs to wait for approval\r\n    } catch (error) {\r\n      console.error('Registration error:', error);\r\n      alert('Registration failed. Please try again.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"registration-container\">\r\n      {/* Left Info Panel */}\r\n      <div className=\"info-panel\">\r\n        <div className=\"brand-header\">\r\n          <div className=\"brand-logo\">\r\n            <span className=\"brand-text\">Date</span>\r\n            <span className=\"brand-accent\">Agri</span>\r\n            <span className=\"brand-icon\">🌿</span>\r\n            <span className=\"brand-text\">Stack</span>\r\n          </div>\r\n          <h1 className=\"main-title\">India Farmer Registry</h1>\r\n        </div>\r\n\r\n        <div className=\"platform-info\">\r\n          <h2>Digital Agristack Transaction Enterprises</h2>\r\n          <p className=\"tagline\">Empowering Agricultural Excellence</p>\r\n        </div>\r\n\r\n        {/* Feature Highlights */}\r\n        <div className=\"features-grid\">\r\n          <div className=\"feature-card\">\r\n            <div className=\"feature-icon\">🌾</div>\r\n            <div className=\"feature-content\">\r\n              <h3>Revolutionizing Indian Agriculture</h3>\r\n              <p>Connecting 140+ million farmers with cutting-edge digital solutions</p>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"feature-card\">\r\n            <div className=\"feature-icon\">📱</div>\r\n            <div className=\"feature-content\">\r\n              <h3>Smart Farming Technology</h3>\r\n              <p>AI-powered crop monitoring and precision agriculture tools</p>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"feature-card\">\r\n            <div className=\"feature-icon\">💰</div>\r\n            <div className=\"feature-content\">\r\n              <h3>Financial Inclusion</h3>\r\n              <p>Direct benefit transfers and digital payment solutions</p>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"feature-card\">\r\n            <div className=\"feature-icon\">🌱</div>\r\n            <div className=\"feature-content\">\r\n              <h3>Sustainable Practices</h3>\r\n              <p>Promoting eco-friendly farming and climate-smart agriculture</p>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"feature-card\">\r\n            <div className=\"feature-icon\">🏆</div>\r\n            <div className=\"feature-content\">\r\n              <h3>National Recognition</h3>\r\n              <p>Government of India's flagship agricultural digitization initiative</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Right Registration Form */}\r\n      <div className=\"form-panel\">\r\n        <div className=\"form-card\">\r\n          {/* Form Header */}\r\n          <div className=\"form-header\">\r\n            <div className=\"date-logo-section\">\r\n              <div className=\"date-logo\">\r\n                <svg width=\"64\" height=\"64\" viewBox=\"0 0 64 64\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                  <g stroke=\"#15803d\" strokeWidth=\"2\" fill=\"none\" strokeLinecap=\"round\">\r\n                    <path d=\"M12 24 C12 32 12 40 12 48\"/>\r\n                    <path d=\"M32 24 C32 32 32 40 32 48\"/>\r\n                    <path d=\"M52 24 C52 32 52 40 52 48\"/>\r\n                  </g>\r\n                  <g>\r\n                    <g transform=\"translate(12 16)\"><ellipse cx=\"0\" cy=\"0\" rx=\"4\" ry=\"8\" fill=\"#FACC15\" stroke=\"#D97706\" strokeWidth=\"2\"/><circle cx=\"0\" cy=\"0\" r=\"6\" fill=\"#8B5E3C\" stroke=\"#A16207\" strokeWidth=\"2\"/></g>\r\n                    <g transform=\"translate(32 14)\"><ellipse cx=\"0\" cy=\"0\" rx=\"4\" ry=\"8\" fill=\"#FACC15\" stroke=\"#D97706\" strokeWidth=\"2\"/><circle cx=\"0\" cy=\"0\" r=\"6\" fill=\"#8B5E3C\" stroke=\"#A16207\" strokeWidth=\"2\"/></g>\r\n                    <g transform=\"translate(52 16)\"><ellipse cx=\"0\" cy=\"0\" rx=\"4\" ry=\"8\" fill=\"#FACC15\" stroke=\"#D97706\" strokeWidth=\"2\"/><circle cx=\"0\" cy=\"0\" r=\"6\" fill=\"#8B5E3C\" stroke=\"#A16207\" strokeWidth=\"2\"/></g>\r\n                  </g>\r\n                </svg>\r\n              </div>\r\n              <div className=\"date-text\">\r\n                <h3>Digital Agristack Transaction Enterprises</h3>\r\n                <p>Empowering Agricultural Excellence</p>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"form-title-section\">\r\n              <h2 className=\"form-title\">Registration Form</h2>\r\n              <p className=\"form-subtitle\">Enter your details to get started</p>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Registration Form */}\r\n          <form onSubmit={handleSubmit(onSubmit)} className=\"registration-form\">\r\n            {/* Role Field (Hidden) */}\r\n            <input type=\"hidden\" {...register('role')} value={initialRole} />\r\n            \r\n            {/* Role Display (if provided) */}\r\n            {initialRole && (\r\n              <div className=\"form-group\">\r\n                <label className=\"form-label\">Role</label>\r\n                <input \r\n                  type=\"text\" \r\n                  value={initialRole} \r\n                  readOnly \r\n                  className=\"form-input role-field\" \r\n                />\r\n              </div>\r\n            )}\r\n\r\n            {/* Form Fields */}\r\n            <div className=\"form-row\">\r\n              <div className=\"form-group\">\r\n                <label className=\"form-label\">Name <span className=\"required\">*</span></label>\r\n                <input \r\n                  type=\"text\" \r\n                  {...register('name')} \r\n                  className={`form-input ${errors.name ? 'error' : ''}`}\r\n                  placeholder=\"Enter your first name\"\r\n                />\r\n                {errors.name && <span className=\"error-message\">{errors.name.message}</span>}\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label className=\"form-label\">Gender <span className=\"required\">*</span></label>\r\n                <select \r\n                  {...register('gender')} \r\n                  className={`form-input ${errors.gender ? 'error' : ''}`}\r\n                >\r\n                  <option value=\"\">Select gender</option>\r\n                  <option value=\"Male\">Male</option>\r\n                  <option value=\"Female\">Female</option>\r\n                  <option value=\"Other\">Other</option>\r\n                </select>\r\n                {errors.gender && <span className=\"error-message\">{errors.gender.message}</span>}\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"form-row\">\r\n              <div className=\"form-group\">\r\n                <label className=\"form-label\">Date of Birth <span className=\"required\">*</span></label>\r\n                <input\r\n                  type=\"date\"\r\n                  {...register('dateOfBirth')}\r\n                  className={`form-input ${errors.dateOfBirth ? 'error' : ''}`}\r\n                />\r\n                {errors.dateOfBirth && <span className=\"error-message\">{errors.dateOfBirth.message}</span>}\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label className=\"form-label\">Phone Number <span className=\"required\">*</span></label>\r\n                <input \r\n                  type=\"text\" \r\n                  {...register('phoneNumber')} \r\n                  className={`form-input ${errors.phoneNumber ? 'error' : ''}`}\r\n                  placeholder=\"Enter 10-digit number\"\r\n                />\r\n                {errors.phoneNumber && <span className=\"error-message\">{errors.phoneNumber.message}</span>}\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"form-row\">\r\n              <div className=\"form-group\">\r\n                <label className=\"form-label\">Email Address <span className=\"required\">*</span></label>\r\n                <input\r\n                  type=\"email\"\r\n                  {...register('email')}\r\n                  value={emailValue}\r\n                  onChange={(e) => {\r\n                    setEmailValue(e.target.value);\r\n                    setOtpSent(false);\r\n                    setEmailVerified(false);\r\n                  }}\r\n                  className={`form-input ${errors.email ? 'error' : ''}`}\r\n                  placeholder=\"Enter your email\"\r\n                />\r\n                {errors.email && <span className=\"error-message\">{errors.email.message}</span>}\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label className=\"form-label\">Password <span className=\"required\">*</span></label>\r\n                <input\r\n                  type=\"password\"\r\n                  {...register('password')}\r\n                  className={`form-input ${errors.password ? 'error' : ''}`}\r\n                  placeholder=\"Enter a strong password\"\r\n                  autoComplete=\"new-password\"\r\n                />\r\n                {errors.password && <span className=\"error-message\">{errors.password.message}</span>}\r\n              </div>\r\n            </div>\r\n\r\n            {/* Email Verification Section */}\r\n            <div className=\"email-verification\">\r\n              {(!otpSent && !emailVerified) && (\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={handleSendOTP}\r\n                  className=\"btn btn-primary\"\r\n                >\r\n                  Send OTP\r\n                </button>\r\n              )}\r\n              \r\n              {(otpSent && !emailVerified) && (\r\n                <div className=\"otp-section\">\r\n                  <input\r\n                    type=\"text\"\r\n                    placeholder=\"Enter OTP\"\r\n                    value={otp}\r\n                    onChange={(e) => setOtp(e.target.value)}\r\n                    className=\"otp-input\"\r\n                  />\r\n                  <div className=\"otp-buttons\">\r\n                    <button\r\n                      type=\"button\"\r\n                      onClick={handleSendOTP}\r\n                      className=\"btn btn-secondary\"\r\n                      disabled={resendTimer > 0}\r\n                    >\r\n                      {resendTimer > 0 ? `Resend (${resendTimer}s)` : 'Resend'}\r\n                    </button>\r\n                    <button\r\n                      type=\"button\"\r\n                      onClick={handleVerifyOTP}\r\n                      className=\"btn btn-primary\"\r\n                    >\r\n                      Verify\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              )}\r\n              \r\n              {emailVerified && (\r\n                <div className=\"verification-success\">\r\n                  <span className=\"success-icon\">✓</span>\r\n                  Email Verified\r\n                </div>\r\n              )}\r\n            </div>\r\n\r\n            {/* Submit Button */}\r\n            <div className=\"form-actions\">\r\n              <button type=\"submit\" className=\"btn btn-submit\">\r\n                Register Now ...\r\n              </button>\r\n            </div>\r\n\r\n            {/* Login Link */}\r\n            <div className=\"login-link\">\r\n              <p>Already have an account? <Link to=\"/login\">Sign In</Link></p>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RegistrationForm; ","import axios from 'axios';\r\n\r\n// Create axios instance\r\nconst api = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8080/api',\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor to add auth token\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor for error handling\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('user');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Authentication API calls\r\nexport const authAPI = {\r\n  // Login\r\n  login: async (credentials) => {\r\n    const response = await api.post('/auth/login', credentials);\r\n    return response.data;\r\n  },\r\n\r\n  // Get user profile\r\n  getProfile: async () => {\r\n    const response = await api.get('/auth/profile');\r\n    return response.data;\r\n  },\r\n\r\n  // Register user\r\n  register: async (userData) => {\r\n    const response = await api.post('/auth/register', userData);\r\n    return response.data;\r\n  },\r\n\r\n  // Send OTP\r\n  sendOTP: async (email) => {\r\n    const response = await api.post('/auth/send-otp', { emailOrPhone: email });\r\n    return response.data;\r\n  },\r\n\r\n  // Verify OTP\r\n  verifyOTP: async (otpData) => {\r\n    const response = await api.post('/auth/verify-otp', { \r\n      emailOrPhone: otpData.email, \r\n      otp: otpData.otp \r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Resend OTP\r\n  resendOTP: async (email) => {\r\n    const response = await api.post('/auth/resend-otp', { emailOrPhone: email });\r\n    return response.data;\r\n  },\r\n\r\n  // Forgot password\r\n  forgotPassword: async (emailOrPhone) => {\r\n    const response = await api.post('/auth/forgot-password', { emailOrPhone });\r\n    return response.data;\r\n  },\r\n\r\n  // Forgot user ID\r\n  forgotUserId: async (emailOrPhone) => {\r\n    const response = await api.post('/auth/forgot-user-id', { emailOrPhone });\r\n    return response.data;\r\n  },\r\n\r\n  // Reset password\r\n  resetPassword: async (resetData) => {\r\n    const response = await api.post('/auth/reset-password', resetData);\r\n    return response.data;\r\n  },\r\n\r\n  // Change password\r\n  changePassword: async (passwordData) => {\r\n    const response = await api.post('/auth/change-password', passwordData);\r\n    return response.data;\r\n  },\r\n\r\n  // Change user ID\r\n  changeUserId: async (userIdData) => {\r\n    const response = await api.post('/auth/change-user-id', userIdData);\r\n    return response.data;\r\n  },\r\n\r\n  // Get countries\r\n  getCountries: async () => {\r\n    const response = await api.get('/auth/countries');\r\n    return response.data;\r\n  },\r\n\r\n  // Get states\r\n  getStates: async (countryId) => {\r\n    const response = await api.post('/auth/states', { countryId });\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// Super Admin API calls\r\nexport const superAdminAPI = {\r\n  // Get all users (registrations)\r\n  getAllUsers: async () => {\r\n    const response = await api.get('/super-admin/registration-list');\r\n    return response.data;\r\n  },\r\n\r\n  // Get registration list with filters\r\n  getRegistrationList: async (filters = {}) => {\r\n    const response = await api.get('/super-admin/registration-list', { params: filters });\r\n    return response.data;\r\n  },\r\n\r\n  // Get registration list by status\r\n  getRegistrationListByStatus: async (status) => {\r\n    const response = await api.get('/super-admin/registration-list/filter', { params: { status } });\r\n    return response.data;\r\n  },\r\n\r\n  // Search registrations\r\n  searchRegistrations: async (query) => {\r\n    const response = await api.get('/super-admin/registration-list/search', { params: { query } });\r\n    return response.data;\r\n  },\r\n\r\n  // Get pending registrations\r\n  getPendingRegistrations: async () => {\r\n    const response = await api.get('/super-admin/pending-registrations');\r\n    return response.data;\r\n  },\r\n\r\n  // Get approved users\r\n  getApprovedUsers: async () => {\r\n    const response = await api.get('/super-admin/approved-users');\r\n    return response.data;\r\n  },\r\n\r\n  // Get users by role\r\n  getUsersByRole: async (role) => {\r\n    const response = await api.get(`/super-admin/users/by-role/${role}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get pending users by role\r\n  getPendingUsersByRole: async (role) => {\r\n    const response = await api.get(`/super-admin/pending-users/by-role/${role}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Approve user\r\n  approveUser: async (userId, role) => {\r\n    const response = await api.put(`/auth/users/${userId}/approve`, { role });\r\n    return response.data;\r\n  },\r\n\r\n  // Reject user (update status to REJECTED)\r\n  rejectUser: async (userId, reason) => {\r\n    const response = await api.put(`/auth/users/${userId}/status`, { status: 'REJECTED' });\r\n    return response.data;\r\n  },\r\n\r\n  // Delete user\r\n  deleteUser: async (userId) => {\r\n    const response = await api.delete(`/super-admin/users/${userId}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Update user\r\n  updateUser: async (userId, userData) => {\r\n    const response = await api.put(`/super-admin/users/${userId}`, userData);\r\n    return response.data;\r\n  },\r\n\r\n  // Update user status\r\n  updateUserStatus: async (userId, status) => {\r\n    const response = await api.put(`/auth/users/${userId}/status`, { status });\r\n    return response.data;\r\n  },\r\n\r\n  // Get dashboard stats\r\n  getDashboardStats: async () => {\r\n    const response = await api.get('/super-admin/dashboard/stats');\r\n    return response.data;\r\n  },\r\n\r\n  // Bulk assign farmers to employee\r\n  bulkAssignFarmers: async (farmerIds, employeeId) => {\r\n    const response = await api.post('/super-admin/bulk-assign-farmers', { farmerIds, employeeId });\r\n    return response.data;\r\n  },\r\n\r\n  // Single assign farmer to employee (fallback)\r\n  assignFarmer: async (farmerId, employeeId) => {\r\n    const response = await api.post('/super-admin/assign-farmer', null, { \r\n      params: { farmerId, employeeId } \r\n    });\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// Farmers API calls\r\nexport const farmersAPI = {\r\n  // Get all farmers\r\n  getAllFarmers: async (filters = {}) => {\r\n    const response = await api.get('/super-admin/farmers', { params: filters });\r\n    return response.data;\r\n  },\r\n\r\n  // Get farmer by ID\r\n  getFarmerById: async (id) => {\r\n    const response = await api.get(`/super-admin/farmers/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Create farmer\r\n  createFarmer: async (farmerData) => {\r\n    const response = await api.post('/super-admin/farmers', farmerData);\r\n    return response.data;\r\n  },\r\n\r\n  // Update farmer\r\n  updateFarmer: async (id, farmerData) => {\r\n    const response = await api.put(`/super-admin/farmers/${id}`, farmerData);\r\n    return response.data;\r\n  },\r\n\r\n  // Delete farmer\r\n  deleteFarmer: async (id) => {\r\n    const response = await api.delete(`/super-admin/farmers/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Assign farmer to employee\r\n  assignFarmer: async (farmerId, employeeId) => {\r\n    const response = await api.post(`/super-admin/farmers/${farmerId}/assign`, { employeeId });\r\n    return response.data;\r\n  },\r\n\r\n  // Get farmer statistics\r\n  getFarmerStats: async () => {\r\n    const response = await api.get('/super-admin/farmers/stats');\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// Admin-specific API calls\r\nexport const adminAPI = {\r\n  // Get all farmers for admin\r\n  getAllFarmers: async (filters = {}) => {\r\n    const response = await api.get('/admin/farmers', { params: filters });\r\n    return response.data;\r\n  },\r\n\r\n  // Get all employees for admin\r\n  getAllEmployees: async (filters = {}) => {\r\n    const response = await api.get('/admin/employees', { params: filters });\r\n    return response.data;\r\n  },\r\n\r\n  // Get farmers with KYC status\r\n  getFarmersWithKyc: async () => {\r\n    const response = await api.get('/admin/farmers-with-kyc');\r\n    return response.data;\r\n  },\r\n\r\n  // Get employees with stats\r\n  getEmployeesWithStats: async () => {\r\n    const response = await api.get('/admin/employees-with-stats');\r\n    return response.data;\r\n  },\r\n\r\n  // Get farmers by employee\r\n  getFarmersByEmployee: async (employeeId) => {\r\n    const response = await api.get(`/admin/employees/${employeeId}/assigned-farmers`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get todo list for admin\r\n  getTodoList: async () => {\r\n    const response = await api.get('/admin/todo-list');\r\n    return response.data;\r\n  },\r\n\r\n  // Get enhanced todo list\r\n  getEnhancedTodoList: async () => {\r\n    const response = await api.get('/admin/enhanced-todo-list');\r\n    return response.data;\r\n  },\r\n\r\n  // Get dashboard stats\r\n  getDashboardStats: async () => {\r\n    const response = await api.get('/admin/dashboard-stats');\r\n    return response.data;\r\n  },\r\n\r\n  // Filter farmers\r\n  filterFarmers: async (filters = {}) => {\r\n    const response = await api.get('/admin/farmers/filter', { params: filters });\r\n    return response.data;\r\n  },\r\n\r\n  // Get locations\r\n  getLocations: async () => {\r\n    const response = await api.get('/admin/locations');\r\n    return response.data;\r\n  },\r\n\r\n  // Bulk assign farmers to employee\r\n  bulkAssignFarmers: async (farmerIds, employeeId) => {\r\n    const response = await api.post('/admin/bulk-assign-farmers', { farmerIds, employeeId });\r\n    return response.data;\r\n  },\r\n\r\n  // Single assign farmer to employee (fallback)\r\n  assignFarmer: async (farmerId, employeeId) => {\r\n    const response = await api.post('/admin/assign-farmer', null, { \r\n      params: { farmerId, employeeId } \r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Get assignment history\r\n  getAssignmentHistory: async (filters = {}) => {\r\n    const response = await api.get('/admin/assignment-history', { params: filters });\r\n    return response.data;\r\n  },\r\n\r\n  // Get farmers by assignment status\r\n  getFarmersByAssignmentStatus: async (assignmentStatus) => {\r\n    const response = await api.get('/admin/farmers/by-assignment-status', { \r\n      params: { assignmentStatus } \r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Get all registrations for admin\r\n  getAllRegistrations: async (filters = {}) => {\r\n    const response = await api.get('/admin/registration-list', { params: filters });\r\n    return response.data;\r\n  },\r\n\r\n  // Get registration list by status for admin\r\n  getRegistrationListByStatus: async (status) => {\r\n    const response = await api.get('/admin/registration-list/filter', { params: { status } });\r\n    return response.data;\r\n  },\r\n\r\n  // Approve registration for admin\r\n  approveRegistration: async (registrationId, approvalData) => {\r\n    const response = await api.post(`/admin/registrations/${registrationId}/approve`, approvalData);\r\n    return response.data;\r\n  },\r\n\r\n  // Reject registration for admin\r\n  rejectRegistration: async (registrationId, rejectionData) => {\r\n    const response = await api.post(`/admin/registrations/${registrationId}/reject`, rejectionData);\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// Employees API calls (for Super Admin and Admin)\r\nexport const employeesAPI = {\r\n  // Get all employees\r\n  getAllEmployees: async (filters = {}) => {\r\n    const response = await api.get('/super-admin/employees', { params: filters });\r\n    return response.data;\r\n  },\r\n\r\n  // Get employee by ID\r\n  getEmployeeById: async (id) => {\r\n    const response = await api.get(`/super-admin/employees/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Create employee\r\n  createEmployee: async (employeeData) => {\r\n    const response = await api.post('/super-admin/employees', employeeData);\r\n    return response.data;\r\n  },\r\n\r\n  // Update employee\r\n  updateEmployee: async (id, employeeData) => {\r\n    const response = await api.put(`/super-admin/employees/${id}`, employeeData);\r\n    return response.data;\r\n  },\r\n\r\n  // Delete employee\r\n  deleteEmployee: async (id) => {\r\n    const response = await api.delete(`/super-admin/employees/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get assigned farmers for employee\r\n  getAssignedFarmers: async (employeeId) => {\r\n    const response = await api.get(`/super-admin/employees/${employeeId}/assigned-farmers`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get employee statistics\r\n  getEmployeeStats: async () => {\r\n    const response = await api.get('/super-admin/employees/stats');\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// Employee-specific API calls (for Employee role)\r\nexport const employeeAPI = {\r\n  // Get assigned farmers for current employee\r\n  getAssignedFarmers: async (employeeId) => {\r\n    try {\r\n      console.log('🔄 Fetching assigned farmers from dashboard endpoint');\r\n      const response = await api.get('/employees/dashboard/assigned-farmers');\r\n      console.log('✅ Success with dashboard endpoint');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('❌ Failed to fetch assigned farmers:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get employee profile\r\n  getProfile: async () => {\r\n    const response = await api.get('/employees/profile');\r\n    return response.data;\r\n  },\r\n\r\n  // Update employee profile\r\n  updateProfile: async (profileData) => {\r\n    const response = await api.put('/employees/profile', profileData);\r\n    return response.data;\r\n  },\r\n\r\n  // Get employee statistics\r\n  getStats: async () => {\r\n    const response = await api.get('/employees/stats');\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// Registrations API calls\r\nexport const registrationsAPI = {\r\n  // Get all registrations\r\n  getAllRegistrations: async (filters = {}) => {\r\n    const response = await api.get('/registrations', { params: filters });\r\n    return response.data;\r\n  },\r\n\r\n  // Get registration by ID\r\n  getRegistrationById: async (id) => {\r\n    const response = await api.get(`/registrations/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Approve registration\r\n  approveRegistration: async (id, approvalData) => {\r\n    const response = await api.post(`/registrations/${id}/approve`, approvalData);\r\n    return response.data;\r\n  },\r\n\r\n  // Reject registration\r\n  rejectRegistration: async (id, rejectionData) => {\r\n    const response = await api.post(`/registrations/${id}/reject`, rejectionData);\r\n    return response.data;\r\n  },\r\n\r\n  // Get registration statistics\r\n  getRegistrationStats: async () => {\r\n    const response = await api.get('/registrations/stats');\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// KYC API calls\r\nexport const kycAPI = {\r\n  // Upload KYC documents\r\n  uploadDocuments: async (farmerId, documents) => {\r\n    const formData = new FormData();\r\n    Object.keys(documents).forEach(key => {\r\n      if (documents[key]) {\r\n        formData.append(key, documents[key]);\r\n      }\r\n    });\r\n    \r\n    const response = await api.post(`/employees/kyc/${farmerId}/upload`, formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Approve KYC\r\n  approveKYC: async (farmerId, approvalData) => {\r\n    const response = await api.put(`/employees/kyc/approve/${farmerId}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Reject KYC\r\n  rejectKYC: async (farmerId, rejectionData) => {\r\n    const response = await api.put(`/employees/kyc/reject/${farmerId}`, {\r\n      reason: rejectionData.reason || 'KYC rejected'\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Refer back KYC\r\n  referBackKYC: async (farmerId, referBackData) => {\r\n    const response = await api.put(`/employees/kyc/refer-back/${farmerId}`, {\r\n      reason: referBackData.reason || 'KYC referred back'\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Get KYC status\r\n  getKYCStatus: async (farmerId) => {\r\n    const response = await api.get(`/employees/kyc/${farmerId}/status`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get KYC documents\r\n  getKYCDocuments: async (farmerId) => {\r\n    const response = await api.get(`/employees/kyc/${farmerId}/documents`);\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// Dashboard API calls\r\nexport const dashboardAPI = {\r\n  // Get dashboard statistics\r\n  getDashboardStats: async () => {\r\n    const response = await api.get('/dashboard/stats');\r\n    return response.data;\r\n  },\r\n\r\n  // Get admin dashboard data\r\n  getAdminDashboardData: async () => {\r\n    const response = await api.get('/dashboard/admin');\r\n    return response.data;\r\n  },\r\n\r\n  // Get super admin dashboard data\r\n  getSuperAdminDashboardData: async () => {\r\n    const response = await api.get('/dashboard/super-admin');\r\n    return response.data;\r\n  },\r\n\r\n  // Get employee dashboard data\r\n  getEmployeeDashboardData: async (employeeId) => {\r\n    const response = await api.get(`/dashboard/employee/${employeeId}`);\r\n    return response.data;\r\n  }\r\n};\r\n\r\nexport default api; "],"names":["schema","yup","shape","name","required","dateOfBirth","test","value","dob","Date","today","ageDate","age","Math","abs","getUTCFullYear","gender","email","matches","phoneNumber","role","password","min","RegistrationForm","_location$state","initialRole","useLocation","state","register","handleSubmit","reset","formState","errors","useForm","resolver","yupResolver","defaultValues","emailValue","setEmailValue","useState","otpSent","setOtpSent","otp","setOtp","emailVerified","setEmailVerified","resendTimer","setResendTimer","useEffect","timer","setTimeout","t","clearTimeout","handleSendOTP","async","match","authAPI","sendOTP","alert","e","_e$response","_e$response$data","response","data","message","console","error","_jsxs","className","children","_jsx","width","height","viewBox","xmlns","stroke","strokeWidth","fill","strokeLinecap","d","transform","cx","cy","rx","ry","r","onSubmit","log","type","readOnly","placeholder","onChange","target","autoComplete","onClick","disabled","verifyOTP","Link","to","api","axios","create","baseURL","process","REACT_APP_API_URL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","Promise","reject","_error$response","status","removeItem","window","location","href","login","post","credentials","getProfile","get","userData","emailOrPhone","otpData","resendOTP","forgotPassword","forgotUserId","resetPassword","resetData","changePassword","passwordData","changeUserId","userIdData","getCountries","getStates","countryId","superAdminAPI","getAllUsers","getRegistrationList","filters","arguments","length","undefined","params","getRegistrationListByStatus","searchRegistrations","query","getPendingRegistrations","getApprovedUsers","getUsersByRole","getPendingUsersByRole","approveUser","userId","put","rejectUser","reason","deleteUser","delete","updateUser","updateUserStatus","getDashboardStats","bulkAssignFarmers","farmerIds","employeeId","assignFarmer","farmerId","farmersAPI","getAllFarmers","getFarmerById","id","createFarmer","farmerData","updateFarmer","deleteFarmer","getFarmerStats","adminAPI","getAllEmployees","getFarmersWithKyc","getEmployeesWithStats","getFarmersByEmployee","getTodoList","getEnhancedTodoList","filterFarmers","getLocations","getAssignmentHistory","getFarmersByAssignmentStatus","assignmentStatus","getAllRegistrations","approveRegistration","registrationId","approvalData","rejectRegistration","rejectionData","employeesAPI","getEmployeeById","createEmployee","employeeData","updateEmployee","deleteEmployee","getAssignedFarmers","getEmployeeStats","employeeAPI","updateProfile","profileData","getStats","kycAPI","uploadDocuments","documents","formData","FormData","Object","keys","forEach","key","append","approveKYC","rejectKYC","referBackKYC","referBackData","getKYCStatus","getKYCDocuments"],"sourceRoot":""}