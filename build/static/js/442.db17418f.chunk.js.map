{"version":3,"file":"static/js/442.db17418f.chunk.js","mappings":"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","sources":["api/apiService.js","pages/ChangePassword.jsx"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Create axios instance\r\nconst api = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8080/api',\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor to add auth token\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor for error handling\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('user');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Authentication API calls\r\nexport const authAPI = {\r\n  // Login\r\n  login: async (credentials) => {\r\n    const response = await api.post('/auth/login', credentials);\r\n    return response.data;\r\n  },\r\n\r\n  // Get user profile\r\n  getProfile: async () => {\r\n    const response = await api.get('/auth/profile');\r\n    return response.data;\r\n  },\r\n\r\n  // Register user\r\n  register: async (userData) => {\r\n    const response = await api.post('/auth/register', userData);\r\n    return response.data;\r\n  },\r\n\r\n  // Send OTP\r\n  sendOTP: async (email) => {\r\n    const response = await api.post('/auth/send-otp', { emailOrPhone: email });\r\n    return response.data;\r\n  },\r\n\r\n  // Verify OTP\r\n  verifyOTP: async (otpData) => {\r\n    const response = await api.post('/auth/verify-otp', { \r\n      emailOrPhone: otpData.email, \r\n      otp: otpData.otp \r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Resend OTP\r\n  resendOTP: async (email) => {\r\n    const response = await api.post('/auth/resend-otp', { emailOrPhone: email });\r\n    return response.data;\r\n  },\r\n\r\n  // Forgot password\r\n  forgotPassword: async (emailOrPhone) => {\r\n    const response = await api.post('/auth/forgot-password', { emailOrPhone });\r\n    return response.data;\r\n  },\r\n\r\n  // Forgot user ID\r\n  forgotUserId: async (emailOrPhone) => {\r\n    const response = await api.post('/auth/forgot-user-id', { emailOrPhone });\r\n    return response.data;\r\n  },\r\n\r\n  // Reset password\r\n  resetPassword: async (resetData) => {\r\n    const response = await api.post('/auth/reset-password', resetData);\r\n    return response.data;\r\n  },\r\n\r\n  // Change password\r\n  changePassword: async (passwordData) => {\r\n    const response = await api.post('/auth/change-password', passwordData);\r\n    return response.data;\r\n  },\r\n\r\n  // Change user ID\r\n  changeUserId: async (userIdData) => {\r\n    const response = await api.post('/auth/change-user-id', userIdData);\r\n    return response.data;\r\n  },\r\n\r\n  // Get countries\r\n  getCountries: async () => {\r\n    const response = await api.get('/auth/countries');\r\n    return response.data;\r\n  },\r\n\r\n  // Get states\r\n  getStates: async (countryId) => {\r\n    const response = await api.post('/auth/states', { countryId });\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// Super Admin API calls\r\nexport const superAdminAPI = {\r\n  // Get all users (registrations)\r\n  getAllUsers: async () => {\r\n    const response = await api.get('/super-admin/registration-list');\r\n    return response.data;\r\n  },\r\n\r\n  // Get registration list with filters\r\n  getRegistrationList: async (filters = {}) => {\r\n    const response = await api.get('/super-admin/registration-list', { params: filters });\r\n    return response.data;\r\n  },\r\n\r\n  // Get registration list by status\r\n  getRegistrationListByStatus: async (status) => {\r\n    const response = await api.get('/super-admin/registration-list/filter', { params: { status } });\r\n    return response.data;\r\n  },\r\n\r\n  // Search registrations\r\n  searchRegistrations: async (query) => {\r\n    const response = await api.get('/super-admin/registration-list/search', { params: { query } });\r\n    return response.data;\r\n  },\r\n\r\n  // Get pending registrations\r\n  getPendingRegistrations: async () => {\r\n    const response = await api.get('/super-admin/pending-registrations');\r\n    return response.data;\r\n  },\r\n\r\n  // Get approved users\r\n  getApprovedUsers: async () => {\r\n    const response = await api.get('/super-admin/approved-users');\r\n    return response.data;\r\n  },\r\n\r\n  // Get users by role\r\n  getUsersByRole: async (role) => {\r\n    const response = await api.get(`/super-admin/users/by-role/${role}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get pending users by role\r\n  getPendingUsersByRole: async (role) => {\r\n    const response = await api.get(`/super-admin/pending-users/by-role/${role}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Approve user\r\n  approveUser: async (userId, role) => {\r\n    const response = await api.put(`/auth/users/${userId}/approve`, { role });\r\n    return response.data;\r\n  },\r\n\r\n  // Reject user (update status to REJECTED)\r\n  rejectUser: async (userId, reason) => {\r\n    const response = await api.put(`/auth/users/${userId}/status`, { status: 'REJECTED' });\r\n    return response.data;\r\n  },\r\n\r\n  // Delete user\r\n  deleteUser: async (userId) => {\r\n    const response = await api.delete(`/super-admin/users/${userId}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Update user\r\n  updateUser: async (userId, userData) => {\r\n    const response = await api.put(`/super-admin/users/${userId}`, userData);\r\n    return response.data;\r\n  },\r\n\r\n  // Update user status\r\n  updateUserStatus: async (userId, status) => {\r\n    const response = await api.put(`/auth/users/${userId}/status`, { status });\r\n    return response.data;\r\n  },\r\n\r\n  // Get dashboard stats\r\n  getDashboardStats: async () => {\r\n    const response = await api.get('/super-admin/dashboard/stats');\r\n    return response.data;\r\n  },\r\n\r\n  // Bulk assign farmers to employee\r\n  bulkAssignFarmers: async (farmerIds, employeeId) => {\r\n    const response = await api.post('/super-admin/bulk-assign-farmers', { farmerIds, employeeId });\r\n    return response.data;\r\n  },\r\n\r\n  // Single assign farmer to employee (fallback)\r\n  assignFarmer: async (farmerId, employeeId) => {\r\n    const response = await api.post('/super-admin/assign-farmer', null, { \r\n      params: { farmerId, employeeId } \r\n    });\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// Farmers API calls\r\nexport const farmersAPI = {\r\n  // Get all farmers\r\n  getAllFarmers: async (filters = {}) => {\r\n    const response = await api.get('/super-admin/farmers', { params: filters });\r\n    return response.data;\r\n  },\r\n\r\n  // Get farmer by ID\r\n  getFarmerById: async (id) => {\r\n    const response = await api.get(`/super-admin/farmers/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Create farmer\r\n  createFarmer: async (farmerData) => {\r\n    const response = await api.post('/super-admin/farmers', farmerData);\r\n    return response.data;\r\n  },\r\n\r\n  // Update farmer\r\n  updateFarmer: async (id, farmerData) => {\r\n    const response = await api.put(`/super-admin/farmers/${id}`, farmerData);\r\n    return response.data;\r\n  },\r\n\r\n  // Delete farmer\r\n  deleteFarmer: async (id) => {\r\n    const response = await api.delete(`/super-admin/farmers/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Assign farmer to employee\r\n  assignFarmer: async (farmerId, employeeId) => {\r\n    const response = await api.post(`/super-admin/farmers/${farmerId}/assign`, { employeeId });\r\n    return response.data;\r\n  },\r\n\r\n  // Get farmer statistics\r\n  getFarmerStats: async () => {\r\n    const response = await api.get('/super-admin/farmers/stats');\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// Admin-specific API calls\r\nexport const adminAPI = {\r\n  // Get all farmers for admin\r\n  getAllFarmers: async (filters = {}) => {\r\n    const response = await api.get('/admin/farmers', { params: filters });\r\n    return response.data;\r\n  },\r\n\r\n  // Get all employees for admin\r\n  getAllEmployees: async (filters = {}) => {\r\n    const response = await api.get('/admin/employees', { params: filters });\r\n    return response.data;\r\n  },\r\n\r\n  // Get farmers with KYC status\r\n  getFarmersWithKyc: async () => {\r\n    const response = await api.get('/admin/farmers-with-kyc');\r\n    return response.data;\r\n  },\r\n\r\n  // Get employees with stats\r\n  getEmployeesWithStats: async () => {\r\n    const response = await api.get('/admin/employees-with-stats');\r\n    return response.data;\r\n  },\r\n\r\n  // Get farmers by employee\r\n  getFarmersByEmployee: async (employeeId) => {\r\n    const response = await api.get(`/admin/employees/${employeeId}/assigned-farmers`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get todo list for admin\r\n  getTodoList: async () => {\r\n    const response = await api.get('/admin/todo-list');\r\n    return response.data;\r\n  },\r\n\r\n  // Get enhanced todo list\r\n  getEnhancedTodoList: async () => {\r\n    const response = await api.get('/admin/enhanced-todo-list');\r\n    return response.data;\r\n  },\r\n\r\n  // Get dashboard stats\r\n  getDashboardStats: async () => {\r\n    const response = await api.get('/admin/dashboard-stats');\r\n    return response.data;\r\n  },\r\n\r\n  // Filter farmers\r\n  filterFarmers: async (filters = {}) => {\r\n    const response = await api.get('/admin/farmers/filter', { params: filters });\r\n    return response.data;\r\n  },\r\n\r\n  // Get locations\r\n  getLocations: async () => {\r\n    const response = await api.get('/admin/locations');\r\n    return response.data;\r\n  },\r\n\r\n  // Bulk assign farmers to employee\r\n  bulkAssignFarmers: async (farmerIds, employeeId) => {\r\n    const response = await api.post('/admin/bulk-assign-farmers', { farmerIds, employeeId });\r\n    return response.data;\r\n  },\r\n\r\n  // Single assign farmer to employee (fallback)\r\n  assignFarmer: async (farmerId, employeeId) => {\r\n    const response = await api.post('/admin/assign-farmer', null, { \r\n      params: { farmerId, employeeId } \r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Get assignment history\r\n  getAssignmentHistory: async (filters = {}) => {\r\n    const response = await api.get('/admin/assignment-history', { params: filters });\r\n    return response.data;\r\n  },\r\n\r\n  // Get farmers by assignment status\r\n  getFarmersByAssignmentStatus: async (assignmentStatus) => {\r\n    const response = await api.get('/admin/farmers/by-assignment-status', { \r\n      params: { assignmentStatus } \r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Get all registrations for admin\r\n  getAllRegistrations: async (filters = {}) => {\r\n    const response = await api.get('/admin/registration-list', { params: filters });\r\n    return response.data;\r\n  },\r\n\r\n  // Get registration list by status for admin\r\n  getRegistrationListByStatus: async (status) => {\r\n    const response = await api.get('/admin/registration-list/filter', { params: { status } });\r\n    return response.data;\r\n  },\r\n\r\n  // Approve registration for admin\r\n  approveRegistration: async (registrationId, approvalData) => {\r\n    const response = await api.post(`/admin/registrations/${registrationId}/approve`, approvalData);\r\n    return response.data;\r\n  },\r\n\r\n  // Reject registration for admin\r\n  rejectRegistration: async (registrationId, rejectionData) => {\r\n    const response = await api.post(`/admin/registrations/${registrationId}/reject`, rejectionData);\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// Employees API calls (for Super Admin and Admin)\r\nexport const employeesAPI = {\r\n  // Get all employees\r\n  getAllEmployees: async (filters = {}) => {\r\n    const response = await api.get('/super-admin/employees', { params: filters });\r\n    return response.data;\r\n  },\r\n\r\n  // Get employee by ID\r\n  getEmployeeById: async (id) => {\r\n    const response = await api.get(`/super-admin/employees/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Create employee\r\n  createEmployee: async (employeeData) => {\r\n    const response = await api.post('/super-admin/employees', employeeData);\r\n    return response.data;\r\n  },\r\n\r\n  // Update employee\r\n  updateEmployee: async (id, employeeData) => {\r\n    const response = await api.put(`/super-admin/employees/${id}`, employeeData);\r\n    return response.data;\r\n  },\r\n\r\n  // Delete employee\r\n  deleteEmployee: async (id) => {\r\n    const response = await api.delete(`/super-admin/employees/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get assigned farmers for employee\r\n  getAssignedFarmers: async (employeeId) => {\r\n    const response = await api.get(`/super-admin/employees/${employeeId}/assigned-farmers`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get employee statistics\r\n  getEmployeeStats: async () => {\r\n    const response = await api.get('/super-admin/employees/stats');\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// Employee-specific API calls (for Employee role)\r\nexport const employeeAPI = {\r\n  // Get assigned farmers for current employee\r\n  getAssignedFarmers: async (employeeId) => {\r\n    try {\r\n      console.log('🔄 Fetching assigned farmers from dashboard endpoint');\r\n      const response = await api.get('/employees/dashboard/assigned-farmers');\r\n      console.log('✅ Success with dashboard endpoint');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('❌ Failed to fetch assigned farmers:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get employee profile\r\n  getProfile: async () => {\r\n    const response = await api.get('/employees/profile');\r\n    return response.data;\r\n  },\r\n\r\n  // Update employee profile\r\n  updateProfile: async (profileData) => {\r\n    const response = await api.put('/employees/profile', profileData);\r\n    return response.data;\r\n  },\r\n\r\n  // Get employee statistics\r\n  getStats: async () => {\r\n    const response = await api.get('/employees/stats');\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// Registrations API calls\r\nexport const registrationsAPI = {\r\n  // Get all registrations\r\n  getAllRegistrations: async (filters = {}) => {\r\n    const response = await api.get('/registrations', { params: filters });\r\n    return response.data;\r\n  },\r\n\r\n  // Get registration by ID\r\n  getRegistrationById: async (id) => {\r\n    const response = await api.get(`/registrations/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Approve registration\r\n  approveRegistration: async (id, approvalData) => {\r\n    const response = await api.post(`/registrations/${id}/approve`, approvalData);\r\n    return response.data;\r\n  },\r\n\r\n  // Reject registration\r\n  rejectRegistration: async (id, rejectionData) => {\r\n    const response = await api.post(`/registrations/${id}/reject`, rejectionData);\r\n    return response.data;\r\n  },\r\n\r\n  // Get registration statistics\r\n  getRegistrationStats: async () => {\r\n    const response = await api.get('/registrations/stats');\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// KYC API calls\r\nexport const kycAPI = {\r\n  // Upload KYC documents\r\n  uploadDocuments: async (farmerId, documents) => {\r\n    const formData = new FormData();\r\n    Object.keys(documents).forEach(key => {\r\n      if (documents[key]) {\r\n        formData.append(key, documents[key]);\r\n      }\r\n    });\r\n    \r\n    const response = await api.post(`/employees/kyc/${farmerId}/upload`, formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Approve KYC\r\n  approveKYC: async (farmerId, approvalData) => {\r\n    const response = await api.put(`/employees/kyc/approve/${farmerId}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Reject KYC\r\n  rejectKYC: async (farmerId, rejectionData) => {\r\n    const response = await api.put(`/employees/kyc/reject/${farmerId}`, {\r\n      reason: rejectionData.reason || 'KYC rejected'\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Refer back KYC\r\n  referBackKYC: async (farmerId, referBackData) => {\r\n    const response = await api.put(`/employees/kyc/refer-back/${farmerId}`, {\r\n      reason: referBackData.reason || 'KYC referred back'\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Get KYC status\r\n  getKYCStatus: async (farmerId) => {\r\n    const response = await api.get(`/employees/kyc/${farmerId}/status`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get KYC documents\r\n  getKYCDocuments: async (farmerId) => {\r\n    const response = await api.get(`/employees/kyc/${farmerId}/documents`);\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// Dashboard API calls\r\nexport const dashboardAPI = {\r\n  // Get dashboard statistics\r\n  getDashboardStats: async () => {\r\n    const response = await api.get('/dashboard/stats');\r\n    return response.data;\r\n  },\r\n\r\n  // Get admin dashboard data\r\n  getAdminDashboardData: async () => {\r\n    const response = await api.get('/dashboard/admin');\r\n    return response.data;\r\n  },\r\n\r\n  // Get super admin dashboard data\r\n  getSuperAdminDashboardData: async () => {\r\n    const response = await api.get('/dashboard/super-admin');\r\n    return response.data;\r\n  },\r\n\r\n  // Get employee dashboard data\r\n  getEmployeeDashboardData: async (employeeId) => {\r\n    const response = await api.get(`/dashboard/employee/${employeeId}`);\r\n    return response.data;\r\n  }\r\n};\r\n\r\nexport default api; ","// This page is used for force password change on first login\r\nimport React, { useState, useContext } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { AuthContext } from '../contexts/AuthContext';\r\nimport api from '../api/apiService';\r\n\r\nimport '../styles/Login.css';\r\n\r\nconst ChangePassword = () => {\r\n  const { user, login } = useContext(AuthContext);\r\n  const navigate = useNavigate();\r\n  const [form, setForm] = useState({\r\n    newPassword: '',\r\n    confirmPassword: ''\r\n  });\r\n  const [error, setError] = useState('');\r\n  const [success, setSuccess] = useState('');\r\n\r\n  const handleChange = (e) => {\r\n    setForm({ ...form, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setError('');\r\n    setSuccess('');\r\n\r\n    if (form.newPassword !== form.confirmPassword) {\r\n      setError('New password and confirm password do not match.');\r\n      return;\r\n    }\r\n    if (form.newPassword.length < 6) {\r\n      setError('New password must be at least 6 characters long.');\r\n      return;\r\n    }\r\n    \r\n    // Check password requirements\r\n    const hasUpperCase = /[A-Z]/.test(form.newPassword);\r\n    const hasNumber = /\\d/.test(form.newPassword);\r\n    const hasAtSymbol = /@/.test(form.newPassword);\r\n    \r\n    if (!hasUpperCase || !hasNumber || !hasAtSymbol) {\r\n      setError('Password must include an uppercase letter, a number, and an @ symbol.');\r\n      return;\r\n    }\r\n    try {\r\n      console.log('Attempting to change password for user:', user?.email || user?.userName);\r\n      \r\n      // Use reset-password/confirm endpoint for first-time password change\r\n      // This endpoint doesn't require current password\r\n      const response = await api.post('/auth/reset-password/confirm', {\r\n        emailOrPhone: user?.email || user?.userName,\r\n        newPassword: form.newPassword,\r\n        confirmPassword: form.confirmPassword\r\n      });\r\n      console.log('Password change response:', response.data);\r\n      \r\n      setSuccess('Password changed successfully! Redirecting to dashboard...');\r\n      \r\n      // Update user data to remove forcePasswordChange flag\r\n      const updatedUser = {\r\n        ...user,\r\n        forcePasswordChange: false\r\n      };\r\n      \r\n      // Update localStorage and context\r\n      localStorage.setItem('user', JSON.stringify(updatedUser));\r\n      login(updatedUser, localStorage.getItem('token'));\r\n      \r\n      // Redirect to appropriate dashboard based on role\r\n      setTimeout(() => {\r\n        if (user.role === 'SUPER_ADMIN') {\r\n          navigate('/super-admin/dashboard');\r\n        } else if (user.role === 'ADMIN') {\r\n          navigate('/admin/dashboard');\r\n        } else if (user.role === 'EMPLOYEE') {\r\n          navigate('/employee/dashboard');\r\n        } else {\r\n          navigate('/dashboard');\r\n        }\r\n      }, 1500);\r\n    } catch (err) {\r\n      console.error('Password change error:', err);\r\n      console.error('Error response:', err.response?.data);\r\n      console.error('Error status:', err.response?.status);\r\n      \r\n      // Provide more specific error messages\r\n      if (err.response?.status === 400) {\r\n        setError(err.response?.data?.message || 'Invalid password format. Please check the requirements.');\r\n      } else if (err.response?.status === 401) {\r\n        setError('Session expired. Please log in again.');\r\n      } else if (err.response?.status === 404) {\r\n        setError('User not found. Please contact administrator.');\r\n      } else if (err.response?.status === 500) {\r\n        setError('Server error. Please try again later.');\r\n      } else if (err.response?.data?.message) {\r\n        setError(err.response.data.message);\r\n      } else {\r\n        setError('Failed to change password. Please try again.');\r\n      }\r\n    }\r\n  };\r\n\r\n  if (!user) {\r\n    navigate('/login');\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className=\"change-password-page-container\">\r\n      {/* Top Navigation Bar */}\r\n      <nav className=\"change-password-page-navbar\">\r\n        <div className=\"change-password-page-logo\">\r\n          <span>DATE</span>\r\n        </div>\r\n        <div className=\"change-password-page-nav-links\">\r\n          <a href=\"#dashboard\">Dashboard</a>\r\n          <span className=\"change-password-page-nav-dot\">•</span>\r\n          <a href=\"#enrollment\">Check Enrollment Status</a>\r\n          <span className=\"change-password-page-nav-dot\">•</span>\r\n          <a href=\"#csc\">Login with CSC</a>\r\n        </div>\r\n      </nav>\r\n\r\n      <div className=\"change-password-page-main-content\">\r\n        {/* Left Section - Information Panel */}\r\n        <div className=\"change-password-page-info-panel\">\r\n          <div className=\"change-password-page-agri-stack-header\">\r\n            <h1 className=\"change-password-page-agri-stack-title\">\r\n              <span className=\"change-password-page-agri-text\">Date</span>\r\n              <span className=\"change-password-page-agri-text\">Agri</span>\r\n              <span className=\"change-password-page-leaf-icon\">🌿</span>\r\n              <span className=\"change-password-page-stack-text\">Stack</span>\r\n            </h1>\r\n            <h2 className=\"change-password-page-registry-title\">India Farmer Registry</h2>\r\n          </div>\r\n          <div className=\"change-password-page-registry-info\">\r\n            <h3>Digital Agristack Transaction Enterprises</h3>\r\n            <p className=\"change-password-page-help-desk\">\r\n              Empowering Agricultural Excellence\r\n            </p>\r\n          </div>\r\n          \r\n          {/* Enhanced Agricultural Content */}\r\n          <div className=\"change-password-page-agricultural-highlights\">\r\n            <div className=\"change-password-page-highlight-item\">\r\n              <span className=\"change-password-page-highlight-icon\">🌾</span>\r\n              <div className=\"change-password-page-highlight-content\">\r\n                <h4>Revolutionizing Indian Agriculture</h4>\r\n                <p>Connecting 140+ million farmers with cutting-edge digital solutions</p>\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"change-password-page-highlight-item\">\r\n              <span className=\"change-password-page-highlight-icon\">📱</span>\r\n              <div className=\"change-password-page-highlight-content\">\r\n                <h4>Smart Farming Technology</h4>\r\n                <p>AI-powered crop monitoring and precision agriculture tools</p>\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"change-password-page-highlight-item\">\r\n              <span className=\"change-password-page-highlight-icon\">💰</span>\r\n              <div className=\"change-password-page-highlight-content\">\r\n                <h4>Financial Inclusion</h4>\r\n                <p>Direct benefit transfers and digital payment solutions</p>\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"change-password-page-highlight-item\">\r\n              <span className=\"change-password-page-highlight-icon\">🌱</span>\r\n              <div className=\"change-password-page-highlight-content\">\r\n                <h4>Sustainable Practices</h4>\r\n                <p>Promoting eco-friendly farming and climate-smart agriculture</p>\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"change-password-page-highlight-item\">\r\n              <span className=\"change-password-page-highlight-icon\">🏆</span>\r\n              <div className=\"change-password-page-highlight-content\">\r\n                <h4>National Recognition</h4>\r\n                <p>Government of India's flagship agricultural digitization initiative</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Right Section - Change Password Form */}\r\n        <div className=\"change-password-page-form-section\">\r\n          <div className=\"change-password-page-card\">\r\n            {/* DATE Logo at Top */}\r\n            <div className=\"change-password-page-date-logo-section\">\r\n              <div className=\"change-password-page-date-logo\">DATE</div>\r\n              <div className=\"change-password-page-date-text\">\r\n                <h3>Digital Agristack Transaction Enterprises</h3>\r\n                <p>Empowering Agricultural Excellence</p>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"change-password-page-content\">\r\n              <h2>Change Password</h2>\r\n              <form onSubmit={handleSubmit}>\r\n                <div className=\"change-password-page-form-field\">\r\n                  <label>New Password:</label>\r\n                  <input\r\n                    type=\"password\"\r\n                    name=\"newPassword\"\r\n                    value={form.newPassword}\r\n                    onChange={handleChange}\r\n                    required\r\n                    placeholder=\"Enter your new password\"\r\n                    disabled={!!success}\r\n                  />\r\n                  <div style={{ fontSize: 13, color: '#888', marginTop: 2 }}>\r\n                    Password must be at least 6 characters, include an uppercase letter, a number, and an @ symbol.\r\n                  </div>\r\n                </div>\r\n                <div className=\"change-password-page-form-field\">\r\n                  <label>Confirm New Password:</label>\r\n                  <input\r\n                    type=\"password\"\r\n                    name=\"confirmPassword\"\r\n                    value={form.confirmPassword}\r\n                    onChange={handleChange}\r\n                    required\r\n                    placeholder=\"Confirm your new password\"\r\n                    disabled={!!success}\r\n                  />\r\n                </div>\r\n                {error && <div className=\"change-password-page-error-text\">{error}</div>}\r\n                {success && <div className=\"change-password-page-success-text\">{success}</div>}\r\n                <button type=\"submit\" className=\"change-password-page-login-btn\" disabled={!!success}>\r\n                  Change Password\r\n                </button>\r\n              </form>\r\n            </div>\r\n\r\n            {/* Success popup/modal */}\r\n            {success && (\r\n              <div style={{\r\n                position: 'fixed', left: 0, top: 0, width: '100vw', height: '100vh', background: 'rgba(0,0,0,0.25)', display: 'flex', alignItems: 'center', justifyContent: 'center', zIndex: 1000\r\n              }}>\r\n                <div style={{ background: '#fff', borderRadius: 10, padding: 32, minWidth: 320, boxShadow: '0 2px 16px #0002', textAlign: 'center' }}>\r\n                  <h2 style={{ color: '#22c55e', marginBottom: 12 }}>Password Changed!</h2>\r\n                  <p style={{ color: '#333', marginBottom: 18 }}>Your password has been updated successfully.<br/>Redirecting to your dashboard...</p>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChangePassword; "],"names":["api","axios","create","baseURL","process","REACT_APP_API_URL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","authAPI","login","async","post","credentials","data","getProfile","get","register","userData","sendOTP","emailOrPhone","email","verifyOTP","otpData","otp","resendOTP","forgotPassword","forgotUserId","resetPassword","resetData","changePassword","passwordData","changeUserId","userIdData","getCountries","getStates","countryId","superAdminAPI","getAllUsers","getRegistrationList","filters","arguments","length","undefined","params","getRegistrationListByStatus","searchRegistrations","query","getPendingRegistrations","getApprovedUsers","getUsersByRole","role","getPendingUsersByRole","approveUser","userId","put","rejectUser","reason","deleteUser","delete","updateUser","updateUserStatus","getDashboardStats","bulkAssignFarmers","farmerIds","employeeId","assignFarmer","farmerId","farmersAPI","getAllFarmers","getFarmerById","id","createFarmer","farmerData","updateFarmer","deleteFarmer","getFarmerStats","adminAPI","getAllEmployees","getFarmersWithKyc","getEmployeesWithStats","getFarmersByEmployee","getTodoList","getEnhancedTodoList","filterFarmers","getLocations","getAssignmentHistory","getFarmersByAssignmentStatus","assignmentStatus","getAllRegistrations","approveRegistration","registrationId","approvalData","rejectRegistration","rejectionData","employeesAPI","getEmployeeById","createEmployee","employeeData","updateEmployee","deleteEmployee","getAssignedFarmers","getEmployeeStats","employeeAPI","console","log","updateProfile","profileData","getStats","kycAPI","uploadDocuments","documents","formData","FormData","Object","keys","forEach","key","append","approveKYC","rejectKYC","referBackKYC","referBackData","getKYCStatus","getKYCDocuments","ChangePassword","user","useContext","AuthContext","navigate","useNavigate","form","setForm","useState","newPassword","confirmPassword","setError","success","setSuccess","handleChange","e","target","name","value","_jsxs","className","children","_jsx","onSubmit","preventDefault","hasUpperCase","test","hasNumber","hasAtSymbol","userName","updatedUser","forcePasswordChange","setItem","JSON","stringify","setTimeout","err","_err$response","_err$response2","_err$response3","_err$response5","_err$response6","_err$response7","_err$response8","_err$response8$data","_err$response4","_err$response4$data","message","type","onChange","required","placeholder","disabled","style","fontSize","color","marginTop","position","left","top","width","height","background","display","alignItems","justifyContent","zIndex","borderRadius","padding","minWidth","boxShadow","textAlign","marginBottom"],"sourceRoot":""}