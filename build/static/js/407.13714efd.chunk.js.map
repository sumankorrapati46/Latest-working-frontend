{"version":3,"file":"static/js/407.13714efd.chunk.js","mappings":"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","sources":["api/apiService.js","pages/ChangeUserId.jsx"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Create axios instance\r\nconst api = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8080/api',\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor to add auth token\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor for error handling\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('user');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Authentication API calls\r\nexport const authAPI = {\r\n  // Login\r\n  login: async (credentials) => {\r\n    const response = await api.post('/auth/login', credentials);\r\n    return response.data;\r\n  },\r\n\r\n  // Get user profile\r\n  getProfile: async () => {\r\n    const response = await api.get('/auth/profile');\r\n    return response.data;\r\n  },\r\n\r\n  // Register user\r\n  register: async (userData) => {\r\n    const response = await api.post('/auth/register', userData);\r\n    return response.data;\r\n  },\r\n\r\n  // Send OTP\r\n  sendOTP: async (email) => {\r\n    const response = await api.post('/auth/send-otp', { emailOrPhone: email });\r\n    return response.data;\r\n  },\r\n\r\n  // Verify OTP\r\n  verifyOTP: async (otpData) => {\r\n    const response = await api.post('/auth/verify-otp', { \r\n      emailOrPhone: otpData.email, \r\n      otp: otpData.otp \r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Resend OTP\r\n  resendOTP: async (email) => {\r\n    const response = await api.post('/auth/resend-otp', { emailOrPhone: email });\r\n    return response.data;\r\n  },\r\n\r\n  // Forgot password\r\n  forgotPassword: async (emailOrPhone) => {\r\n    const response = await api.post('/auth/forgot-password', { emailOrPhone });\r\n    return response.data;\r\n  },\r\n\r\n  // Forgot user ID\r\n  forgotUserId: async (emailOrPhone) => {\r\n    const response = await api.post('/auth/forgot-user-id', { emailOrPhone });\r\n    return response.data;\r\n  },\r\n\r\n  // Reset password\r\n  resetPassword: async (resetData) => {\r\n    const response = await api.post('/auth/reset-password', resetData);\r\n    return response.data;\r\n  },\r\n\r\n  // Change password\r\n  changePassword: async (passwordData) => {\r\n    const response = await api.post('/auth/change-password', passwordData);\r\n    return response.data;\r\n  },\r\n\r\n  // Change user ID\r\n  changeUserId: async (userIdData) => {\r\n    const response = await api.post('/auth/change-user-id', userIdData);\r\n    return response.data;\r\n  },\r\n\r\n  // Get countries\r\n  getCountries: async () => {\r\n    const response = await api.get('/auth/countries');\r\n    return response.data;\r\n  },\r\n\r\n  // Get states\r\n  getStates: async (countryId) => {\r\n    const response = await api.post('/auth/states', { countryId });\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// Super Admin API calls\r\nexport const superAdminAPI = {\r\n  // Get all users (registrations)\r\n  getAllUsers: async () => {\r\n    const response = await api.get('/super-admin/registration-list');\r\n    return response.data;\r\n  },\r\n\r\n  // Get registration list with filters\r\n  getRegistrationList: async (filters = {}) => {\r\n    const response = await api.get('/super-admin/registration-list', { params: filters });\r\n    return response.data;\r\n  },\r\n\r\n  // Get registration list by status\r\n  getRegistrationListByStatus: async (status) => {\r\n    const response = await api.get('/super-admin/registration-list/filter', { params: { status } });\r\n    return response.data;\r\n  },\r\n\r\n  // Search registrations\r\n  searchRegistrations: async (query) => {\r\n    const response = await api.get('/super-admin/registration-list/search', { params: { query } });\r\n    return response.data;\r\n  },\r\n\r\n  // Get pending registrations\r\n  getPendingRegistrations: async () => {\r\n    const response = await api.get('/super-admin/pending-registrations');\r\n    return response.data;\r\n  },\r\n\r\n  // Get approved users\r\n  getApprovedUsers: async () => {\r\n    const response = await api.get('/super-admin/approved-users');\r\n    return response.data;\r\n  },\r\n\r\n  // Get users by role\r\n  getUsersByRole: async (role) => {\r\n    const response = await api.get(`/super-admin/users/by-role/${role}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get pending users by role\r\n  getPendingUsersByRole: async (role) => {\r\n    const response = await api.get(`/super-admin/pending-users/by-role/${role}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Approve user\r\n  approveUser: async (userId, role) => {\r\n    const response = await api.put(`/auth/users/${userId}/approve`, { role });\r\n    return response.data;\r\n  },\r\n\r\n  // Reject user (update status to REJECTED)\r\n  rejectUser: async (userId, reason) => {\r\n    const response = await api.put(`/auth/users/${userId}/status`, { status: 'REJECTED' });\r\n    return response.data;\r\n  },\r\n\r\n  // Delete user\r\n  deleteUser: async (userId) => {\r\n    const response = await api.delete(`/super-admin/users/${userId}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Update user\r\n  updateUser: async (userId, userData) => {\r\n    const response = await api.put(`/super-admin/users/${userId}`, userData);\r\n    return response.data;\r\n  },\r\n\r\n  // Update user status\r\n  updateUserStatus: async (userId, status) => {\r\n    const response = await api.put(`/auth/users/${userId}/status`, { status });\r\n    return response.data;\r\n  },\r\n\r\n  // Get dashboard stats\r\n  getDashboardStats: async () => {\r\n    const response = await api.get('/super-admin/dashboard/stats');\r\n    return response.data;\r\n  },\r\n\r\n  // Bulk assign farmers to employee\r\n  bulkAssignFarmers: async (farmerIds, employeeId) => {\r\n    const response = await api.post('/super-admin/bulk-assign-farmers', { farmerIds, employeeId });\r\n    return response.data;\r\n  },\r\n\r\n  // Single assign farmer to employee (fallback)\r\n  assignFarmer: async (farmerId, employeeId) => {\r\n    const response = await api.post('/super-admin/assign-farmer', null, { \r\n      params: { farmerId, employeeId } \r\n    });\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// Farmers API calls\r\nexport const farmersAPI = {\r\n  // Get all farmers\r\n  getAllFarmers: async (filters = {}) => {\r\n    const response = await api.get('/super-admin/farmers', { params: filters });\r\n    return response.data;\r\n  },\r\n\r\n  // Get farmer by ID\r\n  getFarmerById: async (id) => {\r\n    const response = await api.get(`/super-admin/farmers/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Create farmer\r\n  createFarmer: async (farmerData) => {\r\n    const response = await api.post('/super-admin/farmers', farmerData);\r\n    return response.data;\r\n  },\r\n\r\n  // Update farmer\r\n  updateFarmer: async (id, farmerData) => {\r\n    const response = await api.put(`/super-admin/farmers/${id}`, farmerData);\r\n    return response.data;\r\n  },\r\n\r\n  // Delete farmer\r\n  deleteFarmer: async (id) => {\r\n    const response = await api.delete(`/super-admin/farmers/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Assign farmer to employee\r\n  assignFarmer: async (farmerId, employeeId) => {\r\n    const response = await api.post(`/super-admin/farmers/${farmerId}/assign`, { employeeId });\r\n    return response.data;\r\n  },\r\n\r\n  // Get farmer statistics\r\n  getFarmerStats: async () => {\r\n    const response = await api.get('/super-admin/farmers/stats');\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// Admin-specific API calls\r\nexport const adminAPI = {\r\n  // Get all farmers for admin\r\n  getAllFarmers: async (filters = {}) => {\r\n    const response = await api.get('/admin/farmers', { params: filters });\r\n    return response.data;\r\n  },\r\n\r\n  // Get all employees for admin\r\n  getAllEmployees: async (filters = {}) => {\r\n    const response = await api.get('/admin/employees', { params: filters });\r\n    return response.data;\r\n  },\r\n\r\n  // Get farmers with KYC status\r\n  getFarmersWithKyc: async () => {\r\n    const response = await api.get('/admin/farmers-with-kyc');\r\n    return response.data;\r\n  },\r\n\r\n  // Get employees with stats\r\n  getEmployeesWithStats: async () => {\r\n    const response = await api.get('/admin/employees-with-stats');\r\n    return response.data;\r\n  },\r\n\r\n  // Get farmers by employee\r\n  getFarmersByEmployee: async (employeeId) => {\r\n    const response = await api.get(`/admin/employees/${employeeId}/assigned-farmers`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get todo list for admin\r\n  getTodoList: async () => {\r\n    const response = await api.get('/admin/todo-list');\r\n    return response.data;\r\n  },\r\n\r\n  // Get enhanced todo list\r\n  getEnhancedTodoList: async () => {\r\n    const response = await api.get('/admin/enhanced-todo-list');\r\n    return response.data;\r\n  },\r\n\r\n  // Get dashboard stats\r\n  getDashboardStats: async () => {\r\n    const response = await api.get('/admin/dashboard-stats');\r\n    return response.data;\r\n  },\r\n\r\n  // Filter farmers\r\n  filterFarmers: async (filters = {}) => {\r\n    const response = await api.get('/admin/farmers/filter', { params: filters });\r\n    return response.data;\r\n  },\r\n\r\n  // Get locations\r\n  getLocations: async () => {\r\n    const response = await api.get('/admin/locations');\r\n    return response.data;\r\n  },\r\n\r\n  // Bulk assign farmers to employee\r\n  bulkAssignFarmers: async (farmerIds, employeeId) => {\r\n    const response = await api.post('/admin/bulk-assign-farmers', { farmerIds, employeeId });\r\n    return response.data;\r\n  },\r\n\r\n  // Single assign farmer to employee (fallback)\r\n  assignFarmer: async (farmerId, employeeId) => {\r\n    const response = await api.post('/admin/assign-farmer', null, { \r\n      params: { farmerId, employeeId } \r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Get assignment history\r\n  getAssignmentHistory: async (filters = {}) => {\r\n    const response = await api.get('/admin/assignment-history', { params: filters });\r\n    return response.data;\r\n  },\r\n\r\n  // Get farmers by assignment status\r\n  getFarmersByAssignmentStatus: async (assignmentStatus) => {\r\n    const response = await api.get('/admin/farmers/by-assignment-status', { \r\n      params: { assignmentStatus } \r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Get all registrations for admin\r\n  getAllRegistrations: async (filters = {}) => {\r\n    const response = await api.get('/admin/registration-list', { params: filters });\r\n    return response.data;\r\n  },\r\n\r\n  // Get registration list by status for admin\r\n  getRegistrationListByStatus: async (status) => {\r\n    const response = await api.get('/admin/registration-list/filter', { params: { status } });\r\n    return response.data;\r\n  },\r\n\r\n  // Approve registration for admin\r\n  approveRegistration: async (registrationId, approvalData) => {\r\n    const response = await api.post(`/admin/registrations/${registrationId}/approve`, approvalData);\r\n    return response.data;\r\n  },\r\n\r\n  // Reject registration for admin\r\n  rejectRegistration: async (registrationId, rejectionData) => {\r\n    const response = await api.post(`/admin/registrations/${registrationId}/reject`, rejectionData);\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// Employees API calls (for Super Admin and Admin)\r\nexport const employeesAPI = {\r\n  // Get all employees\r\n  getAllEmployees: async (filters = {}) => {\r\n    const response = await api.get('/super-admin/employees', { params: filters });\r\n    return response.data;\r\n  },\r\n\r\n  // Get employee by ID\r\n  getEmployeeById: async (id) => {\r\n    const response = await api.get(`/super-admin/employees/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Create employee\r\n  createEmployee: async (employeeData) => {\r\n    const response = await api.post('/super-admin/employees', employeeData);\r\n    return response.data;\r\n  },\r\n\r\n  // Update employee\r\n  updateEmployee: async (id, employeeData) => {\r\n    const response = await api.put(`/super-admin/employees/${id}`, employeeData);\r\n    return response.data;\r\n  },\r\n\r\n  // Delete employee\r\n  deleteEmployee: async (id) => {\r\n    const response = await api.delete(`/super-admin/employees/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get assigned farmers for employee\r\n  getAssignedFarmers: async (employeeId) => {\r\n    const response = await api.get(`/super-admin/employees/${employeeId}/assigned-farmers`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get employee statistics\r\n  getEmployeeStats: async () => {\r\n    const response = await api.get('/super-admin/employees/stats');\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// Employee-specific API calls (for Employee role)\r\nexport const employeeAPI = {\r\n  // Get assigned farmers for current employee\r\n  getAssignedFarmers: async (employeeId) => {\r\n    try {\r\n      console.log('🔄 Fetching assigned farmers from dashboard endpoint');\r\n      const response = await api.get('/employees/dashboard/assigned-farmers');\r\n      console.log('✅ Success with dashboard endpoint');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('❌ Failed to fetch assigned farmers:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get employee profile\r\n  getProfile: async () => {\r\n    const response = await api.get('/employees/profile');\r\n    return response.data;\r\n  },\r\n\r\n  // Update employee profile\r\n  updateProfile: async (profileData) => {\r\n    const response = await api.put('/employees/profile', profileData);\r\n    return response.data;\r\n  },\r\n\r\n  // Get employee statistics\r\n  getStats: async () => {\r\n    const response = await api.get('/employees/stats');\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// Registrations API calls\r\nexport const registrationsAPI = {\r\n  // Get all registrations\r\n  getAllRegistrations: async (filters = {}) => {\r\n    const response = await api.get('/registrations', { params: filters });\r\n    return response.data;\r\n  },\r\n\r\n  // Get registration by ID\r\n  getRegistrationById: async (id) => {\r\n    const response = await api.get(`/registrations/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Approve registration\r\n  approveRegistration: async (id, approvalData) => {\r\n    const response = await api.post(`/registrations/${id}/approve`, approvalData);\r\n    return response.data;\r\n  },\r\n\r\n  // Reject registration\r\n  rejectRegistration: async (id, rejectionData) => {\r\n    const response = await api.post(`/registrations/${id}/reject`, rejectionData);\r\n    return response.data;\r\n  },\r\n\r\n  // Get registration statistics\r\n  getRegistrationStats: async () => {\r\n    const response = await api.get('/registrations/stats');\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// KYC API calls\r\nexport const kycAPI = {\r\n  // Upload KYC documents\r\n  uploadDocuments: async (farmerId, documents) => {\r\n    const formData = new FormData();\r\n    Object.keys(documents).forEach(key => {\r\n      if (documents[key]) {\r\n        formData.append(key, documents[key]);\r\n      }\r\n    });\r\n    \r\n    const response = await api.post(`/employees/kyc/${farmerId}/upload`, formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Approve KYC\r\n  approveKYC: async (farmerId, approvalData) => {\r\n    const response = await api.put(`/employees/kyc/approve/${farmerId}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Reject KYC\r\n  rejectKYC: async (farmerId, rejectionData) => {\r\n    const response = await api.put(`/employees/kyc/reject/${farmerId}`, {\r\n      reason: rejectionData.reason || 'KYC rejected'\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Refer back KYC\r\n  referBackKYC: async (farmerId, referBackData) => {\r\n    const response = await api.put(`/employees/kyc/refer-back/${farmerId}`, {\r\n      reason: referBackData.reason || 'KYC referred back'\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Get KYC status\r\n  getKYCStatus: async (farmerId) => {\r\n    const response = await api.get(`/employees/kyc/${farmerId}/status`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get KYC documents\r\n  getKYCDocuments: async (farmerId) => {\r\n    const response = await api.get(`/employees/kyc/${farmerId}/documents`);\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// Dashboard API calls\r\nexport const dashboardAPI = {\r\n  // Get dashboard statistics\r\n  getDashboardStats: async () => {\r\n    const response = await api.get('/dashboard/stats');\r\n    return response.data;\r\n  },\r\n\r\n  // Get admin dashboard data\r\n  getAdminDashboardData: async () => {\r\n    const response = await api.get('/dashboard/admin');\r\n    return response.data;\r\n  },\r\n\r\n  // Get super admin dashboard data\r\n  getSuperAdminDashboardData: async () => {\r\n    const response = await api.get('/dashboard/super-admin');\r\n    return response.data;\r\n  },\r\n\r\n  // Get employee dashboard data\r\n  getEmployeeDashboardData: async (employeeId) => {\r\n    const response = await api.get(`/dashboard/employee/${employeeId}`);\r\n    return response.data;\r\n  }\r\n};\r\n\r\nexport default api; ","import React, { useState } from 'react';\r\nimport { authAPI } from '../api/apiService';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport \"../styles/Login.css\";\r\n\r\n \r\nconst ChangeUserId = () => {\r\n  const [newUserId, setNewUserId] = useState('');\r\n  const [confirmUserId, setConfirmUserId] = useState('');\r\n  const [error, setError] = useState('');\r\n  \r\n  const navigate = useNavigate();\r\n\r\nconst handleChangeUserId = async () => {\r\n  if (!newUserId || !confirmUserId) {\r\n    setError('Both fields are required.'); \r\n    return;\r\n  } else if (newUserId !== confirmUserId) {\r\n    setError('User IDs do not match.');\r\n    return;\r\n  }\r\n\r\n  setError('');\r\n\r\n  try {\r\n    await authAPI.changeUserId({ newUserName: newUserId, password: '' });\r\n\r\n    alert(`User ID changed successfully to: ${newUserId}`);\r\n    navigate('/login');\r\n  } catch (error) {\r\n    if (error.response && error.response.data && error.response.data.message) {\r\n      setError(error.response.data.message);\r\n    } else {\r\n      setError('Failed to change User ID. Please try again.');\r\n    }\r\n  }\r\n};\r\n\r\n  return (\r\n    <div className=\"change-userid-page-container\">\r\n      {/* Top Navigation Bar */}\r\n      <nav className=\"change-userid-page-navbar\">\r\n        <div className=\"change-userid-page-logo\">\r\n          <span>DATE</span>\r\n        </div>\r\n        <div className=\"change-userid-page-nav-links\">\r\n          <a href=\"#dashboard\">Dashboard</a>\r\n          <span className=\"change-userid-page-nav-dot\">•</span>\r\n          <a href=\"#enrollment\">Check Enrollment Status</a>\r\n          <span className=\"change-userid-page-nav-dot\">•</span>\r\n          <a href=\"#csc\">Login with CSC</a>\r\n        </div>\r\n      </nav>\r\n\r\n      <div className=\"change-userid-page-main-content\">\r\n        {/* Left Section - Information Panel */}\r\n        <div className=\"change-userid-page-info-panel\">\r\n          <div className=\"change-userid-page-agri-stack-header\">\r\n            <h1 className=\"change-userid-page-agri-stack-title\">\r\n              <span className=\"change-userid-page-agri-text\">Date</span>\r\n              <span className=\"change-userid-page-agri-text\">Agri</span>\r\n              <span className=\"change-userid-page-leaf-icon\">🌿</span>\r\n              <span className=\"change-userid-page-stack-text\">Stack</span>\r\n            </h1>\r\n            <h2 className=\"change-userid-page-registry-title\">India Farmer Registry</h2>\r\n          </div>\r\n          <div className=\"change-userid-page-registry-info\">\r\n            <h3>Digital Agristack Transaction Enterprises</h3>\r\n            <p className=\"change-userid-page-help-desk\">\r\n              Empowering Agricultural Excellence\r\n            </p>\r\n          </div>\r\n          \r\n          {/* Enhanced Agricultural Content */}\r\n          <div className=\"change-userid-page-agricultural-highlights\">\r\n            <div className=\"change-userid-page-highlight-item\">\r\n              <span className=\"change-userid-page-highlight-icon\">🌾</span>\r\n              <div className=\"change-userid-page-highlight-content\">\r\n                <h4>Revolutionizing Indian Agriculture</h4>\r\n                <p>Connecting 140+ million farmers with cutting-edge digital solutions</p>\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"change-userid-page-highlight-item\">\r\n              <span className=\"change-userid-page-highlight-icon\">📱</span>\r\n              <div className=\"change-userid-page-highlight-content\">\r\n                <h4>Smart Farming Technology</h4>\r\n                <p>AI-powered crop monitoring and precision agriculture tools</p>\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"change-userid-page-highlight-item\">\r\n              <span className=\"change-userid-page-highlight-icon\">💰</span>\r\n              <div className=\"change-userid-page-highlight-content\">\r\n                <h4>Financial Inclusion</h4>\r\n                <p>Direct benefit transfers and digital payment solutions</p>\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"change-userid-page-highlight-item\">\r\n              <span className=\"change-userid-page-highlight-icon\">🌱</span>\r\n              <div className=\"change-userid-page-highlight-content\">\r\n                <h4>Sustainable Practices</h4>\r\n                <p>Promoting eco-friendly farming and climate-smart agriculture</p>\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"change-userid-page-highlight-item\">\r\n              <span className=\"change-userid-page-highlight-icon\">🏆</span>\r\n              <div className=\"change-userid-page-highlight-content\">\r\n                <h4>National Recognition</h4>\r\n                <p>Government of India's flagship agricultural digitization initiative</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Right Section - Change User ID Form */}\r\n        <div className=\"change-userid-page-form-section\">\r\n          <div className=\"change-userid-page-card\">\r\n            {/* DATE Logo at Top */}\r\n            <div className=\"change-userid-page-date-logo-section\">\r\n              <div className=\"change-userid-page-date-logo\">DATE</div>\r\n              <div className=\"change-userid-page-date-text\">\r\n                <h3>Digital Agristack Transaction Enterprises</h3>\r\n                <p>Empowering Agricultural Excellence</p>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"change-userid-page-content\">\r\n              <h2>User ID</h2>\r\n              <h4 style={{textAlign: 'center', color: '#666', marginBottom: '1.5rem'}}>Set a strong User id to prevent unauthorized access to your account.</h4>\r\n              <form>\r\n                <div className=\"change-userid-page-form-field\">\r\n                  <label htmlFor=\"newUserId\">New User ID</label>\r\n                  <input\r\n                    id=\"newUserId\"\r\n                    type=\"text\"\r\n                    value={newUserId}\r\n                    onChange={(e) => setNewUserId(e.target.value)}\r\n                  />\r\n                </div>\r\n                <div className=\"change-userid-page-form-field\">\r\n                  <label htmlFor=\"confirmUserId\">Confirm User ID</label>\r\n                  <input\r\n                    id=\"confirmUserId\"\r\n                    type=\"text\"\r\n                    value={confirmUserId}\r\n                    onChange={(e) => setConfirmUserId(e.target.value)}\r\n                  />\r\n                </div>\r\n                {error && <p className=\"change-userid-page-error-text\">{error}</p>}\r\n                <button className=\"change-userid-page-login-btn\" onClick={handleChangeUserId}>\r\n                  Change User ID\r\n                </button>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChangeUserId; "],"names":["api","axios","create","baseURL","process","REACT_APP_API_URL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","authAPI","login","async","post","credentials","data","getProfile","get","register","userData","sendOTP","emailOrPhone","email","verifyOTP","otpData","otp","resendOTP","forgotPassword","forgotUserId","resetPassword","resetData","changePassword","passwordData","changeUserId","userIdData","getCountries","getStates","countryId","superAdminAPI","getAllUsers","getRegistrationList","filters","arguments","length","undefined","params","getRegistrationListByStatus","searchRegistrations","query","getPendingRegistrations","getApprovedUsers","getUsersByRole","role","getPendingUsersByRole","approveUser","userId","put","rejectUser","reason","deleteUser","delete","updateUser","updateUserStatus","getDashboardStats","bulkAssignFarmers","farmerIds","employeeId","assignFarmer","farmerId","farmersAPI","getAllFarmers","getFarmerById","id","createFarmer","farmerData","updateFarmer","deleteFarmer","getFarmerStats","adminAPI","getAllEmployees","getFarmersWithKyc","getEmployeesWithStats","getFarmersByEmployee","getTodoList","getEnhancedTodoList","filterFarmers","getLocations","getAssignmentHistory","getFarmersByAssignmentStatus","assignmentStatus","getAllRegistrations","approveRegistration","registrationId","approvalData","rejectRegistration","rejectionData","employeesAPI","getEmployeeById","createEmployee","employeeData","updateEmployee","deleteEmployee","getAssignedFarmers","getEmployeeStats","employeeAPI","console","log","updateProfile","profileData","getStats","kycAPI","uploadDocuments","documents","formData","FormData","Object","keys","forEach","key","append","approveKYC","rejectKYC","referBackKYC","referBackData","getKYCStatus","getKYCDocuments","ChangeUserId","newUserId","setNewUserId","useState","confirmUserId","setConfirmUserId","setError","navigate","useNavigate","_jsxs","className","children","_jsx","style","textAlign","color","marginBottom","htmlFor","type","value","onChange","e","target","onClick","newUserName","password","alert","message"],"sourceRoot":""}