{"version":3,"file":"static/js/858.1803c886.chunk.js","mappings":"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","sources":["../node_modules/react-hook-form/src/utils/isCheckBoxInput.ts","../node_modules/react-hook-form/src/utils/isDateObject.ts","../node_modules/react-hook-form/src/utils/isNullOrUndefined.ts","../node_modules/react-hook-form/src/utils/isObject.ts","../node_modules/react-hook-form/src/logic/getEventValue.ts","../node_modules/react-hook-form/src/logic/isNameInFieldArray.ts","../node_modules/react-hook-form/src/logic/getNodeParentName.ts","../node_modules/react-hook-form/src/utils/isPlainObject.ts","../node_modules/react-hook-form/src/utils/isWeb.ts","../node_modules/react-hook-form/src/utils/cloneObject.ts","../node_modules/react-hook-form/src/utils/isKey.ts","../node_modules/react-hook-form/src/utils/isUndefined.ts","../node_modules/react-hook-form/src/utils/compact.ts","../node_modules/react-hook-form/src/utils/stringToPath.ts","../node_modules/react-hook-form/src/utils/get.ts","../node_modules/react-hook-form/src/utils/isBoolean.ts","../node_modules/react-hook-form/src/utils/set.ts","../node_modules/react-hook-form/src/constants.ts","../node_modules/react-hook-form/src/useFormContext.tsx","../node_modules/react-hook-form/src/logic/getProxyFormState.ts","../node_modules/react-hook-form/src/useIsomorphicLayoutEffect.ts","../node_modules/react-hook-form/src/utils/isString.ts","../node_modules/react-hook-form/src/logic/generateWatchOutput.ts","../node_modules/react-hook-form/src/utils/isPrimitive.ts","../node_modules/react-hook-form/src/utils/deepEqual.ts","../node_modules/react-hook-form/src/logic/appendErrors.ts","../node_modules/react-hook-form/src/utils/convertToArrayPayload.ts","../node_modules/react-hook-form/src/utils/createSubject.ts","../node_modules/react-hook-form/src/utils/isEmptyObject.ts","../node_modules/react-hook-form/src/utils/isFileInput.ts","../node_modules/react-hook-form/src/utils/isFunction.ts","../node_modules/react-hook-form/src/utils/isHTMLElement.ts","../node_modules/react-hook-form/src/utils/isMultipleSelect.ts","../node_modules/react-hook-form/src/utils/isRadioInput.ts","../node_modules/react-hook-form/src/utils/isRadioOrCheckbox.ts","../node_modules/react-hook-form/src/utils/live.ts","../node_modules/react-hook-form/src/utils/unset.ts","../node_modules/react-hook-form/src/utils/objectHasFunction.ts","../node_modules/react-hook-form/src/logic/getDirtyFields.ts","../node_modules/react-hook-form/src/logic/getCheckboxValue.ts","../node_modules/react-hook-form/src/logic/getFieldValueAs.ts","../node_modules/react-hook-form/src/logic/getRadioValue.ts","../node_modules/react-hook-form/src/logic/getFieldValue.ts","../node_modules/react-hook-form/src/logic/getResolverOptions.ts","../node_modules/react-hook-form/src/utils/isRegex.ts","../node_modules/react-hook-form/src/logic/getRuleValue.ts","../node_modules/react-hook-form/src/logic/getValidationModes.ts","../node_modules/react-hook-form/src/logic/hasPromiseValidation.ts","../node_modules/react-hook-form/src/logic/hasValidation.ts","../node_modules/react-hook-form/src/logic/isWatched.ts","../node_modules/react-hook-form/src/logic/iterateFieldsByAction.ts","../node_modules/react-hook-form/src/logic/schemaErrorLookup.ts","../node_modules/react-hook-form/src/logic/shouldRenderFormState.ts","../node_modules/react-hook-form/src/logic/shouldSubscribeByName.ts","../node_modules/react-hook-form/src/logic/skipValidation.ts","../node_modules/react-hook-form/src/logic/unsetEmptyArray.ts","../node_modules/react-hook-form/src/logic/updateFieldArrayRootError.ts","../node_modules/react-hook-form/src/utils/isMessage.ts","../node_modules/react-hook-form/src/logic/getValidateError.ts","../node_modules/react-hook-form/src/logic/getValueAndMessage.ts","../node_modules/react-hook-form/src/logic/validateField.ts","../node_modules/react-hook-form/src/logic/createFormControl.ts","../node_modules/react-hook-form/src/useForm.ts"],"sourcesContent":["import type { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (value: unknown): value is Date => value instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown): value is object =>\n  typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","import type { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  names.has(getNodeParentName(name));\n","export default (name: string) =>\n  name.substring(0, name.search(/\\.\\d+(\\.|$)/)) || name;\n","import isObject from './isObject';\n\nexport default (tempObject: object) => {\n  const prototypeCopy =\n    tempObject.constructor && tempObject.constructor.prototype;\n\n  return (\n    isObject(prototypeCopy) && prototypeCopy.hasOwnProperty('isPrototypeOf')\n  );\n};\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import isObject from './isObject';\nimport isPlainObject from './isPlainObject';\nimport isWeb from './isWeb';\n\nexport default function cloneObject<T>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n  const isFileListInstance =\n    typeof FileList !== 'undefined' ? data instanceof FileList : false;\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (\n    !(isWeb && (data instanceof Blob || isFileListInstance)) &&\n    (isArray || isObject(data))\n  ) {\n    copy = isArray ? [] : Object.create(Object.getPrototypeOf(data));\n\n    if (!isArray && !isPlainObject(data)) {\n      copy = data;\n    } else {\n      for (const key in data) {\n        if (data.hasOwnProperty(key)) {\n          copy[key] = cloneObject(data[key]);\n        }\n      }\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","export default (value: string) => /^\\w*$/.test(value);\n","export default (val: unknown): val is undefined => val === undefined;\n","export default <TValue>(value: TValue[]) =>\n  Array.isArray(value) ? value.filter(Boolean) : [];\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import isKey from './isKey';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nexport default <T>(\n  object: T,\n  path?: string | null,\n  defaultValue?: unknown,\n): any => {\n  if (!path || !isObject(object)) {\n    return defaultValue;\n  }\n\n  const result = (isKey(path) ? [path] : stringToPath(path)).reduce(\n    (result, key) =>\n      isNullOrUndefined(result) ? result : result[key as keyof {}],\n    object,\n  );\n\n  return isUndefined(result) || result === object\n    ? isUndefined(object[path as keyof T])\n      ? defaultValue\n      : object[path as keyof T]\n    : result;\n};\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import type { FieldPath, FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default (\n  object: FieldValues,\n  path: FieldPath<FieldValues>,\n  value?: unknown,\n) => {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n            ? []\n            : {};\n    }\n\n    if (key === '__proto__' || key === 'constructor' || key === 'prototype') {\n      return;\n    }\n\n    object[key] = newValue;\n    object = object[key];\n  }\n};\n","export const EVENTS = {\n  BLUR: 'blur',\n  FOCUS_OUT: 'focusout',\n  CHANGE: 'change',\n} as const;\n\nexport const VALIDATION_MODE = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n} as const;\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n} as const;\n","import React from 'react';\n\nimport type { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst HookFormContext = React.createContext<UseFormReturn | null>(null);\nHookFormContext.displayName = 'HookFormContext';\n\n/**\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @returns return all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n  TContext = any,\n  TTransformedValues = TFieldValues,\n>(): UseFormReturn<TFieldValues, TContext, TTransformedValues> =>\n  React.useContext(HookFormContext) as UseFormReturn<\n    TFieldValues,\n    TContext,\n    TTransformedValues\n  >;\n\n/**\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @param props - all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nexport const FormProvider = <\n  TFieldValues extends FieldValues,\n  TContext = any,\n  TTransformedValues = TFieldValues,\n>(\n  props: FormProviderProps<TFieldValues, TContext, TTransformedValues>,\n) => {\n  const { children, ...data } = props;\n  return (\n    <HookFormContext.Provider value={data as unknown as UseFormReturn}>\n      {children}\n    </HookFormContext.Provider>\n  );\n};\n","import { VALIDATION_MODE } from '../constants';\nimport type { Control, FieldValues, FormState, ReadFormState } from '../types';\n\nexport default <\n  TFieldValues extends FieldValues,\n  TContext = any,\n  TTransformedValues = TFieldValues,\n>(\n  formState: FormState<TFieldValues>,\n  control: Control<TFieldValues, TContext, TTransformedValues>,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  const result = {\n    defaultValues: control._defaultValues,\n  } as typeof formState;\n\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: () => {\n        const _key = key as keyof FormState<TFieldValues> & keyof ReadFormState;\n\n        if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {\n          control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\n        }\n\n        localProxyFormState && (localProxyFormState[_key] = true);\n        return formState[_key];\n      },\n    });\n  }\n\n  return result;\n};\n","import React from 'react';\n\nexport const useIsomorphicLayoutEffect =\n  typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;\n","export default (value: unknown): value is string => typeof value === 'string';\n","import type { DeepPartial, FieldValues, Names } from '../types';\nimport get from '../utils/get';\nimport isString from '../utils/isString';\n\nexport default <T>(\n  names: string | string[] | undefined,\n  _names: Names,\n  formValues?: FieldValues,\n  isGlobal?: boolean,\n  defaultValue?: DeepPartial<T> | unknown,\n) => {\n  if (isString(names)) {\n    isGlobal && _names.watch.add(names);\n    return get(formValues, names, defaultValue);\n  }\n\n  if (Array.isArray(names)) {\n    return names.map(\n      (fieldName) => (\n        isGlobal && _names.watch.add(fieldName),\n        get(formValues, fieldName)\n      ),\n    );\n  }\n\n  isGlobal && (_names.watchAll = true);\n\n  return formValues;\n};\n","import type { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(\n  object1: any,\n  object2: any,\n  _internal_visited = new WeakSet(),\n) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  if (_internal_visited.has(object1) || _internal_visited.has(object2)) {\n    return true;\n  }\n  _internal_visited.add(object1);\n  _internal_visited.add(object2);\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isDateObject(val1) && isDateObject(val2)) ||\n        (isObject(val1) && isObject(val2)) ||\n        (Array.isArray(val1) && Array.isArray(val2))\n          ? !deepEqual(val1, val2, _internal_visited)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import type {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default <T>(value: T) => (Array.isArray(value) ? value : [value]);\n","import type { Noop } from '../types';\n\nexport type Observer<T> = {\n  next: (value: T) => void;\n};\n\nexport type Subscription = {\n  unsubscribe: Noop;\n};\n\nexport type Subject<T> = {\n  readonly observers: Observer<T>[];\n  subscribe: (value: Observer<T>) => Subscription;\n  unsubscribe: Noop;\n} & Observer<T>;\n\nexport default <T>(): Subject<T> => {\n  let _observers: Observer<T>[] = [];\n\n  const next = (value: T) => {\n    for (const observer of _observers) {\n      observer.next && observer.next(value);\n    }\n  };\n\n  const subscribe = (observer: Observer<T>): Subscription => {\n    _observers.push(observer);\n    return {\n      unsubscribe: () => {\n        _observers = _observers.filter((o) => o !== observer);\n      },\n    };\n  };\n\n  const unsubscribe = () => {\n    _observers = [];\n  };\n\n  return {\n    get observers() {\n      return _observers;\n    },\n    next,\n    subscribe,\n    unsubscribe,\n  };\n};\n","import type { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import type { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import isWeb from './isWeb';\n\nexport default (value: unknown): value is HTMLElement => {\n  if (!isWeb) {\n    return false;\n  }\n\n  const owner = value ? ((value as HTMLElement).ownerDocument as Document) : 0;\n  return (\n    value instanceof\n    (owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement)\n  );\n};\n","import type { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import type { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import type { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import type { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => isHTMLElement(ref) && ref.isConnected;\n","import isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nfunction isEmptyArray(obj: unknown[]) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key) && !isUndefined(obj[key])) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport default function unset(object: any, path: string | (string | number)[]) {\n  const paths = Array.isArray(path)\n    ? path\n    : isKey(path)\n      ? [path]\n      : stringToPath(path);\n\n  const childObject = paths.length === 1 ? object : baseGet(object, paths);\n\n  const index = paths.length - 1;\n  const key = paths[index];\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  if (\n    index !== 0 &&\n    ((isObject(childObject) && isEmptyObject(childObject)) ||\n      (Array.isArray(childObject) && isEmptyArray(childObject)))\n  ) {\n    unset(object, paths.slice(0, -1));\n  }\n\n  return object;\n}\n","import isFunction from './isFunction';\n\nexport default <T>(data: T): boolean => {\n  for (const key in data) {\n    if (isFunction(data[key])) {\n      return true;\n    }\n  }\n  return false;\n};\n","import deepEqual from '../utils/deepEqual';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\nimport isUndefined from '../utils/isUndefined';\nimport objectHasFunction from '../utils/objectHasFunction';\n\nfunction markFieldsDirty<T>(data: T, fields: Record<string, any> = {}) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        fields[key] = Array.isArray(data[key]) ? [] : {};\n        markFieldsDirty(data[key], fields[key]);\n      } else if (!isNullOrUndefined(data[key])) {\n        fields[key] = true;\n      }\n    }\n  }\n\n  return fields;\n}\n\nfunction getDirtyFieldsFromDefaultValues<T>(\n  data: T,\n  formValues: T,\n  dirtyFieldsFromValues: Record<\n    Extract<keyof T, string>,\n    ReturnType<typeof markFieldsDirty> | boolean\n  >,\n) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        if (\n          isUndefined(formValues) ||\n          isPrimitive(dirtyFieldsFromValues[key])\n        ) {\n          dirtyFieldsFromValues[key] = Array.isArray(data[key])\n            ? markFieldsDirty(data[key], [])\n            : { ...markFieldsDirty(data[key]) };\n        } else {\n          getDirtyFieldsFromDefaultValues(\n            data[key],\n            isNullOrUndefined(formValues) ? {} : formValues[key],\n            dirtyFieldsFromValues[key],\n          );\n        }\n      } else {\n        dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n      }\n    }\n  }\n\n  return dirtyFieldsFromValues;\n}\n\nexport default <T>(defaultValues: T, formValues: T) =>\n  getDirtyFieldsFromDefaultValues(\n    defaultValues,\n    formValues,\n    markFieldsDirty(formValues),\n  );\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import type { Field, NativeFieldValue } from '../types';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <T extends NativeFieldValue>(\n  value: T,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n      ? value === ''\n        ? NaN\n        : value\n          ? +value\n          : value\n      : valueAsDate && isString(value)\n        ? new Date(value)\n        : setValueAs\n          ? setValueAs(value)\n          : value;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import type { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(({ value }) => value);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n","import type {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  FieldValues,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fields: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field: Field = get(_fields, name);\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import type {\n  ValidationRule,\n  ValidationValue,\n  ValidationValueMessage,\n} from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <T extends ValidationValue>(\n  rule?: ValidationRule<T> | ValidationValueMessage<T>,\n) =>\n  isUndefined(rule)\n    ? rule\n    : isRegex(rule)\n      ? rule.source\n      : isObject(rule)\n        ? isRegex(rule.value)\n          ? rule.value.source\n          : rule.value\n        : rule;\n","import { VALIDATION_MODE } from '../constants';\nimport type { Mode, ValidationModeFlags } from '../types';\n\nexport default (mode?: Mode): ValidationModeFlags => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import type { Field, Validate } from '../types';\nimport isFunction from '../utils/isFunction';\nimport isObject from '../utils/isObject';\n\nconst ASYNC_FUNCTION = 'AsyncFunction';\n\nexport default (fieldReference: Field['_f']) =>\n  !!fieldReference &&\n  !!fieldReference.validate &&\n  !!(\n    (isFunction(fieldReference.validate) &&\n      fieldReference.validate.constructor.name === ASYNC_FUNCTION) ||\n    (isObject(fieldReference.validate) &&\n      Object.values(fieldReference.validate).find(\n        (validateFunction: Validate<unknown, unknown>) =>\n          validateFunction.constructor.name === ASYNC_FUNCTION,\n      ))\n  );\n","import type { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","import type { InternalFieldName, Names } from '../types';\n\nexport default (\n  name: InternalFieldName,\n  _names: Names,\n  isBlurEvent?: boolean,\n) =>\n  !isBlurEvent &&\n  (_names.watchAll ||\n    _names.watch.has(name) ||\n    [..._names.watch].some(\n      (watchName) =>\n        name.startsWith(watchName) &&\n        /^\\.\\w+/.test(name.slice(watchName.length)),\n    ));\n","import type { FieldRefs, InternalFieldName, Ref } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\n\nconst iterateFieldsByAction = (\n  fields: FieldRefs,\n  action: (ref: Ref, name: string) => 1 | undefined | void,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[] | 0,\n  abortEarly?: boolean,\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const { _f, ...currentField } = field;\n\n      if (_f) {\n        if (_f.refs && _f.refs[0] && action(_f.refs[0], key) && !abortEarly) {\n          return true;\n        } else if (_f.ref && action(_f.ref, _f.name) && !abortEarly) {\n          return true;\n        } else {\n          if (iterateFieldsByAction(currentField, action)) {\n            break;\n          }\n        }\n      } else if (isObject(currentField)) {\n        if (iterateFieldsByAction(currentField as FieldRefs, action)) {\n          break;\n        }\n      }\n    }\n  }\n  return;\n};\nexport default iterateFieldsByAction;\n","import type { FieldError, FieldErrors, FieldValues } from '../types';\nimport get from '../utils/get';\nimport isKey from '../utils/isKey';\n\nexport default function schemaErrorLookup<T extends FieldValues = FieldValues>(\n  errors: FieldErrors<T>,\n  _fields: FieldValues,\n  name: string,\n): {\n  error?: FieldError;\n  name: string;\n} {\n  const error = get(errors, name);\n\n  if (error || isKey(name)) {\n    return {\n      error,\n      name,\n    };\n  }\n\n  const names = name.split('.');\n\n  while (names.length) {\n    const fieldName = names.join('.');\n    const field = get(_fields, fieldName);\n    const foundError = get(errors, fieldName);\n\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return { name };\n    }\n\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError,\n      };\n    }\n\n    if (foundError && foundError.root && foundError.root.type) {\n      return {\n        name: `${fieldName}.root`,\n        error: foundError.root,\n      };\n    }\n\n    names.pop();\n  }\n\n  return {\n    name,\n  };\n}\n","import { VALIDATION_MODE } from '../constants';\nimport type {\n  FieldValues,\n  FormState,\n  InternalFieldName,\n  ReadFormState,\n} from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\n\nexport default <T extends FieldValues, K extends ReadFormState>(\n  formStateData: Partial<FormState<T>> & {\n    name?: InternalFieldName;\n    values?: T;\n  },\n  _proxyFormState: K,\n  updateFormState: (formState: Partial<FormState<T>>) => void,\n  isRoot?: boolean,\n) => {\n  updateFormState(formStateData);\n  const { name, ...formState } = formStateData;\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","import convertToArrayPayload from '../utils/convertToArrayPayload';\n\nexport default <T extends string | readonly string[] | undefined>(\n  name?: T,\n  signalName?: string,\n  exact?: boolean,\n) =>\n  !name ||\n  !signalName ||\n  name === signalName ||\n  convertToArrayPayload(name).some(\n    (currentName) =>\n      currentName &&\n      (exact\n        ? currentName === signalName\n        : currentName.startsWith(signalName) ||\n          signalName.startsWith(currentName)),\n  );\n","import type { ValidationModeFlags } from '../types';\n\nexport default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<ValidationModeFlags>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name)).length && unset(ref, name);\n","import type {\n  FieldError,\n  FieldErrors,\n  FieldValues,\n  InternalFieldName,\n} from '../types';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport get from '../utils/get';\nimport set from '../utils/set';\n\nexport default <T extends FieldValues = FieldValues>(\n  errors: FieldErrors<T>,\n  error: Partial<Record<string, FieldError>>,\n  name: InternalFieldName,\n): FieldErrors<T> => {\n  const fieldArrayErrors = convertToArrayPayload(get(errors, name));\n  set(fieldArrayErrors, 'root', error[name]);\n  set(errors, name, fieldArrayErrors);\n  return errors;\n};\n","import type { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message => isString(value);\n","import type { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import type { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport type {\n  Field,\n  FieldError,\n  FieldValues,\n  InternalFieldErrors,\n  InternalNameSet,\n  MaxType,\n  Message,\n  MinType,\n  NativeFieldValue,\n} from '../types';\nimport get from '../utils/get';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async <T extends FieldValues>(\n  field: Field,\n  disabledFieldNames: InternalNameSet,\n  formValues: T,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n  isFieldArray?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n  } = field._f;\n  const inputValue: NativeFieldValue = get(formValues, name);\n  if (!mount || disabledFieldNames.has(name)) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidity = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || '');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) &&\n      isUndefined(ref.value) &&\n      isUndefined(inputValue)) ||\n    (isHTMLElement(ref) && ref.value === '') ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType: MaxType = INPUT_VALIDATION_RULES.maxLength,\n    minType: MinType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    isFieldArray\n      ? !Array.isArray(inputValue) || !inputValue.length\n      : required &&\n        ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n          (isBoolean(inputValue) && !inputValue) ||\n          (isCheckBox && !getCheckboxValue(refs).isValid) ||\n          (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNullOrUndefined(inputValue) && !isNaN(inputValue as number)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber ||\n        (inputValue ? +inputValue : inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue as string);\n      const convertTimeToDate = (time: unknown) =>\n        new Date(new Date().toDateString() + ' ' + time);\n      const isTime = ref.type == 'time';\n      const isWeek = ref.type == 'week';\n\n      if (isString(maxOutput.value) && inputValue) {\n        exceedMax = isTime\n          ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value)\n          : isWeek\n            ? inputValue > maxOutput.value\n            : valueDate > new Date(maxOutput.value);\n      }\n\n      if (isString(minOutput.value) && inputValue) {\n        exceedMin = isTime\n          ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value)\n          : isWeek\n            ? inputValue < minOutput.value\n            : valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (\n    (maxLength || minLength) &&\n    !isEmpty &&\n    (isString(inputValue) || (isFieldArray && Array.isArray(inputValue)))\n  ) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > +maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < +minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue, formValues);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidity(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue, formValues),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidity(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidity(true);\n  return error;\n};\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport type {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  Control,\n  DeepPartial,\n  DelayCallback,\n  EventType,\n  Field,\n  FieldError,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  FromSubscribe,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  ReadFormState,\n  Ref,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UseFormClearErrors,\n  UseFormGetFieldState,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormReset,\n  UseFormResetField,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormSubscribe,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport createSubject from '../utils/createSubject';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioOrCheckbox from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport set from '../utils/set';\nimport unset from '../utils/unset';\n\nimport generateWatchOutput from './generateWatchOutput';\nimport getDirtyFields from './getDirtyFields';\nimport getEventValue from './getEventValue';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getResolverOptions from './getResolverOptions';\nimport getRuleValue from './getRuleValue';\nimport getValidationModes from './getValidationModes';\nimport hasPromiseValidation from './hasPromiseValidation';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport isWatched from './isWatched';\nimport iterateFieldsByAction from './iterateFieldsByAction';\nimport schemaErrorLookup from './schemaErrorLookup';\nimport shouldRenderFormState from './shouldRenderFormState';\nimport shouldSubscribeByName from './shouldSubscribeByName';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport updateFieldArrayRootError from './updateFieldArrayRootError';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext = any,\n  TTransformedValues = TFieldValues,\n>(\n  props: UseFormProps<TFieldValues, TContext, TTransformedValues> = {},\n): Omit<\n  UseFormReturn<TFieldValues, TContext, TTransformedValues>,\n  'formState'\n> & {\n  formControl: Omit<\n    UseFormReturn<TFieldValues, TContext, TTransformedValues>,\n    'formState'\n  >;\n} {\n  let _options = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _formState: FormState<TFieldValues> = {\n    submitCount: 0,\n    isDirty: false,\n    isReady: false,\n    isLoading: isFunction(_options.defaultValues),\n    isValidating: false,\n    isSubmitted: false,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    touchedFields: {},\n    dirtyFields: {},\n    validatingFields: {},\n    errors: _options.errors || {},\n    disabled: _options.disabled || false,\n  };\n  let _fields: FieldRefs = {};\n  let _defaultValues =\n    isObject(_options.defaultValues) || isObject(_options.values)\n      ? cloneObject(_options.defaultValues || _options.values) || {}\n      : {};\n  let _formValues = _options.shouldUnregister\n    ? ({} as TFieldValues)\n    : (cloneObject(_defaultValues) as TFieldValues);\n  let _state = {\n    action: false,\n    mount: false,\n    watch: false,\n  };\n  let _names: Names = {\n    mount: new Set(),\n    disabled: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  };\n  let delayErrorCallback: DelayCallback | null;\n  let timer = 0;\n  const _proxyFormState: ReadFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    validatingFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  let _proxySubscribeFormState = {\n    ..._proxyFormState,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    array: createSubject(),\n    state: createSubject(),\n  };\n\n  const shouldDisplayAllAssociatedErrors =\n    _options.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T) =>\n    (wait: number) => {\n      clearTimeout(timer);\n      timer = setTimeout(callback, wait);\n    };\n\n  const _setValid = async (shouldUpdateValid?: boolean) => {\n    if (\n      !_options.disabled &&\n      (_proxyFormState.isValid ||\n        _proxySubscribeFormState.isValid ||\n        shouldUpdateValid)\n    ) {\n      const isValid = _options.resolver\n        ? isEmptyObject((await _runSchema()).errors)\n        : await executeBuiltInValidation(_fields, true);\n\n      if (isValid !== _formState.isValid) {\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n  };\n\n  const _updateIsValidating = (names?: string[], isValidating?: boolean) => {\n    if (\n      !_options.disabled &&\n      (_proxyFormState.isValidating ||\n        _proxyFormState.validatingFields ||\n        _proxySubscribeFormState.isValidating ||\n        _proxySubscribeFormState.validatingFields)\n    ) {\n      (names || Array.from(_names.mount)).forEach((name) => {\n        if (name) {\n          isValidating\n            ? set(_formState.validatingFields, name, isValidating)\n            : unset(_formState.validatingFields, name);\n        }\n      });\n\n      _subjects.state.next({\n        validatingFields: _formState.validatingFields,\n        isValidating: !isEmptyObject(_formState.validatingFields),\n      });\n    }\n  };\n\n  const _setFieldArray: BatchFieldArrayUpdate = (\n    name,\n    values = [],\n    method,\n    args,\n    shouldSetValues = true,\n    shouldUpdateFieldsAndState = true,\n  ) => {\n    if (args && method && !_options.disabled) {\n      _state.action = true;\n      if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\n        const fieldValues = method(get(_fields, name), args.argA, args.argB);\n        shouldSetValues && set(_fields, name, fieldValues);\n      }\n\n      if (\n        shouldUpdateFieldsAndState &&\n        Array.isArray(get(_formState.errors, name))\n      ) {\n        const errors = method(\n          get(_formState.errors, name),\n          args.argA,\n          args.argB,\n        );\n        shouldSetValues && set(_formState.errors, name, errors);\n        unsetEmptyArray(_formState.errors, name);\n      }\n\n      if (\n        (_proxyFormState.touchedFields ||\n          _proxySubscribeFormState.touchedFields) &&\n        shouldUpdateFieldsAndState &&\n        Array.isArray(get(_formState.touchedFields, name))\n      ) {\n        const touchedFields = method(\n          get(_formState.touchedFields, name),\n          args.argA,\n          args.argB,\n        );\n        shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n      }\n\n      if (_proxyFormState.dirtyFields || _proxySubscribeFormState.dirtyFields) {\n        _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n      }\n\n      _subjects.state.next({\n        name,\n        isDirty: _getDirty(name, values),\n        dirtyFields: _formState.dirtyFields,\n        errors: _formState.errors,\n        isValid: _formState.isValid,\n      });\n    } else {\n      set(_formValues, name, values);\n    }\n  };\n\n  const updateErrors = (name: InternalFieldName, error: FieldError) => {\n    set(_formState.errors, name, error);\n    _subjects.state.next({\n      errors: _formState.errors,\n    });\n  };\n\n  const _setErrors = (errors: FieldErrors<TFieldValues>) => {\n    _formState.errors = errors;\n    _subjects.state.next({\n      errors: _formState.errors,\n      isValid: false,\n    });\n  };\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    shouldSkipSetValueAs: boolean,\n    value?: unknown,\n    ref?: Ref,\n  ) => {\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      const defaultValue = get(\n        _formValues,\n        name,\n        isUndefined(value) ? get(_defaultValues, name) : value,\n      );\n\n      isUndefined(defaultValue) ||\n      (ref && (ref as HTMLInputElement).defaultChecked) ||\n      shouldSkipSetValueAs\n        ? set(\n            _formValues,\n            name,\n            shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f),\n          )\n        : setFieldValue(name, defaultValue);\n\n      _state.mount && _setValid();\n    }\n  };\n\n  const updateTouchAndDirty = (\n    name: InternalFieldName,\n    fieldValue: unknown,\n    isBlurEvent?: boolean,\n    shouldDirty?: boolean,\n    shouldRender?: boolean,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    let shouldUpdateField = false;\n    let isPreviousDirty = false;\n    const output: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n\n    if (!_options.disabled) {\n      if (!isBlurEvent || shouldDirty) {\n        if (_proxyFormState.isDirty || _proxySubscribeFormState.isDirty) {\n          isPreviousDirty = _formState.isDirty;\n          _formState.isDirty = output.isDirty = _getDirty();\n          shouldUpdateField = isPreviousDirty !== output.isDirty;\n        }\n\n        const isCurrentFieldPristine = deepEqual(\n          get(_defaultValues, name),\n          fieldValue,\n        );\n\n        isPreviousDirty = !!get(_formState.dirtyFields, name);\n        isCurrentFieldPristine\n          ? unset(_formState.dirtyFields, name)\n          : set(_formState.dirtyFields, name, true);\n        output.dirtyFields = _formState.dirtyFields;\n        shouldUpdateField =\n          shouldUpdateField ||\n          ((_proxyFormState.dirtyFields ||\n            _proxySubscribeFormState.dirtyFields) &&\n            isPreviousDirty !== !isCurrentFieldPristine);\n      }\n\n      if (isBlurEvent) {\n        const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n        if (!isPreviousFieldTouched) {\n          set(_formState.touchedFields, name, isBlurEvent);\n          output.touchedFields = _formState.touchedFields;\n          shouldUpdateField =\n            shouldUpdateField ||\n            ((_proxyFormState.touchedFields ||\n              _proxySubscribeFormState.touchedFields) &&\n              isPreviousFieldTouched !== isBlurEvent);\n        }\n      }\n\n      shouldUpdateField && shouldRender && _subjects.state.next(output);\n    }\n\n    return shouldUpdateField ? output : {};\n  };\n\n  const shouldRenderByError = (\n    name: InternalFieldName,\n    isValid?: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ) => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      (_proxyFormState.isValid || _proxySubscribeFormState.isValid) &&\n      isBoolean(isValid) &&\n      _formState.isValid !== isValid;\n\n    if (_options.delayError && error) {\n      delayErrorCallback = debounce(() => updateErrors(name, error));\n      delayErrorCallback(_options.delayError);\n    } else {\n      clearTimeout(timer);\n      delayErrorCallback = null;\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      (error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n      !isEmptyObject(fieldState) ||\n      shouldUpdateValid\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid && isBoolean(isValid) ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n  };\n\n  const _runSchema = async (name?: InternalFieldName[]) => {\n    _updateIsValidating(name, true);\n    const result = await _options.resolver!(\n      _formValues as TFieldValues,\n      _options.context,\n      getResolverOptions(\n        name || _names.mount,\n        _fields,\n        _options.criteriaMode,\n        _options.shouldUseNativeValidation,\n      ),\n    );\n    _updateIsValidating(name);\n    return result;\n  };\n\n  const executeSchemaAndUpdateState = async (names?: InternalFieldName[]) => {\n    const { errors } = await _runSchema(names);\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors;\n    }\n\n    return errors;\n  };\n\n  const executeBuiltInValidation = async (\n    fields: FieldRefs,\n    shouldOnlyCheckValid?: boolean,\n    context: {\n      valid: boolean;\n    } = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fields) {\n      const field = fields[name];\n\n      if (field) {\n        const { _f, ...fieldValue } = field as Field;\n\n        if (_f) {\n          const isFieldArrayRoot = _names.array.has(_f.name);\n          const isPromiseFunction =\n            field._f && hasPromiseValidation((field as Field)._f);\n\n          if (isPromiseFunction && _proxyFormState.validatingFields) {\n            _updateIsValidating([name], true);\n          }\n\n          const fieldError = await validateField(\n            field as Field,\n            _names.disabled,\n            _formValues,\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation && !shouldOnlyCheckValid,\n            isFieldArrayRoot,\n          );\n\n          if (isPromiseFunction && _proxyFormState.validatingFields) {\n            _updateIsValidating([name]);\n          }\n\n          if (fieldError[_f.name]) {\n            context.valid = false;\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n\n          !shouldOnlyCheckValid &&\n            (get(fieldError, _f.name)\n              ? isFieldArrayRoot\n                ? updateFieldArrayRootError(\n                    _formState.errors,\n                    fieldError,\n                    _f.name,\n                  )\n                : set(_formState.errors, _f.name, fieldError[_f.name])\n              : unset(_formState.errors, _f.name));\n        }\n\n        !isEmptyObject(fieldValue) &&\n          (await executeBuiltInValidation(\n            fieldValue,\n            shouldOnlyCheckValid,\n            context,\n          ));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field: Field = get(_fields, name);\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every((ref) => !live(ref))\n          : !live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  const _getDirty: GetIsDirty = (name, data) =>\n    !_options.disabled &&\n    (name && data && set(_formValues, name, data),\n    !deepEqual(getValues(), _defaultValues));\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    names,\n    defaultValue,\n    isGlobal,\n  ) =>\n    generateWatchOutput(\n      names,\n      _names,\n      {\n        ...(_state.mount\n          ? _formValues\n          : isUndefined(defaultValue)\n            ? _defaultValues\n            : isString(names)\n              ? { [names]: defaultValue }\n              : defaultValue),\n      },\n      isGlobal,\n      defaultValue,\n    );\n\n  const _getFieldArray = <TFieldArrayValues>(\n    name: InternalFieldName,\n  ): Partial<TFieldArrayValues>[] =>\n    compact(\n      get(\n        _state.mount ? _formValues : _defaultValues,\n        name,\n        _options.shouldUnregister ? get(_defaultValues, name, []) : [],\n      ),\n    );\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n  ) => {\n    const field: Field = get(_fields, name);\n    let fieldValue: unknown = value;\n\n    if (field) {\n      const fieldReference = field._f;\n\n      if (fieldReference) {\n        !fieldReference.disabled &&\n          set(_formValues, name, getFieldValueAs(value, fieldReference));\n\n        fieldValue =\n          isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(\n            (optionRef) =>\n              (optionRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(optionRef.value)),\n          );\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.forEach((checkboxRef) => {\n              if (!checkboxRef.defaultChecked || !checkboxRef.disabled) {\n                if (Array.isArray(fieldValue)) {\n                  checkboxRef.checked = !!fieldValue.find(\n                    (data: string) => data === checkboxRef.value,\n                  );\n                } else {\n                  checkboxRef.checked =\n                    fieldValue === checkboxRef.value || !!fieldValue;\n                }\n              }\n            });\n          } else {\n            fieldReference.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else if (isFileInput(fieldReference.ref)) {\n          fieldReference.ref.value = '';\n        } else {\n          fieldReference.ref.value = fieldValue;\n\n          if (!fieldReference.ref.type) {\n            _subjects.state.next({\n              name,\n              values: cloneObject(_formValues),\n            });\n          }\n        }\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) &&\n      updateTouchAndDirty(\n        name,\n        fieldValue,\n        options.shouldTouch,\n        options.shouldDirty,\n        true,\n      );\n\n    options.shouldValidate && trigger(name as Path<TFieldValues>);\n  };\n\n  const setValues = <\n    T extends InternalFieldName,\n    K extends SetFieldValue<TFieldValues>,\n    U extends SetValueConfig,\n  >(\n    name: T,\n    value: K,\n    options: U,\n  ) => {\n    for (const fieldKey in value) {\n      if (!value.hasOwnProperty(fieldKey)) {\n        return;\n      }\n      const fieldValue = value[fieldKey];\n      const fieldName = name + '.' + fieldKey;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        isObject(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(fieldName, fieldValue, options)\n        : setFieldValue(fieldName, fieldValue, options);\n    }\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n    const cloneValue = cloneObject(value);\n\n    set(_formValues, name, cloneValue);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: cloneObject(_formValues),\n      });\n\n      if (\n        (_proxyFormState.isDirty ||\n          _proxyFormState.dirtyFields ||\n          _proxySubscribeFormState.isDirty ||\n          _proxySubscribeFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        _subjects.state.next({\n          name,\n          dirtyFields: getDirtyFields(_defaultValues, _formValues),\n          isDirty: _getDirty(name, cloneValue),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(cloneValue)\n        ? setValues(name, cloneValue, options)\n        : setFieldValue(name, cloneValue, options);\n    }\n\n    isWatched(name, _names) && _subjects.state.next({ ..._formState, name });\n    _subjects.state.next({\n      name: _state.mount ? name : undefined,\n      values: cloneObject(_formValues),\n    });\n  };\n\n  const onChange: ChangeHandler = async (event) => {\n    _state.mount = true;\n    const target = event.target;\n    let name: string = target.name;\n    let isFieldValueUpdated = true;\n    const field: Field = get(_fields, name);\n    const _updateIsFieldValueUpdated = (fieldValue: unknown) => {\n      isFieldValueUpdated =\n        Number.isNaN(fieldValue) ||\n        (isDateObject(fieldValue) && isNaN(fieldValue.getTime())) ||\n        deepEqual(fieldValue, get(_formValues, name, fieldValue));\n    };\n    const validationModeBeforeSubmit = getValidationModes(_options.mode);\n    const validationModeAfterSubmit = getValidationModes(\n      _options.reValidateMode,\n    );\n\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = target.type\n        ? getFieldValue(field._f)\n        : getEventValue(event);\n      const isBlurEvent =\n        event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !_options.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          validationModeAfterSubmit,\n          validationModeBeforeSubmit,\n        );\n      const watched = isWatched(name, _names, isBlurEvent);\n\n      set(_formValues, name, fieldValue);\n\n      if (isBlurEvent) {\n        if (!target || !target.readOnly) {\n          field._f.onBlur && field._f.onBlur(event);\n          delayErrorCallback && delayErrorCallback(0);\n        }\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent);\n\n      const shouldRender = !isEmptyObject(fieldState) || watched;\n\n      !isBlurEvent &&\n        _subjects.state.next({\n          name,\n          type: event.type,\n          values: cloneObject(_formValues),\n        });\n\n      if (shouldSkipValidation) {\n        if (_proxyFormState.isValid || _proxySubscribeFormState.isValid) {\n          if (_options.mode === 'onBlur') {\n            if (isBlurEvent) {\n              _setValid();\n            }\n          } else if (!isBlurEvent) {\n            _setValid();\n          }\n        }\n\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(watched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && watched && _subjects.state.next({ ..._formState });\n\n      if (_options.resolver) {\n        const { errors } = await _runSchema([name]);\n\n        _updateIsFieldValueUpdated(fieldValue);\n\n        if (isFieldValueUpdated) {\n          const previousErrorLookupResult = schemaErrorLookup(\n            _formState.errors,\n            _fields,\n            name,\n          );\n          const errorLookupResult = schemaErrorLookup(\n            errors,\n            _fields,\n            previousErrorLookupResult.name || name,\n          );\n\n          error = errorLookupResult.error;\n          name = errorLookupResult.name;\n\n          isValid = isEmptyObject(errors);\n        }\n      } else {\n        _updateIsValidating([name], true);\n        error = (\n          await validateField(\n            field,\n            _names.disabled,\n            _formValues,\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          )\n        )[name];\n        _updateIsValidating([name]);\n\n        _updateIsFieldValueUpdated(fieldValue);\n\n        if (isFieldValueUpdated) {\n          if (error) {\n            isValid = false;\n          } else if (\n            _proxyFormState.isValid ||\n            _proxySubscribeFormState.isValid\n          ) {\n            isValid = await executeBuiltInValidation(_fields, true);\n          }\n        }\n      }\n\n      if (isFieldValueUpdated) {\n        field._f.deps &&\n          trigger(\n            field._f.deps as\n              | FieldPath<TFieldValues>\n              | FieldPath<TFieldValues>[],\n          );\n        shouldRenderByError(name, isValid, error, fieldState);\n      }\n    }\n  };\n\n  const _focusInput = (ref: Ref, key: string) => {\n    if (get(_formState.errors, key) && ref.focus) {\n      ref.focus();\n      return 1;\n    }\n    return;\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n\n    if (_options.resolver) {\n      const errors = await executeSchemaAndUpdateState(\n        isUndefined(name) ? name : fieldNames,\n      );\n\n      isValid = isEmptyObject(errors);\n      validationResult = name\n        ? !fieldNames.some((name) => get(errors, name))\n        : isValid;\n    } else if (name) {\n      validationResult = (\n        await Promise.all(\n          fieldNames.map(async (fieldName) => {\n            const field = get(_fields, fieldName);\n            return await executeBuiltInValidation(\n              field && field._f ? { [fieldName]: field } : field,\n            );\n          }),\n        )\n      ).every(Boolean);\n      !(!validationResult && !_formState.isValid) && _setValid();\n    } else {\n      validationResult = isValid = await executeBuiltInValidation(_fields);\n    }\n\n    _subjects.state.next({\n      ...(!isString(name) ||\n      ((_proxyFormState.isValid || _proxySubscribeFormState.isValid) &&\n        isValid !== _formState.isValid)\n        ? {}\n        : { name }),\n      ...(_options.resolver || !name ? { isValid } : {}),\n      errors: _formState.errors,\n    });\n\n    options.shouldFocus &&\n      !validationResult &&\n      iterateFieldsByAction(\n        _fields,\n        _focusInput,\n        name ? fieldNames : _names.mount,\n      );\n\n    return validationResult;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ...(_state.mount ? _formValues : _defaultValues),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n        ? get(values, fieldNames)\n        : fieldNames.map((name) => get(values, name));\n  };\n\n  const getFieldState: UseFormGetFieldState<TFieldValues> = (\n    name,\n    formState,\n  ) => ({\n    invalid: !!get((formState || _formState).errors, name),\n    isDirty: !!get((formState || _formState).dirtyFields, name),\n    error: get((formState || _formState).errors, name),\n    isValidating: !!get(_formState.validatingFields, name),\n    isTouched: !!get((formState || _formState).touchedFields, name),\n  });\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name &&\n      convertToArrayPayload(name).forEach((inputName) =>\n        unset(_formState.errors, inputName),\n      );\n\n    _subjects.state.next({\n      errors: name ? _formState.errors : {},\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = (get(_fields, name, { _f: {} })._f || {}).ref;\n    const currentError = get(_formState.errors, name) || {};\n\n    // Don't override existing error messages elsewhere in the object tree.\n    const { ref: currentRef, message, type, ...restOfErrorTree } = currentError;\n\n    set(_formState.errors, name, {\n      ...restOfErrorTree,\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    name?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: DeepPartial<TFieldValues>,\n  ) =>\n    isFunction(name)\n      ? _subjects.state.subscribe({\n          next: (payload) =>\n            'values' in payload &&\n            name(\n              _getWatch(undefined, defaultValue),\n              payload as {\n                name?: FieldPath<TFieldValues>;\n                type?: EventType;\n                value?: unknown;\n              },\n            ),\n        })\n      : _getWatch(\n          name as InternalFieldName | InternalFieldName[],\n          defaultValue,\n          true,\n        );\n\n  const _subscribe: FromSubscribe<TFieldValues> = (props) =>\n    _subjects.state.subscribe({\n      next: (\n        formState: Partial<FormState<TFieldValues>> & {\n          name?: InternalFieldName;\n          values?: TFieldValues | undefined;\n          type?: EventType;\n        },\n      ) => {\n        if (\n          shouldSubscribeByName(props.name, formState.name, props.exact) &&\n          shouldRenderFormState(\n            formState,\n            (props.formState as ReadFormState) || _proxyFormState,\n            _setFormState,\n            props.reRenderRoot,\n          )\n        ) {\n          props.callback({\n            values: { ..._formValues } as TFieldValues,\n            ..._formState,\n            ...formState,\n            defaultValues:\n              _defaultValues as FormState<TFieldValues>['defaultValues'],\n          });\n        }\n      },\n    }).unsubscribe;\n\n  const subscribe: UseFormSubscribe<TFieldValues> = (props) => {\n    _state.mount = true;\n    _proxySubscribeFormState = {\n      ..._proxySubscribeFormState,\n      ...props.formState,\n    };\n    return _subscribe({\n      ...props,\n      formState: _proxySubscribeFormState,\n    });\n  };\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n      _names.array.delete(fieldName);\n\n      if (!options.keepValue) {\n        unset(_fields, fieldName);\n        unset(_formValues, fieldName);\n      }\n\n      !options.keepError && unset(_formState.errors, fieldName);\n      !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n      !options.keepTouched && unset(_formState.touchedFields, fieldName);\n      !options.keepIsValidating &&\n        unset(_formState.validatingFields, fieldName);\n      !_options.shouldUnregister &&\n        !options.keepDefaultValue &&\n        unset(_defaultValues, fieldName);\n    }\n\n    _subjects.state.next({\n      values: cloneObject(_formValues),\n    });\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n    });\n\n    !options.keepIsValid && _setValid();\n  };\n\n  const _setDisabledField: Control<TFieldValues>['_setDisabledField'] = ({\n    disabled,\n    name,\n  }) => {\n    if (\n      (isBoolean(disabled) && _state.mount) ||\n      !!disabled ||\n      _names.disabled.has(name)\n    ) {\n      disabled ? _names.disabled.add(name) : _names.disabled.delete(name);\n    }\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    let field = get(_fields, name);\n    const disabledIsDefined =\n      isBoolean(options.disabled) || isBoolean(_options.disabled);\n\n    set(_fields, name, {\n      ...(field || {}),\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n    _names.mount.add(name);\n\n    if (field) {\n      _setDisabledField({\n        disabled: isBoolean(options.disabled)\n          ? options.disabled\n          : _options.disabled,\n        name,\n      });\n    } else {\n      updateValidAndValue(name, true, options.value);\n    }\n\n    return {\n      ...(disabledIsDefined\n        ? { disabled: options.disabled || _options.disabled }\n        : {}),\n      ...(_options.progressive\n        ? {\n            required: !!options.required,\n            min: getRuleValue(options.min),\n            max: getRuleValue(options.max),\n            minLength: getRuleValue<number>(options.minLength) as number,\n            maxLength: getRuleValue(options.maxLength) as number,\n            pattern: getRuleValue(options.pattern) as string,\n          }\n        : {}),\n      name,\n      onChange,\n      onBlur: onChange,\n      ref: (ref: HTMLInputElement | null): void => {\n        if (ref) {\n          register(name, options);\n          field = get(_fields, name);\n\n          const fieldRef = isUndefined(ref.value)\n            ? ref.querySelectorAll\n              ? (ref.querySelectorAll('input,select,textarea')[0] as Ref) || ref\n              : ref\n            : ref;\n          const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n          const refs = field._f.refs || [];\n\n          if (\n            radioOrCheckbox\n              ? refs.find((option: Ref) => option === fieldRef)\n              : fieldRef === field._f.ref\n          ) {\n            return;\n          }\n\n          set(_fields, name, {\n            _f: {\n              ...field._f,\n              ...(radioOrCheckbox\n                ? {\n                    refs: [\n                      ...refs.filter(live),\n                      fieldRef,\n                      ...(Array.isArray(get(_defaultValues, name)) ? [{}] : []),\n                    ],\n                    ref: { type: fieldRef.type, name },\n                  }\n                : { ref: fieldRef }),\n            },\n          });\n\n          updateValidAndValue(name, false, undefined, fieldRef);\n        } else {\n          field = get(_fields, name, {});\n\n          if (field._f) {\n            field._f.mount = false;\n          }\n\n          (_options.shouldUnregister || options.shouldUnregister) &&\n            !(isNameInFieldArray(_names.array, name) && _state.action) &&\n            _names.unMount.add(name);\n        }\n      },\n    };\n  };\n\n  const _focusError = () =>\n    _options.shouldFocusError &&\n    iterateFieldsByAction(_fields, _focusInput, _names.mount);\n\n  const _disableForm = (disabled?: boolean) => {\n    if (isBoolean(disabled)) {\n      _subjects.state.next({ disabled });\n      iterateFieldsByAction(\n        _fields,\n        (ref, name) => {\n          const currentField: Field = get(_fields, name);\n          if (currentField) {\n            ref.disabled = currentField._f.disabled || disabled;\n\n            if (Array.isArray(currentField._f.refs)) {\n              currentField._f.refs.forEach((inputRef) => {\n                inputRef.disabled = currentField._f.disabled || disabled;\n              });\n            }\n          }\n        },\n        0,\n        false,\n      );\n    }\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues, TTransformedValues> =\n    (onValid, onInvalid) => async (e) => {\n      let onValidError = undefined;\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        (e as React.BaseSyntheticEvent).persist &&\n          (e as React.BaseSyntheticEvent).persist();\n      }\n      let fieldValues: TFieldValues | TTransformedValues | {} =\n        cloneObject(_formValues);\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      if (_options.resolver) {\n        const { errors, values } = await _runSchema();\n        _formState.errors = errors;\n        fieldValues = cloneObject(values) as TFieldValues;\n      } else {\n        await executeBuiltInValidation(_fields);\n      }\n\n      if (_names.disabled.size) {\n        for (const name of _names.disabled) {\n          unset(fieldValues, name);\n        }\n      }\n\n      unset(_formState.errors, 'root');\n\n      if (isEmptyObject(_formState.errors)) {\n        _subjects.state.next({\n          errors: {},\n        });\n        try {\n          await onValid(fieldValues as TTransformedValues, e);\n        } catch (error) {\n          onValidError = error;\n        }\n      } else {\n        if (onInvalid) {\n          await onInvalid({ ..._formState.errors }, e);\n        }\n        _focusError();\n        setTimeout(_focusError);\n      }\n\n      _subjects.state.next({\n        isSubmitted: true,\n        isSubmitting: false,\n        isSubmitSuccessful: isEmptyObject(_formState.errors) && !onValidError,\n        submitCount: _formState.submitCount + 1,\n        errors: _formState.errors,\n      });\n      if (onValidError) {\n        throw onValidError;\n      }\n    };\n\n  const resetField: UseFormResetField<TFieldValues> = (name, options = {}) => {\n    if (get(_fields, name)) {\n      if (isUndefined(options.defaultValue)) {\n        setValue(name, cloneObject(get(_defaultValues, name)));\n      } else {\n        setValue(\n          name,\n          options.defaultValue as Parameters<typeof setValue<typeof name>>[1],\n        );\n        set(_defaultValues, name, cloneObject(options.defaultValue));\n      }\n\n      if (!options.keepTouched) {\n        unset(_formState.touchedFields, name);\n      }\n\n      if (!options.keepDirty) {\n        unset(_formState.dirtyFields, name);\n        _formState.isDirty = options.defaultValue\n          ? _getDirty(name, cloneObject(get(_defaultValues, name)))\n          : _getDirty();\n      }\n\n      if (!options.keepError) {\n        unset(_formState.errors, name);\n        _proxyFormState.isValid && _setValid();\n      }\n\n      _subjects.state.next({ ..._formState });\n    }\n  };\n\n  const _reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const updatedValues = formValues ? cloneObject(formValues) : _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n    const isEmptyResetValues = isEmptyObject(formValues);\n    const values = isEmptyResetValues ? _defaultValues : cloneUpdatedValues;\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n\n    if (!keepStateOptions.keepValues) {\n      if (keepStateOptions.keepDirtyValues) {\n        const fieldsToCheck = new Set([\n          ..._names.mount,\n          ...Object.keys(getDirtyFields(_defaultValues, _formValues)),\n        ]);\n        for (const fieldName of Array.from(fieldsToCheck)) {\n          get(_formState.dirtyFields, fieldName)\n            ? set(values, fieldName, get(_formValues, fieldName))\n            : setValue(\n                fieldName as FieldPath<TFieldValues>,\n                get(values, fieldName),\n              );\n        }\n      } else {\n        if (isWeb && isUndefined(formValues)) {\n          for (const name of _names.mount) {\n            const field = get(_fields, name);\n            if (field && field._f) {\n              const fieldReference = Array.isArray(field._f.refs)\n                ? field._f.refs[0]\n                : field._f.ref;\n\n              if (isHTMLElement(fieldReference)) {\n                const form = fieldReference.closest('form');\n                if (form) {\n                  form.reset();\n                  break;\n                }\n              }\n            }\n          }\n        }\n\n        if (keepStateOptions.keepFieldsRef) {\n          for (const fieldName of _names.mount) {\n            setValue(\n              fieldName as FieldPath<TFieldValues>,\n              get(values, fieldName),\n            );\n          }\n        } else {\n          _fields = {};\n        }\n      }\n\n      _formValues = _options.shouldUnregister\n        ? keepStateOptions.keepDefaultValues\n          ? (cloneObject(_defaultValues) as TFieldValues)\n          : ({} as TFieldValues)\n        : (cloneObject(values) as TFieldValues);\n\n      _subjects.array.next({\n        values: { ...values },\n      });\n\n      _subjects.state.next({\n        values: { ...values } as TFieldValues,\n      });\n    }\n\n    _names = {\n      mount: keepStateOptions.keepDirtyValues ? _names.mount : new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      disabled: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _state.mount =\n      !_proxyFormState.isValid ||\n      !!keepStateOptions.keepIsValid ||\n      !!keepStateOptions.keepDirtyValues;\n\n    _state.watch = !!_options.shouldUnregister;\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty: isEmptyResetValues\n        ? false\n        : keepStateOptions.keepDirty\n          ? _formState.isDirty\n          : !!(\n              keepStateOptions.keepDefaultValues &&\n              !deepEqual(formValues, _defaultValues)\n            ),\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields: isEmptyResetValues\n        ? {}\n        : keepStateOptions.keepDirtyValues\n          ? keepStateOptions.keepDefaultValues && _formValues\n            ? getDirtyFields(_defaultValues, _formValues)\n            : _formState.dirtyFields\n          : keepStateOptions.keepDefaultValues && formValues\n            ? getDirtyFields(_defaultValues, formValues)\n            : keepStateOptions.keepDirty\n              ? _formState.dirtyFields\n              : {},\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : {},\n      errors: keepStateOptions.keepErrors ? _formState.errors : {},\n      isSubmitSuccessful: keepStateOptions.keepIsSubmitSuccessful\n        ? _formState.isSubmitSuccessful\n        : false,\n      isSubmitting: false,\n      defaultValues: _defaultValues as FormState<TFieldValues>['defaultValues'],\n    });\n  };\n\n  const reset: UseFormReset<TFieldValues> = (formValues, keepStateOptions) =>\n    _reset(\n      isFunction(formValues)\n        ? (formValues as Function)(_formValues as TFieldValues)\n        : formValues,\n      keepStateOptions,\n    );\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name, options = {}) => {\n    const field = get(_fields, name);\n    const fieldReference = field && field._f;\n\n    if (fieldReference) {\n      const fieldRef = fieldReference.refs\n        ? fieldReference.refs[0]\n        : fieldReference.ref;\n\n      if (fieldRef.focus) {\n        fieldRef.focus();\n        options.shouldSelect &&\n          isFunction(fieldRef.select) &&\n          fieldRef.select();\n      }\n    }\n  };\n\n  const _setFormState = (\n    updatedFormState: Partial<FormState<TFieldValues>>,\n  ) => {\n    _formState = {\n      ..._formState,\n      ...updatedFormState,\n    };\n  };\n\n  const _resetDefaultValues = () =>\n    isFunction(_options.defaultValues) &&\n    (_options.defaultValues as Function)().then((values: TFieldValues) => {\n      reset(values, _options.resetOptions);\n      _subjects.state.next({\n        isLoading: false,\n      });\n    });\n\n  const methods = {\n    control: {\n      register,\n      unregister,\n      getFieldState,\n      handleSubmit,\n      setError,\n      _subscribe,\n      _runSchema,\n      _focusError,\n      _getWatch,\n      _getDirty,\n      _setValid,\n      _setFieldArray,\n      _setDisabledField,\n      _setErrors,\n      _getFieldArray,\n      _reset,\n      _resetDefaultValues,\n      _removeUnmounted,\n      _disableForm,\n      _subjects,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      get _state() {\n        return _state;\n      },\n      set _state(value) {\n        _state = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = {\n          ..._options,\n          ...value,\n        };\n      },\n    },\n    subscribe,\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    resetField,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n    getFieldState,\n  };\n\n  return {\n    ...methods,\n    formControl: methods,\n  };\n}\n","import React from 'react';\n\nimport getProxyFormState from './logic/getProxyFormState';\nimport deepEqual from './utils/deepEqual';\nimport isFunction from './utils/isFunction';\nimport { createFormControl } from './logic';\nimport type {\n  FieldValues,\n  FormState,\n  UseFormProps,\n  UseFormReturn,\n} from './types';\nimport { useIsomorphicLayoutEffect } from './useIsomorphicLayoutEffect';\n\n/**\n * Custom hook to manage the entire form.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\n *\n * @param props - form configuration and validation parameters.\n *\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   console.log(watch(\"example\"));\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input defaultValue=\"test\" {...register(\"example\")} />\n *       <input {...register(\"exampleRequired\", { required: true })} />\n *       {errors.exampleRequired && <span>This field is required</span>}\n *       <button>Submit</button>\n *     </form>\n *   );\n * }\n * ```\n */\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext = any,\n  TTransformedValues = TFieldValues,\n>(\n  props: UseFormProps<TFieldValues, TContext, TTransformedValues> = {},\n): UseFormReturn<TFieldValues, TContext, TTransformedValues> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext, TTransformedValues> | undefined\n  >(undefined);\n  const _values = React.useRef<typeof props.values>(undefined);\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    isLoading: isFunction(props.defaultValues),\n    isSubmitted: false,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    submitCount: 0,\n    dirtyFields: {},\n    touchedFields: {},\n    validatingFields: {},\n    errors: props.errors || {},\n    disabled: props.disabled || false,\n    isReady: false,\n    defaultValues: isFunction(props.defaultValues)\n      ? undefined\n      : props.defaultValues,\n  });\n\n  if (!_formControl.current) {\n    if (props.formControl) {\n      _formControl.current = {\n        ...props.formControl,\n        formState,\n      };\n\n      if (props.defaultValues && !isFunction(props.defaultValues)) {\n        props.formControl.reset(props.defaultValues, props.resetOptions);\n      }\n    } else {\n      const { formControl, ...rest } = createFormControl(props);\n\n      _formControl.current = {\n        ...rest,\n        formState,\n      };\n    }\n  }\n\n  const control = _formControl.current.control;\n  control._options = props;\n\n  useIsomorphicLayoutEffect(() => {\n    const sub = control._subscribe({\n      formState: control._proxyFormState,\n      callback: () => updateFormState({ ...control._formState }),\n      reRenderRoot: true,\n    });\n\n    updateFormState((data) => ({\n      ...data,\n      isReady: true,\n    }));\n\n    control._formState.isReady = true;\n\n    return sub;\n  }, [control]);\n\n  React.useEffect(\n    () => control._disableForm(props.disabled),\n    [control, props.disabled],\n  );\n\n  React.useEffect(() => {\n    if (props.mode) {\n      control._options.mode = props.mode;\n    }\n    if (props.reValidateMode) {\n      control._options.reValidateMode = props.reValidateMode;\n    }\n  }, [control, props.mode, props.reValidateMode]);\n\n  React.useEffect(() => {\n    if (props.errors) {\n      control._setErrors(props.errors);\n      control._focusError();\n    }\n  }, [control, props.errors]);\n\n  React.useEffect(() => {\n    props.shouldUnregister &&\n      control._subjects.state.next({\n        values: control._getWatch(),\n      });\n  }, [control, props.shouldUnregister]);\n\n  React.useEffect(() => {\n    if (control._proxyFormState.isDirty) {\n      const isDirty = control._getDirty();\n      if (isDirty !== formState.isDirty) {\n        control._subjects.state.next({\n          isDirty,\n        });\n      }\n    }\n  }, [control, formState.isDirty]);\n\n  React.useEffect(() => {\n    if (props.values && !deepEqual(props.values, _values.current)) {\n      control._reset(props.values, {\n        keepFieldsRef: true,\n        ...control._options.resetOptions,\n      });\n      _values.current = props.values;\n      updateFormState((state) => ({ ...state }));\n    } else {\n      control._resetDefaultValues();\n    }\n  }, [control, props.values]);\n\n  React.useEffect(() => {\n    if (!control._state.mount) {\n      control._setValid();\n      control._state.mount = true;\n    }\n\n    if (control._state.watch) {\n      control._state.watch = false;\n      control._subjects.state.next({ ...control._formState });\n    }\n\n    control._removeUnmounted();\n  });\n\n  _formControl.current.formState = getProxyFormState(formState, control);\n\n  return _formControl.current;\n}\n"],"names":["isCheckBoxInput","element","type","isDateObject","value","Date","isNullOrUndefined","isObjectType","isObject","Array","isArray","getEventValue","event","target","checked","isNameInFieldArray","names","name","has","substring","search","getNodeParentName","isPlainObject","tempObject","prototypeCopy","constructor","prototype","hasOwnProperty","isWeb","window","HTMLElement","document","cloneObject","data","copy","isFileListInstance","FileList","Blob","Object","create","getPrototypeOf","key","isKey","test","isUndefined","val","undefined","compact","filter","Boolean","stringToPath","input","replace","split","get","object","path","defaultValue","result","reduce","isBoolean","set","index","tempPath","length","lastIndex","newValue","objValue","isNaN","EVENTS","BLUR","FOCUS_OUT","CHANGE","VALIDATION_MODE","onBlur","onChange","onSubmit","onTouched","all","INPUT_VALIDATION_RULES","HookFormContext","React","displayName","FormProvider","props","children","Provider","getProxyFormState","formState","control","localProxyFormState","isRoot","arguments","defaultValues","_defaultValues","defineProperty","_key","_proxyFormState","useIsomorphicLayoutEffect","isString","generateWatchOutput","_names","formValues","isGlobal","watch","add","map","fieldName","watchAll","isPrimitive","deepEqual","object1","object2","_internal_visited","WeakSet","getTime","keys1","keys","keys2","val1","includes","val2","appendErrors","validateAllFieldCriteria","errors","message","types","convertToArrayPayload","createSubject","_observers","observers","next","observer","subscribe","push","unsubscribe","o","isEmptyObject","isFileInput","isFunction","isHTMLElement","owner","ownerDocument","defaultView","isMultipleSelect","isRadioInput","isRadioOrCheckbox","ref","live","isConnected","unset","paths","childObject","updatePath","slice","baseGet","obj","isEmptyArray","objectHasFunction","markFieldsDirty","fields","isParentNodeArray","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","getDirtyFields","defaultResult","isValid","validResult","getCheckboxValue","options","values","option","disabled","attributes","getFieldValueAs","_ref","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","getRadioValue","previous","getFieldValue","_f","files","refs","selectedOptions","_ref2","getResolverOptions","fieldsNames","_fields","criteriaMode","shouldUseNativeValidation","field","isRegex","RegExp","getRuleValue","rule","source","getValidationModes","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","ASYNC_FUNCTION","hasPromiseValidation","fieldReference","validate","find","validateFunction","hasValidation","mount","required","min","max","maxLength","minLength","pattern","isWatched","isBlurEvent","some","watchName","startsWith","iterateFieldsByAction","action","abortEarly","currentField","schemaErrorLookup","error","join","foundError","root","pop","shouldRenderFormState","formStateData","updateFormState","shouldSubscribeByName","signalName","exact","currentName","skipValidation","isTouched","isSubmitted","reValidateMode","unsetEmptyArray","updateFieldArrayRootError","fieldArrayErrors","isMessage","getValidateError","every","getValueAndMessage","validationData","validateField","async","disabledFieldNames","isFieldArray","inputValue","inputRef","setCustomValidity","reportValidity","isRadio","isCheckBox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueDate","convertTimeToDate","time","toDateString","isTime","isWeek","valueNumber","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","defaultOptions","shouldFocusError","createFormControl","delayErrorCallback","_options","_formState","submitCount","isDirty","isReady","isLoading","isValidating","isSubmitting","isSubmitSuccessful","touchedFields","dirtyFields","validatingFields","_formValues","shouldUnregister","_state","Set","unMount","array","timer","_proxySubscribeFormState","_subjects","state","shouldDisplayAllAssociatedErrors","_setValid","shouldUpdateValid","resolver","_runSchema","executeBuiltInValidation","_updateIsValidating","from","forEach","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","shouldDirty","shouldRender","shouldUpdateField","isPreviousDirty","output","_getDirty","isCurrentFieldPristine","isPreviousFieldTouched","shouldRenderByError","fieldState","previousFieldError","callback","delayError","updateErrors","wait","clearTimeout","setTimeout","updatedFormState","context","shouldOnlyCheckValid","valid","isFieldArrayRoot","isPromiseFunction","fieldError","getValues","_getWatch","optionRef","selected","checkboxRef","radioRef","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","cloneValue","isFieldValueUpdated","_updateIsFieldValueUpdated","Number","validationModeBeforeSubmit","validationModeAfterSubmit","shouldSkipValidation","deps","watched","readOnly","previousErrorLookupResult","errorLookupResult","_focusInput","focus","fieldNames","executeSchemaAndUpdateState","Promise","shouldFocus","getFieldState","invalid","setError","currentError","currentRef","restOfErrorTree","_subscribe","_setFormState","reRenderRoot","unregister","delete","keepValue","keepError","keepDirty","keepTouched","keepIsValidating","keepDefaultValue","keepIsValid","_setDisabledField","_ref3","register","disabledIsDefined","progressive","fieldRef","querySelectorAll","radioOrCheckbox","_focusError","handleSubmit","onValid","onInvalid","onValidError","e","preventDefault","persist","fieldValues","size","_reset","keepStateOptions","updatedValues","cloneUpdatedValues","isEmptyResetValues","keepDefaultValues","keepValues","keepDirtyValues","fieldsToCheck","form","closest","reset","keepFieldsRef","keepSubmitCount","keepIsSubmitted","keepErrors","keepIsSubmitSuccessful","methods","_setFieldArray","method","args","shouldSetValues","shouldUpdateFieldsAndState","argA","argB","_setErrors","_getFieldArray","_resetDefaultValues","then","resetOptions","_removeUnmounted","_disableForm","payload","resetField","clearErrors","inputName","setFocus","shouldSelect","select","formControl","useForm","_formControl","_values","current","rest","sub"],"sourceRoot":""}