{"version":3,"file":"static/js/236.04f05b21.chunk.js","mappings":"yLAIA,MAyNA,EAzN4BA,IAAqC,IAApC,OAAEC,EAAM,QAAEC,EAAO,UAAEC,GAAWH,EACzD,MAAM,KAAEI,IAASC,EAAAA,EAAAA,OACVC,EAAUC,IAAeC,EAAAA,EAAAA,UAAS,CACvCC,gBAAiB,GACjBC,YAAa,GACbC,gBAAiB,MAEZC,EAAWC,IAAgBL,EAAAA,EAAAA,WAAS,IACpCM,EAAOC,IAAYP,EAAAA,EAAAA,UAAS,KAC5BQ,EAASC,IAAcT,EAAAA,EAAAA,UAAS,IAEjCU,EAAqBC,IACzB,MAAM,KAAEC,EAAI,MAAEC,GAAUF,EAAEG,OAC1Bf,GAAYgB,IAAI,IACXA,EACH,CAACH,GAAOC,MAGNP,GAAOC,EAAS,GAAG,EA4DnBS,EAAcA,KACbZ,IACHL,EAAY,CACVE,gBAAiB,GACjBC,YAAa,GACbC,gBAAiB,KAEnBI,EAAS,IACTE,EAAW,IACXf,IACF,EAGF,OAAKD,GAGHwB,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gCAA+BC,UAC5CC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,wBAAuBC,SAAA,EACpCC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,EAC3BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iBAAgBC,SAAA,EAC7BF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,cAAaC,UAC1BF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,kBAEfE,EAAAA,EAAAA,MAAA,OAAKF,UAAU,cAAaC,SAAA,EAC1BF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,qBACJF,EAAAA,EAAAA,KAAA,KAAAE,SAAG,iDAGPF,EAAAA,EAAAA,KAAA,UACEC,UAAU,kBACVG,QAASL,EACTM,SAAUlB,EAAUe,UAEpBF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,uBAIjBE,EAAAA,EAAAA,MAAA,QAAMG,SAtESC,UAGnB,GAFAb,EAAEc,iBAxBG3B,EAASG,iBAAoBH,EAASI,aAAgBJ,EAASK,gBAKhEL,EAASI,YAAYwB,OAAS,GAChCnB,EAAS,mDACF,GAGLT,EAASI,cAAgBJ,EAASK,iBACpCI,EAAS,8BACF,GAGLT,EAASG,kBAAoBH,EAASI,cACxCK,EAAS,wDACF,IAhBPA,EAAS,2BACF,GAwBT,CAEAF,GAAa,GACbE,EAAS,IAET,UAGQ,IAAIoB,SAAQC,GAAWC,WAAWD,EAAS,OAEjDnB,EAAW,kCACXV,EAAY,CACVE,gBAAiB,GACjBC,YAAa,GACbC,gBAAiB,KAInB0B,YAAW,KACTlC,GAAaA,IACbD,GAAS,GACR,IAEL,CAAE,MAAOY,GACPC,EAAS,+CACX,CAAC,QACCF,GAAa,EACf,CA3B2B,CA2B3B,EAwCkCa,UAAU,uBAAsBC,SAAA,EAC5DC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAYC,SAAA,EACzBC,EAAAA,EAAAA,MAAA,SAAOU,QAAQ,kBAAiBX,SAAA,EAC9BF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,gBAAkB,uBAGjCD,EAAAA,EAAAA,KAAA,SACEc,KAAK,WACLC,GAAG,kBACHpB,KAAK,kBACLC,MAAOf,EAASG,gBAChBgC,SAAUvB,EACVwB,YAAY,8BACZZ,SAAUlB,EACV+B,UAAQ,QAIZf,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAYC,SAAA,EACzBC,EAAAA,EAAAA,MAAA,SAAOU,QAAQ,cAAaX,SAAA,EAC1BF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,eAAiB,mBAGhCD,EAAAA,EAAAA,KAAA,SACEc,KAAK,WACLC,GAAG,cACHpB,KAAK,cACLC,MAAOf,EAASI,YAChB+B,SAAUvB,EACVwB,YAAY,0BACZZ,SAAUlB,EACV+B,UAAQ,KAEVlB,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gBAAeC,SAAC,oDAKjCC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAYC,SAAA,EACzBC,EAAAA,EAAAA,MAAA,SAAOU,QAAQ,kBAAiBX,SAAA,EAC9BF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,wBAA0B,2BAGzCD,EAAAA,EAAAA,KAAA,SACEc,KAAK,WACLC,GAAG,kBACHpB,KAAK,kBACLC,MAAOf,EAASK,gBAChB8B,SAAUvB,EACVwB,YAAY,4BACZZ,SAAUlB,EACV+B,UAAQ,OAIX7B,IACCc,EAAAA,EAAAA,MAAA,OAAKF,UAAU,gBAAeC,SAAA,EAC5BF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,8BACZZ,KAIJE,IACCY,EAAAA,EAAAA,MAAA,OAAKF,UAAU,kBAAiBC,SAAA,EAC9BF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,wBACZV,MAILY,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,KAAA,UACEc,KAAK,SACLb,UAAU,gBACVG,QAASL,EACTM,SAAUlB,EAAUe,SACrB,YAGDF,EAAAA,EAAAA,KAAA,UACEc,KAAK,SACLb,UAAU,cACVI,SAAUlB,EAAUe,SAEnBf,GACCgB,EAAAA,EAAAA,MAAAgB,EAAAA,SAAA,CAAAjB,SAAA,EACEF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,2BAA6B,2BAI5CE,EAAAA,EAAAA,MAAAgB,EAAAA,SAAA,CAAAjB,SAAA,EACEF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,gBAAkB,kCAlH3B,IA0HZ,E,QCpNV,MA2jBA,EA3jB4B1B,IAA8B,IAA7B,QAAE6C,EAAU,WAAW7C,EAClD,MAAM,KAAEI,EAAI,OAAE0C,IAAWzC,EAAAA,EAAAA,OAClBJ,EAAQ8C,IAAavC,EAAAA,EAAAA,WAAS,IAC9BwC,EAAoBC,IAAyBzC,EAAAA,EAAAA,WAAS,IACtD0C,EAAkBC,IAAuB3C,EAAAA,EAAAA,WAAS,IAClD4C,EAAmBC,IAAwB7C,EAAAA,EAAAA,WAAS,IACpD8C,EAAcC,IAAmB/C,EAAAA,EAAAA,WAAS,IAC1CgD,EAAUC,IAAejD,EAAAA,EAAAA,WAAS,GACnCkD,GAAcC,EAAAA,EAAAA,QAAO,OAKpBC,EAAYC,IAAiBrD,EAAAA,EAAAA,UAAS,CAC3CsD,cAAe,GACfC,UAAW,GACXC,cAAe,MAIVC,IAAiBzD,EAAAA,EAAAA,UAAS,CAC/B,CAAEgC,GAAI,EAAGD,KAAM,OAAQ2B,QAAS,2CAA4CC,KAAM,iBAClF,CAAE3B,GAAI,EAAGD,KAAM,UAAW2B,QAAS,yCAA0CC,KAAM,cACnF,CAAE3B,GAAI,EAAGD,KAAM,UAAW2B,QAAS,6CAA8CC,KAAM,kBAIlFC,EAAcC,IAAmB7D,EAAAA,EAAAA,UAAS,OAGjD8D,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAsBC,IACtBd,EAAYe,UAAYf,EAAYe,QAAQC,SAASF,EAAMlD,SAC7DyB,GAAU,EACZ,EAIF,OADA4B,SAASC,iBAAiB,YAAaL,GAChC,KACLI,SAASE,oBAAoB,YAAaN,EAAmB,CAC9D,GACA,IAGH,MAAMO,EAAeA,KACnBhC,IACAiC,OAAOC,SAASC,KAAO,QAAQ,EAwC3BC,EAAiBA,KACrB,GAAQ,OAAJ9E,QAAI,IAAJA,GAAAA,EAAMgB,KACR,OAAOhB,EAAKgB,KAGd,GAAQ,OAAJhB,QAAI,IAAJA,GAAAA,EAAM+E,SAAU,CAElB,OADa/E,EAAKgF,MAAQ,QAExB,IAAK,QACH,MAAO,aACT,IAAK,cACH,MAAO,mBACT,IAAK,WACH,MAAO,gBACT,IAAK,SACH,MAAO,cACT,QACE,OAAOhF,EAAK+E,SAElB,CAEA,MAAO,MAAM,EAITE,EAAiBA,IACb,OAAJjF,QAAI,IAAJA,GAAAA,EAAMgF,KACDhF,EAAKgF,KAAKE,QAAQ,IAAK,KAEzB,OAIHC,EAAoBA,KACxB,MAAMC,EAAcN,IACpB,OAzCmB9D,EAyCAoE,GAvCZpE,EAAKqE,MAAM,KAAKC,KAAIC,GAAKA,EAAE,KAAIC,KAAK,IAAIC,cAAcC,MAAM,EAAG,GADpD,IADC1E,KAyCY,EAS3B2E,EAAeA,KACR,OAAJ3F,QAAI,IAAJA,OAAI,EAAJA,EAAM4F,QAAS,IAAO,OAAJ5F,QAAI,IAAJA,OAAI,EAAJA,EAAM+E,WAAY,kBAI7C,MAAgB,YAAZtC,GAEAjB,EAAAA,EAAAA,MAAA,OAAKF,UAAU,0CAA0CuE,IAAKvC,EAAY/B,SAAA,EACxEC,EAAAA,EAAAA,MAAA,OACEF,UAAU,wCACVG,QAASA,IAAMkB,GAAW9C,GAC1BiG,MAAM,YAAWvE,SAAA,EAEjBF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,uCAAsCC,SAClD4D,OAEH9D,EAAAA,EAAAA,KAAA,KAAGC,UAAW,oDAAmDzB,EAAS,UAAY,SAGvFA,IACC2B,EAAAA,EAAAA,MAAA,OAAKF,UAAU,qCAAoCC,SAAA,EACjDC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,+BAA8BC,SAAA,EAC3CF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,qCAAoCC,SAChD4D,OAEH3D,EAAAA,EAAAA,MAAA,OAAKF,UAAU,gCAA+BC,SAAA,EAC5CF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,mCAAkCC,SAAEuD,OACpDzD,EAAAA,EAAAA,KAAA,QAAMC,UAAU,6BAA4BC,SAAE0D,OAC9C5D,EAAAA,EAAAA,KAAA,QAAMC,UAAU,8BAA6BC,SAAEoE,aAInDnE,EAAAA,EAAAA,MAAA,OAAKF,UAAU,gCAA+BC,SAAA,EAC5CC,EAAAA,EAAAA,MAAA,UACEF,UAAU,mCACVG,QAASA,IAAMoB,GAAsB,GAAMtB,SAAA,EAE3CF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,eAAiB,sBAIhCE,EAAAA,EAAAA,MAAA,UACEF,UAAU,mCACVG,QAASA,IAAMsB,GAAoB,GAAMxB,SAAA,EAEzCF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,qBAAuB,qBAItCE,EAAAA,EAAAA,MAAA,UACEF,UAAU,0CACVG,QAASiD,EAAanD,SAAA,EAEtBF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,wBAA0B,qBAWrC,aAAZmB,GAEAjB,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iCAAiCuE,IAAKvC,EAAY/B,SAAA,EAC/DC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,uBAAsBC,SAAA,EACnCC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,uBAAsBC,SAAA,EACnCC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,oBAAmBC,SAAA,EAChCC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,wBAAuBC,SAAA,EACpCF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,oBAAmBC,SAC/B4D,OAEH9D,EAAAA,EAAAA,KAAA,OAAKC,UAAW,qCAElBE,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,oBAAmBC,SAAEuD,OACrCzD,EAAAA,EAAAA,KAAA,QAAMC,UAAU,oBAAmBC,SAAE0D,OACrC5D,EAAAA,EAAAA,KAAA,QAAMC,UAAU,qBAAoBC,SAAEoE,aAG1CnE,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,EAC3BC,EAAAA,EAAAA,MAAA,UACEF,UAAU,oBACVwE,MAAM,gBACNrE,QAASA,IAAMwB,GAAqB,GAAM1B,SAAA,EAE1CF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,iBACbD,EAAAA,EAAAA,KAAA,QAAMC,UAAU,qBAAoBC,SAAEsC,EAAc/B,aAEtDT,EAAAA,EAAAA,KAAA,UACEC,UAAU,oBACVwE,MAAM,WACNrE,QAASA,IAAM0B,GAAgB,GAAM5B,UAErCF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,kBAEfD,EAAAA,EAAAA,KAAA,UACEC,UAAU,oBACVwE,MAAM,OACNrE,QAASA,IAAM4B,GAAY,GAAM9B,UAEjCF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,oCAKnBD,EAAAA,EAAAA,KAAA,OACEC,UAAU,uBACVG,QAASA,IAAMkB,GAAW9C,GAC1BiG,MAAM,YAAWvE,UAEjBF,EAAAA,EAAAA,KAAA,KAAGC,UAAW,uCAAsCzB,EAAS,UAAY,WAI5EA,IACC2B,EAAAA,EAAAA,MAAA,OAAKF,UAAU,8BAA6BC,SAAA,EAC1CC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,kBAAiBC,SAAA,EAC9BF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,oBAAmBC,SAC/B4D,OAEH3D,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,kBAAiBC,SAAEuD,OACnCzD,EAAAA,EAAAA,KAAA,QAAMC,UAAU,YAAWC,SAAE0D,OAC7B5D,EAAAA,EAAAA,KAAA,QAAMC,UAAU,aAAYC,SAAEoE,aAIlCnE,EAAAA,EAAAA,MAAA,OAAKF,UAAU,mBAAkBC,SAAA,EAC/BC,EAAAA,EAAAA,MAAA,UACEF,UAAU,sBACVG,QAASA,IAAMoB,GAAsB,GAAMtB,SAAA,EAE3CF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,eAAiB,sBAIhCE,EAAAA,EAAAA,MAAA,UACEF,UAAU,sBACVG,QAASA,IAAMsB,GAAoB,GAAMxB,SAAA,EAEzCF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,qBAAuB,qBAItCE,EAAAA,EAAAA,MAAA,UACEF,UAAU,sBACVG,QAASA,IAAM0B,GAAgB,GAAM5B,SAAA,EAErCF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,eAAiB,eAIhCE,EAAAA,EAAAA,MAAA,UACEF,UAAU,sBACVG,QAASA,IAAM4B,GAAY,GAAM9B,SAAA,EAEjCF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,2BAA6B,qBAI5CE,EAAAA,EAAAA,MAAA,UACEF,UAAU,6BACVG,QAASiD,EAAanD,SAAA,EAEtBF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,wBAA0B,sBAanDE,EAAAA,EAAAA,MAAA,OAAKF,UAAU,wBAAwBuE,IAAKvC,EAAY/B,SAAA,EACtDC,EAAAA,EAAAA,MAAA,OACEF,UAAU,uBACVG,QAASA,IAAMkB,GAAW9C,GAAQ0B,SAAA,EAElCF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,cAAaC,SACzB4D,OAEH3D,EAAAA,EAAAA,MAAA,OAAKF,UAAU,YAAWC,SAAA,EACxBF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,YAAWC,SAAEuD,OAC7BzD,EAAAA,EAAAA,KAAA,QAAMC,UAAU,YAAWC,SAAE0D,UAE/B5D,EAAAA,EAAAA,KAAA,KAAGC,UAAW,uCAAsCzB,EAAS,UAAY,SAG1EA,IACC2B,EAAAA,EAAAA,MAAA,OAAKF,UAAU,qBAAoBC,SAAA,EACjCC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,kBAAiBC,SAAA,EAC9BF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,oBAAmBC,SAC/B4D,OAEH3D,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,kBAAiBC,SAAEuD,OACnCzD,EAAAA,EAAAA,KAAA,QAAMC,UAAU,YAAWC,SAAE0D,OAC7B5D,EAAAA,EAAAA,KAAA,QAAMC,UAAU,aAAYC,SAAEoE,aAIlCnE,EAAAA,EAAAA,MAAA,OAAKF,UAAU,mBAAkBC,SAAA,EAC/BC,EAAAA,EAAAA,MAAA,UACEF,UAAU,sBACVG,QAASA,IAAMoB,GAAsB,GAAMtB,SAAA,EAE3CF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,eAAiB,sBAIhCE,EAAAA,EAAAA,MAAA,UACEF,UAAU,sBACVG,QAASA,IAAMsB,GAAoB,GAAMxB,SAAA,EAEzCF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,qBAAuB,qBAItCE,EAAAA,EAAAA,MAAA,UACEF,UAAU,6BACVG,QAASiD,EAAanD,SAAA,EAEtBF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,wBAA0B,mBAQ/CD,EAAAA,EAAAA,KAAC0E,EAAmB,CAClBlG,OAAQ+C,EACR9C,QAASA,IAAM+C,GAAsB,GACrC9C,UAAWA,KACTkE,EAAgB,CACd9B,KAAM,UACN2B,QAAS,kCACT,IAKLhB,IACCzB,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gBAAeC,UAC5BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,oBACJF,EAAAA,EAAAA,KAAA,UACEC,UAAU,cACVG,QAASA,IAAMsB,GAAoB,GAAOxB,UAE1CF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,uBAIjBE,EAAAA,EAAAA,MAAA,QAAMG,SApVWC,UAGzB,GAFAb,EAAEc,iBAEE2B,EAAWG,YAAcH,EAAWI,cAKxC,GAAIJ,EAAWG,UAAU7B,OAAS,EAChCkE,MAAM,wDAIR,IAEEA,MAAM,iCACNjD,GAAoB,GACpBU,EAAc,CACZC,cAAe,GACfC,UAAW,GACXC,cAAe,IAEnB,CAAE,MAAOlD,GACPsF,MAAM,8CACR,MApBEA,MAAM,6BAoBR,EA4T2CzE,SAAA,EACjCC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAYC,SAAA,EACzBF,EAAAA,EAAAA,KAAA,SAAOa,QAAQ,gBAAeX,SAAC,qBAC/BF,EAAAA,EAAAA,KAAA,SACEc,KAAK,OACLC,GAAG,gBACHnB,MAAOuC,EAAWE,cAClBrB,SAAWtB,GAAM0C,GAActC,IAAI,IAC9BA,EACHuC,cAAe3C,EAAEG,OAAOD,UAE1BsB,UAAQ,QAIZf,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAYC,SAAA,EACzBF,EAAAA,EAAAA,KAAA,SAAOa,QAAQ,YAAWX,SAAC,iBAC3BF,EAAAA,EAAAA,KAAA,SACEc,KAAK,OACLC,GAAG,YACHnB,MAAOuC,EAAWG,UAClBtB,SAAWtB,GAAM0C,GAActC,IAAI,IAC9BA,EACHwC,UAAW5C,EAAEG,OAAOD,UAEtBsB,UAAQ,QAIZf,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAYC,SAAA,EACzBF,EAAAA,EAAAA,KAAA,SAAOa,QAAQ,gBAAeX,SAAC,yBAC/BF,EAAAA,EAAAA,KAAA,SACEc,KAAK,OACLC,GAAG,gBACHnB,MAAOuC,EAAWI,cAClBvB,SAAWtB,GAAM0C,GAActC,IAAI,IAC9BA,EACHyC,cAAe7C,EAAEG,OAAOD,UAE1BsB,UAAQ,QAIZf,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,KAAA,UACEc,KAAK,SACLb,UAAU,gBACVG,QAASA,IAAMsB,GAAoB,GAAOxB,SAC3C,YAGDF,EAAAA,EAAAA,KAAA,UAAQc,KAAK,SAASb,UAAU,cAAaC,SAAC,8BAUvDyB,IACC3B,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gBAAeC,UAC5BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,mBACJF,EAAAA,EAAAA,KAAA,UACEC,UAAU,cACVG,QAASA,IAAMwB,GAAqB,GAAO1B,UAE3CF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,uBAIjBD,EAAAA,EAAAA,KAAA,OAAKC,UAAU,qBAAoBC,SAChCsC,EAAcyB,KAAItB,IACjBxC,EAAAA,EAAAA,MAAA,OAA2BF,UAAW,qBAAqB0C,EAAa7B,OAAOZ,SAAA,EAC7EF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,oBAAmBC,UAChCF,EAAAA,EAAAA,KAAA,KAAGC,UAAW,WAAgC,SAAtB0C,EAAa7B,KAAkB,cAAsC,YAAtB6B,EAAa7B,KAAqB,uBAAyB,qBAEpIX,EAAAA,EAAAA,MAAA,OAAKF,UAAU,uBAAsBC,SAAA,EACnCF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,uBAAsBC,SAAEyC,EAAaF,WAClDzC,EAAAA,EAAAA,KAAA,QAAMC,UAAU,oBAAmBC,SAAEyC,EAAaD,YAN5CC,EAAa5B,SAY3Bf,EAAAA,EAAAA,KAAA,OAAKC,UAAU,eAAcC,UAC3BF,EAAAA,EAAAA,KAAA,UACEC,UAAU,gBACVG,QAASA,IAAMwB,GAAqB,GAAO1B,SAC5C,iBASR2B,IACC7B,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gBAAeC,UAC5BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,cACJF,EAAAA,EAAAA,KAAA,UACEC,UAAU,cACVG,QAASA,IAAM0B,GAAgB,GAAO5B,UAEtCF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,uBAIjBD,EAAAA,EAAAA,KAAA,OAAKC,UAAU,mBAAkBC,UAC/BF,EAAAA,EAAAA,KAAA,KAAAE,SAAG,2CAGLF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,eAAcC,UAC3BF,EAAAA,EAAAA,KAAA,UACEC,UAAU,gBACVG,QAASA,IAAM0B,GAAgB,GAAO5B,SACvC,iBASR6B,IACC/B,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gBAAeC,UAC5BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,oBACJF,EAAAA,EAAAA,KAAA,UACEC,UAAU,cACVG,QAASA,IAAM4B,GAAY,GAAO9B,UAElCF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,uBAIjBD,EAAAA,EAAAA,KAAA,OAAKC,UAAU,eAAcC,UAC3BF,EAAAA,EAAAA,KAAA,KAAAE,SAAG,mDAGLF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,eAAcC,UAC3BF,EAAAA,EAAAA,KAAA,UACEC,UAAU,gBACVG,QAASA,IAAM4B,GAAY,GAAO9B,SACnC,iBASRyC,IACCxC,EAAAA,EAAAA,MAAA,OAAKF,UAAW,sBAAsB0C,EAAa7B,OAAOZ,SAAA,EACxDC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,6BAA4BC,SAAA,EACzCF,EAAAA,EAAAA,KAAA,KAAGC,UAAW,WAAgC,YAAtB0C,EAAa7B,KAAqB,eAAiB,kBAC3Ed,EAAAA,EAAAA,KAAA,QAAAE,SAAOyC,EAAaF,cAEtBzC,EAAAA,EAAAA,KAAA,UACEC,UAAU,2BACVG,QAASA,IAAMwC,EAAgB,MAAM1C,UAErCF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,wBAIf,C,+ECxjBV,MAwFA,EAxFsB1B,IAAyB,IAAxB,UAAE0B,EAAY,IAAI1B,EACvC,MAAM,aAAEqG,EAAY,YAAEC,EAAW,cAAEC,EAAa,aAAEC,IAAiBC,EAAAA,EAAAA,OAC5DxG,EAAQ8C,IAAavC,EAAAA,EAAAA,WAAS,GAC/BkD,GAAcC,EAAAA,EAAAA,QAAO,OAG3BW,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAsBC,IACtBd,EAAYe,UAAYf,EAAYe,QAAQC,SAASF,EAAMlD,SAC7DyB,GAAU,EACZ,EAIF,OADA4B,SAASC,iBAAiB,YAAaL,GAChC,KACLI,SAASE,oBAAoB,YAAaN,EAAmB,CAC9D,GACA,IAWH,OACE3C,EAAAA,EAAAA,MAAA,OAAKF,UAAW,kBAAkBA,IAAauE,IAAKvC,EAAY/B,SAAA,EAC9DC,EAAAA,EAAAA,MAAA,UACEF,UAAU,qBACVG,QARiB6E,KACrB3D,GAAW9C,EAAO,EAQd,gBAAeA,EACf,gBAAc,OAAM0B,SAAA,EAEpBC,EAAAA,EAAAA,MAAA,QAAMF,UAAU,cAAaC,SAAA,CAAC,UAAQ4E,QACtC9E,EAAAA,EAAAA,KAAA,QAAMC,UAAW,mBAAkBzB,EAAS,OAAS,IAAK0B,UACxDF,EAAAA,EAAAA,KAAA,OAAKkF,MAAM,KAAKC,OAAO,IAAIC,QAAQ,WAAWC,KAAK,OAAOC,MAAM,6BAA4BpF,UAC1FF,EAAAA,EAAAA,KAAA,QAAMuF,EAAE,sBAAsBC,OAAO,eAAeC,YAAY,MAAMC,cAAc,QAAQC,eAAe,iBAKhHnH,IACC2B,EAAAA,EAAAA,MAAA,OAAKF,UAAU,sBAAqBC,SAAA,EAClCF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,kBAAiBC,UAC9BF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,iBAAgBC,SAAC,mBAGlC6E,IAAed,KAAK2B,IACnBzF,EAAAA,EAAAA,MAAA,UAEEF,UAAW,iBAAgB2E,IAAiBgB,EAAMhG,MAAQ,WAAa,IACvEQ,QAASA,KAAMyF,OAnCAC,EAmCkBF,EAAMhG,MAlCjDiF,EAAYiB,QACZxE,GAAU,GAFewE,KAmC+B,EAAA5F,SAAA,EAE9CF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gBAAeC,UAC5BC,EAAAA,EAAAA,MAAA,OAAKF,UAAW,wBAAwB2F,EAAMhG,QAAQM,SAAA,EACpDF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,uBACfD,EAAAA,EAAAA,KAAA,OAAKC,UAAU,yBACfD,EAAAA,EAAAA,KAAA,OAAKC,UAAU,2BAInBE,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAYC,SAAA,EACzBF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,aAAYC,SAAE0F,EAAMG,SACpC5F,EAAAA,EAAAA,MAAA,QAAMF,UAAU,oBAAmBC,SAAA,CAChB,iBAAhB0F,EAAMhG,OAA4B,6CAClB,0BAAhBgG,EAAMhG,OAAqC,+CAC3B,sBAAhBgG,EAAMhG,OAAiC,0CAI3CgF,IAAiBgB,EAAMhG,QACtBI,EAAAA,EAAAA,KAAA,OAAKC,UAAU,qBAAoBC,UACjCF,EAAAA,EAAAA,KAAA,OAAKkF,MAAM,KAAKC,OAAO,KAAKC,QAAQ,YAAYC,KAAK,OAAOC,MAAM,6BAA4BpF,UAC5FF,EAAAA,EAAAA,KAAA,QAAMuF,EAAE,yBAAyBC,OAAO,eAAeC,YAAY,IAAIC,cAAc,QAAQC,eAAe,gBAxB7GC,EAAMhG,cAgCf,C","sources":["components/ChangePasswordModal.jsx","components/UserProfileDropdown.jsx","components/ThemeDropdown.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport '../styles/ChangePasswordModal.css';\r\n\r\nconst ChangePasswordModal = ({ isOpen, onClose, onSuccess }) => {\r\n  const { user } = useAuth();\r\n  const [formData, setFormData] = useState({\r\n    currentPassword: '',\r\n    newPassword: '',\r\n    confirmPassword: ''\r\n  });\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const [success, setSuccess] = useState('');\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      [name]: value\r\n    }));\r\n    // Clear error when user starts typing\r\n    if (error) setError('');\r\n  };\r\n\r\n  const validateForm = () => {\r\n    if (!formData.currentPassword || !formData.newPassword || !formData.confirmPassword) {\r\n      setError('All fields are required');\r\n      return false;\r\n    }\r\n    \r\n    if (formData.newPassword.length < 6) {\r\n      setError('New password must be at least 6 characters long');\r\n      return false;\r\n    }\r\n    \r\n    if (formData.newPassword !== formData.confirmPassword) {\r\n      setError('New passwords do not match');\r\n      return false;\r\n    }\r\n    \r\n    if (formData.currentPassword === formData.newPassword) {\r\n      setError('New password must be different from current password');\r\n      return false;\r\n    }\r\n    \r\n    return true;\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    if (!validateForm()) return;\r\n    \r\n    setIsLoading(true);\r\n    setError('');\r\n    \r\n    try {\r\n      // Here you would typically make an API call to change password\r\n      // For now, we'll simulate a successful password change\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      \r\n      setSuccess('Password changed successfully!');\r\n      setFormData({\r\n        currentPassword: '',\r\n        newPassword: '',\r\n        confirmPassword: ''\r\n      });\r\n      \r\n      // Close modal after 2 seconds\r\n      setTimeout(() => {\r\n        onSuccess && onSuccess();\r\n        onClose();\r\n      }, 2000);\r\n      \r\n    } catch (error) {\r\n      setError('Failed to change password. Please try again.');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    if (!isLoading) {\r\n      setFormData({\r\n        currentPassword: '',\r\n        newPassword: '',\r\n        confirmPassword: ''\r\n      });\r\n      setError('');\r\n      setSuccess('');\r\n      onClose();\r\n    }\r\n  };\r\n\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <div className=\"change-password-modal-overlay\">\r\n      <div className=\"change-password-modal\">\r\n        <div className=\"modal-header\">\r\n          <div className=\"header-content\">\r\n            <div className=\"header-icon\">\r\n              <i className=\"fas fa-key\"></i>\r\n            </div>\r\n            <div className=\"header-text\">\r\n              <h2>Change Password</h2>\r\n              <p>Update your account password securely</p>\r\n            </div>\r\n          </div>\r\n          <button\r\n            className=\"modal-close-btn\"\r\n            onClick={handleClose}\r\n            disabled={isLoading}\r\n          >\r\n            <i className=\"fas fa-times\"></i>\r\n          </button>\r\n        </div>\r\n\r\n        <form onSubmit={handleSubmit} className=\"change-password-form\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"currentPassword\">\r\n              <i className=\"fas fa-lock\"></i>\r\n              Current Password\r\n            </label>\r\n            <input\r\n              type=\"password\"\r\n              id=\"currentPassword\"\r\n              name=\"currentPassword\"\r\n              value={formData.currentPassword}\r\n              onChange={handleInputChange}\r\n              placeholder=\"Enter your current password\"\r\n              disabled={isLoading}\r\n              required\r\n            />\r\n          </div>\r\n\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"newPassword\">\r\n              <i className=\"fas fa-key\"></i>\r\n              New Password\r\n            </label>\r\n            <input\r\n              type=\"password\"\r\n              id=\"newPassword\"\r\n              name=\"newPassword\"\r\n              value={formData.newPassword}\r\n              onChange={handleInputChange}\r\n              placeholder=\"Enter your new password\"\r\n              disabled={isLoading}\r\n              required\r\n            />\r\n            <div className=\"password-hint\">\r\n              Password must be at least 6 characters long\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"confirmPassword\">\r\n              <i className=\"fas fa-check-circle\"></i>\r\n              Confirm New Password\r\n            </label>\r\n            <input\r\n              type=\"password\"\r\n              id=\"confirmPassword\"\r\n              name=\"confirmPassword\"\r\n              value={formData.confirmPassword}\r\n              onChange={handleInputChange}\r\n              placeholder=\"Confirm your new password\"\r\n              disabled={isLoading}\r\n              required\r\n            />\r\n          </div>\r\n\r\n          {error && (\r\n            <div className=\"error-message\">\r\n              <i className=\"fas fa-exclamation-circle\"></i>\r\n              {error}\r\n            </div>\r\n          )}\r\n\r\n          {success && (\r\n            <div className=\"success-message\">\r\n              <i className=\"fas fa-check-circle\"></i>\r\n              {success}\r\n            </div>\r\n          )}\r\n\r\n          <div className=\"form-actions\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn-secondary\"\r\n              onClick={handleClose}\r\n              disabled={isLoading}\r\n            >\r\n              Cancel\r\n            </button>\r\n            <button\r\n              type=\"submit\"\r\n              className=\"btn-primary\"\r\n              disabled={isLoading}\r\n            >\r\n              {isLoading ? (\r\n                <>\r\n                  <i className=\"fas fa-spinner fa-spin\"></i>\r\n                  Changing Password...\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <i className=\"fas fa-save\"></i>\r\n                  Change Password\r\n                </>\r\n              )}\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChangePasswordModal;\r\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport ChangePasswordModal from './ChangePasswordModal';\r\nimport '../styles/Dashboard.css';\r\n \r\nconst UserProfileDropdown = ({ variant = 'default' }) => {\r\n  const { user, logout } = useAuth();\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [showChangePassword, setShowChangePassword] = useState(false);\r\n  const [showChangeUserId, setShowChangeUserId] = useState(false);\r\n  const [showNotifications, setShowNotifications] = useState(false);\r\n  const [showSettings, setShowSettings] = useState(false);\r\n  const [showHelp, setShowHelp] = useState(false);\r\n  const dropdownRef = useRef(null);\r\n \r\n\r\n \r\n  // User ID change form state\r\n  const [userIdData, setUserIdData] = useState({\r\n    currentUserId: '',\r\n    newUserId: '',\r\n    confirmUserId: ''\r\n  });\r\n \r\n  // Notifications state\r\n  const [notifications] = useState([\r\n    { id: 1, type: 'info', message: 'New farmer registration pending approval', time: '2 minutes ago' },\r\n    { id: 2, type: 'warning', message: 'KYC verification overdue for 3 farmers', time: '1 hour ago' },\r\n    { id: 3, type: 'success', message: 'Employee assignment completed successfully', time: '3 hours ago' }\r\n  ]);\r\n  \r\n  // Notification state for change password\r\n  const [notification, setNotification] = useState(null);\r\n \r\n  // Close dropdown when clicking outside\r\n  useEffect(() => {\r\n    const handleClickOutside = (event) => {\r\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {\r\n        setIsOpen(false);\r\n      }\r\n    };\r\n \r\n    document.addEventListener('mousedown', handleClickOutside);\r\n    return () => {\r\n      document.removeEventListener('mousedown', handleClickOutside);\r\n    };\r\n  }, []);\r\n \r\n  // Handle logout\r\n  const handleLogout = () => {\r\n    logout();\r\n    window.location.href = '/login';\r\n  };\r\n \r\n  \r\n \r\n  // Handle user ID change\r\n  const handleChangeUserId = async (e) => {\r\n    e.preventDefault();\r\n   \r\n    if (userIdData.newUserId !== userIdData.confirmUserId) {\r\n      alert('New User IDs do not match!');\r\n      return;\r\n    }\r\n \r\n    if (userIdData.newUserId.length < 3) {\r\n      alert('New User ID must be at least 3 characters long!');\r\n      return;\r\n    }\r\n \r\n    try {\r\n      // Here you would typically make an API call to change user ID\r\n      alert('User ID changed successfully!');\r\n      setShowChangeUserId(false);\r\n      setUserIdData({\r\n        currentUserId: '',\r\n        newUserId: '',\r\n        confirmUserId: ''\r\n      });\r\n    } catch (error) {\r\n      alert('Failed to change User ID. Please try again.');\r\n    }\r\n  };\r\n \r\n  // Get user initials for avatar\r\n  const getInitials = (name) => {\r\n    if (!name) return 'U';\r\n    return name.split(' ').map(n => n[0]).join('').toUpperCase().slice(0, 2);\r\n  };\r\n \r\n  // Get display name based on user role and available data\r\n  const getDisplayName = () => {\r\n    if (user?.name) {\r\n      return user.name;\r\n    }\r\n   \r\n    if (user?.userName) {\r\n      const role = user.role || 'USER';\r\n      switch (role) {\r\n        case 'ADMIN':\r\n          return 'Admin User';\r\n        case 'SUPER_ADMIN':\r\n          return 'Super Admin User';\r\n        case 'EMPLOYEE':\r\n          return 'Employee User';\r\n        case 'FARMER':\r\n          return 'Farmer User';\r\n        default:\r\n          return user.userName;\r\n      }\r\n    }\r\n   \r\n    return 'User';\r\n  };\r\n \r\n  // Get display role\r\n  const getDisplayRole = () => {\r\n    if (user?.role) {\r\n      return user.role.replace('_', ' ');\r\n    }\r\n    return 'USER';\r\n  };\r\n \r\n  // Get avatar initials\r\n  const getAvatarInitials = () => {\r\n    const displayName = getDisplayName();\r\n    return getInitials(displayName);\r\n  };\r\n \r\n  // Get user status (online/offline)\r\n  const getUserStatus = () => {\r\n    return 'online'; // You can implement real status logic here\r\n  };\r\n \r\n  // Get user email\r\n  const getUserEmail = () => {\r\n    return user?.email || `${user?.userName || 'user'}@date.com`;\r\n  };\r\n \r\n    // Render compact variant (for mobile or minimal header)\r\n  if (variant === 'compact') {\r\n    return (\r\n      <div className=\"user-profile-dropdown-component compact\" ref={dropdownRef}>\r\n        <div\r\n          className=\"user-profile-dropdown-trigger compact\"\r\n          onClick={() => setIsOpen(!isOpen)}\r\n          title=\"User Menu\"\r\n        >\r\n          <div className=\"user-profile-dropdown-avatar-compact\">\r\n            {getAvatarInitials()}\r\n          </div>\r\n          <i className={`fas fa-chevron-down user-profile-dropdown-arrow ${isOpen ? 'rotated' : ''}`}></i>\r\n        </div>\r\n\r\n        {isOpen && (\r\n          <div className=\"user-profile-dropdown-menu compact\">\r\n            <div className=\"user-profile-dropdown-header\">\r\n              <div className=\"user-profile-dropdown-avatar-large\">\r\n                {getAvatarInitials()}\r\n              </div>\r\n              <div className=\"user-profile-dropdown-details\">\r\n                <span className=\"user-profile-dropdown-name-large\">{getDisplayName()}</span>\r\n                <span className=\"user-profile-dropdown-role\">{getDisplayRole()}</span>\r\n                <span className=\"user-profile-dropdown-email\">{getUserEmail()}</span>\r\n              </div>\r\n            </div>\r\n           \r\n            <div className=\"user-profile-dropdown-actions\">\r\n              <button\r\n                className=\"user-profile-dropdown-action-btn\"\r\n                onClick={() => setShowChangePassword(true)}\r\n              >\r\n                <i className=\"fas fa-key\"></i>\r\n                Change Password\r\n              </button>\r\n             \r\n              <button\r\n                className=\"user-profile-dropdown-action-btn\"\r\n                onClick={() => setShowChangeUserId(true)}\r\n              >\r\n                <i className=\"fas fa-user-edit\"></i>\r\n                Change User ID\r\n              </button>\r\n             \r\n              <button\r\n                className=\"user-profile-dropdown-action-btn logout\"\r\n                onClick={handleLogout}\r\n              >\r\n                <i className=\"fas fa-sign-out-alt\"></i>\r\n                Logout\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n \r\n  // Render enhanced variant (for desktop with full user info)\r\n  if (variant === 'enhanced') {\r\n    return (\r\n      <div className=\"user-profile-dropdown enhanced\" ref={dropdownRef}>\r\n        <div className=\"enhanced-user-header\">\r\n          <div className=\"user-profile-section\">\r\n            <div className=\"user-profile-info\">\r\n              <div className=\"user-avatar-container\">\r\n                <div className=\"user-avatar-large\">\r\n                  {getAvatarInitials()}\r\n                </div>\r\n                <div className={`user-status-indicator ${getUserStatus()}`}></div>\r\n              </div>\r\n              <div className=\"user-details\">\r\n                <span className=\"user-name-display\">{getDisplayName()}</span>\r\n                <span className=\"user-role-display\">{getDisplayRole()}</span>\r\n                <span className=\"user-email-display\">{getUserEmail()}</span>\r\n              </div>\r\n            </div>\r\n            <div className=\"user-actions\">\r\n              <button\r\n                className=\"header-action-btn\"\r\n                title=\"Notifications\"\r\n                onClick={() => setShowNotifications(true)}\r\n              >\r\n                <i className=\"fas fa-bell\"></i>\r\n                <span className=\"notification-badge\">{notifications.length}</span>\r\n              </button>\r\n              <button\r\n                className=\"header-action-btn\"\r\n                title=\"Settings\"\r\n                onClick={() => setShowSettings(true)}\r\n              >\r\n                <i className=\"fas fa-cog\"></i>\r\n              </button>\r\n              <button\r\n                className=\"header-action-btn\"\r\n                title=\"Help\"\r\n                onClick={() => setShowHelp(true)}\r\n              >\r\n                <i className=\"fas fa-question-circle\"></i>\r\n              </button>\r\n            </div>\r\n          </div>\r\n         \r\n          <div\r\n            className=\"user-profile-trigger\"\r\n            onClick={() => setIsOpen(!isOpen)}\r\n            title=\"User Menu\"\r\n          >\r\n            <i className={`fas fa-chevron-down dropdown-arrow ${isOpen ? 'rotated' : ''}`}></i>\r\n          </div>\r\n        </div>\r\n \r\n        {isOpen && (\r\n          <div className=\"user-dropdown-menu enhanced\">\r\n            <div className=\"dropdown-header\">\r\n              <div className=\"user-avatar-large\">\r\n                {getAvatarInitials()}\r\n              </div>\r\n              <div className=\"user-details\">\r\n                <span className=\"user-name-large\">{getDisplayName()}</span>\r\n                <span className=\"user-role\">{getDisplayRole()}</span>\r\n                <span className=\"user-email\">{getUserEmail()}</span>\r\n              </div>\r\n            </div>\r\n           \r\n            <div className=\"dropdown-actions\">\r\n              <button\r\n                className=\"dropdown-action-btn\"\r\n                onClick={() => setShowChangePassword(true)}\r\n              >\r\n                <i className=\"fas fa-key\"></i>\r\n                Change Password\r\n              </button>\r\n             \r\n              <button\r\n                className=\"dropdown-action-btn\"\r\n                onClick={() => setShowChangeUserId(true)}\r\n              >\r\n                <i className=\"fas fa-user-edit\"></i>\r\n                Change User ID\r\n              </button>\r\n             \r\n              <button\r\n                className=\"dropdown-action-btn\"\r\n                onClick={() => setShowSettings(true)}\r\n              >\r\n                <i className=\"fas fa-cog\"></i>\r\n                Settings\r\n              </button>\r\n             \r\n              <button\r\n                className=\"dropdown-action-btn\"\r\n                onClick={() => setShowHelp(true)}\r\n              >\r\n                <i className=\"fas fa-question-circle\"></i>\r\n                Help & Support\r\n              </button>\r\n             \r\n              <button\r\n                className=\"dropdown-action-btn logout\"\r\n                onClick={handleLogout}\r\n              >\r\n                <i className=\"fas fa-sign-out-alt\"></i>\r\n                Logout\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n \r\n \r\n  // Render default variant (standard dropdown)\r\n  return (\r\n    <div className=\"user-profile-dropdown\" ref={dropdownRef}>\r\n      <div\r\n        className=\"user-profile-trigger\"\r\n        onClick={() => setIsOpen(!isOpen)}\r\n      >\r\n        <div className=\"user-avatar\">\r\n          {getAvatarInitials()}\r\n        </div>\r\n        <div className=\"user-info\">\r\n          <span className=\"user-name\">{getDisplayName()}</span>\r\n          <span className=\"user-role\">{getDisplayRole()}</span>\r\n        </div>\r\n        <i className={`fas fa-chevron-down dropdown-arrow ${isOpen ? 'rotated' : ''}`}></i>\r\n      </div>\r\n \r\n      {isOpen && (\r\n        <div className=\"user-dropdown-menu\">\r\n          <div className=\"dropdown-header\">\r\n            <div className=\"user-avatar-large\">\r\n              {getAvatarInitials()}\r\n            </div>\r\n            <div className=\"user-details\">\r\n              <span className=\"user-name-large\">{getDisplayName()}</span>\r\n              <span className=\"user-role\">{getDisplayRole()}</span>\r\n              <span className=\"user-email\">{getUserEmail()}</span>\r\n            </div>\r\n          </div>\r\n         \r\n          <div className=\"dropdown-actions\">\r\n            <button\r\n              className=\"dropdown-action-btn\"\r\n              onClick={() => setShowChangePassword(true)}\r\n            >\r\n              <i className=\"fas fa-key\"></i>\r\n              Change Password\r\n            </button>\r\n           \r\n            <button\r\n              className=\"dropdown-action-btn\"\r\n              onClick={() => setShowChangeUserId(true)}\r\n            >\r\n              <i className=\"fas fa-user-edit\"></i>\r\n              Change User ID\r\n            </button>\r\n           \r\n            <button\r\n              className=\"dropdown-action-btn logout\"\r\n              onClick={handleLogout}\r\n            >\r\n              <i className=\"fas fa-sign-out-alt\"></i>\r\n              Logout\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n \r\n      {/* Change Password Modal */}\r\n      <ChangePasswordModal\r\n        isOpen={showChangePassword}\r\n        onClose={() => setShowChangePassword(false)}\r\n        onSuccess={() => {\r\n          setNotification({\r\n            type: 'success',\r\n            message: 'Password changed successfully!'\r\n          });\r\n        }}\r\n      />\r\n \r\n      {/* Change User ID Modal */}\r\n      {showChangeUserId && (\r\n        <div className=\"modal-overlay\">\r\n          <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n              <h3>Change User ID</h3>\r\n              <button\r\n                className=\"modal-close\"\r\n                onClick={() => setShowChangeUserId(false)}\r\n              >\r\n                <i className=\"fas fa-times\"></i>\r\n              </button>\r\n            </div>\r\n           \r\n            <form onSubmit={handleChangeUserId}>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"currentUserId\">Current User ID</label>\r\n                <input\r\n                  type=\"text\"\r\n                  id=\"currentUserId\"\r\n                  value={userIdData.currentUserId}\r\n                  onChange={(e) => setUserIdData(prev => ({\r\n                    ...prev,\r\n                    currentUserId: e.target.value\r\n                  }))}\r\n                  required\r\n                />\r\n              </div>\r\n             \r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"newUserId\">New User ID</label>\r\n                <input\r\n                  type=\"text\"\r\n                  id=\"newUserId\"\r\n                  value={userIdData.newUserId}\r\n                  onChange={(e) => setUserIdData(prev => ({\r\n                    ...prev,\r\n                    newUserId: e.target.value\r\n                  }))}\r\n                  required\r\n                />\r\n              </div>\r\n             \r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"confirmUserId\">Confirm New User ID</label>\r\n                <input\r\n                  type=\"text\"\r\n                  id=\"confirmUserId\"\r\n                  value={userIdData.confirmUserId}\r\n                  onChange={(e) => setUserIdData(prev => ({\r\n                    ...prev,\r\n                    confirmUserId: e.target.value\r\n                  }))}\r\n                  required\r\n                />\r\n              </div>\r\n             \r\n              <div className=\"modal-footer\">\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn-secondary\"\r\n                  onClick={() => setShowChangeUserId(false)}\r\n                >\r\n                  Cancel\r\n                </button>\r\n                <button type=\"submit\" className=\"btn-primary\">\r\n                  Change User ID\r\n                </button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      )}\r\n \r\n      {/* Notifications Modal */}\r\n      {showNotifications && (\r\n        <div className=\"modal-overlay\">\r\n          <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n              <h3>Notifications</h3>\r\n              <button\r\n                className=\"modal-close\"\r\n                onClick={() => setShowNotifications(false)}\r\n              >\r\n                <i className=\"fas fa-times\"></i>\r\n              </button>\r\n            </div>\r\n           \r\n            <div className=\"notifications-list\">\r\n              {notifications.map(notification => (\r\n                <div key={notification.id} className={`notification-item ${notification.type}`}>\r\n                  <div className=\"notification-icon\">\r\n                    <i className={`fas fa-${notification.type === 'info' ? 'info-circle' : notification.type === 'warning' ? 'exclamation-triangle' : 'check-circle'}`}></i>\r\n                  </div>\r\n                  <div className=\"notification-content\">\r\n                    <p className=\"notification-message\">{notification.message}</p>\r\n                    <span className=\"notification-time\">{notification.time}</span>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n           \r\n            <div className=\"modal-footer\">\r\n              <button\r\n                className=\"btn-secondary\"\r\n                onClick={() => setShowNotifications(false)}\r\n              >\r\n                Close\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n \r\n      {/* Settings Modal */}\r\n      {showSettings && (\r\n        <div className=\"modal-overlay\">\r\n          <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n              <h3>Settings</h3>\r\n              <button\r\n                className=\"modal-close\"\r\n                onClick={() => setShowSettings(false)}\r\n              >\r\n                <i className=\"fas fa-times\"></i>\r\n              </button>\r\n            </div>\r\n           \r\n            <div className=\"settings-content\">\r\n              <p>Settings functionality coming soon!</p>\r\n            </div>\r\n           \r\n            <div className=\"modal-footer\">\r\n              <button\r\n                className=\"btn-secondary\"\r\n                onClick={() => setShowSettings(false)}\r\n              >\r\n                Close\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n \r\n      {/* Help Modal */}\r\n      {showHelp && (\r\n        <div className=\"modal-overlay\">\r\n          <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n              <h3>Help & Support</h3>\r\n              <button\r\n                className=\"modal-close\"\r\n                onClick={() => setShowHelp(false)}\r\n              >\r\n                <i className=\"fas fa-times\"></i>\r\n              </button>\r\n            </div>\r\n           \r\n            <div className=\"help-content\">\r\n              <p>Help and support functionality coming soon!</p>\r\n            </div>\r\n           \r\n            <div className=\"modal-footer\">\r\n              <button\r\n                className=\"btn-secondary\"\r\n                onClick={() => setShowHelp(false)}\r\n              >\r\n                Close\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Success Notification Toast */}\r\n      {notification && (\r\n        <div className={`notification-toast ${notification.type}`}>\r\n          <div className=\"notification-toast-content\">\r\n            <i className={`fas fa-${notification.type === 'success' ? 'check-circle' : 'info-circle'}`}></i>\r\n            <span>{notification.message}</span>\r\n          </div>\r\n          <button\r\n            className=\"notification-toast-close\"\r\n            onClick={() => setNotification(null)}\r\n          >\r\n            <i className=\"fas fa-times\"></i>\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n \r\nexport default UserProfileDropdown;\r\n ","import React, { useState, useRef, useEffect } from 'react';\r\nimport { useTheme } from '../contexts/ThemeContext';\r\nimport '../styles/ThemeDropdown.css';\r\n\r\nconst ThemeDropdown = ({ className = '' }) => {\r\n  const { currentTheme, changeTheme, getThemeLabel, getAllThemes } = useTheme();\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const dropdownRef = useRef(null);\r\n\r\n  // Close dropdown when clicking outside\r\n  useEffect(() => {\r\n    const handleClickOutside = (event) => {\r\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {\r\n        setIsOpen(false);\r\n      }\r\n    };\r\n\r\n    document.addEventListener('mousedown', handleClickOutside);\r\n    return () => {\r\n      document.removeEventListener('mousedown', handleClickOutside);\r\n    };\r\n  }, []);\r\n\r\n  const handleThemeSelect = (themeValue) => {\r\n    changeTheme(themeValue);\r\n    setIsOpen(false);\r\n  };\r\n\r\n  const toggleDropdown = () => {\r\n    setIsOpen(!isOpen);\r\n  };\r\n\r\n  return (\r\n    <div className={`theme-dropdown ${className}`} ref={dropdownRef}>\r\n      <button \r\n        className=\"theme-selector-btn\"\r\n        onClick={toggleDropdown}\r\n        aria-expanded={isOpen}\r\n        aria-haspopup=\"true\"\r\n      >\r\n        <span className=\"theme-label\">Theme: {getThemeLabel()}</span>\r\n        <span className={`dropdown-arrow ${isOpen ? 'open' : ''}`}>\r\n          <svg width=\"12\" height=\"8\" viewBox=\"0 0 12 8\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n            <path d=\"M1 1.5L6 6.5L11 1.5\" stroke=\"currentColor\" strokeWidth=\"1.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\r\n          </svg>\r\n        </span>\r\n      </button>\r\n\r\n      {isOpen && (\r\n        <div className=\"theme-dropdown-menu\">\r\n          <div className=\"dropdown-header\">\r\n            <span className=\"dropdown-title\">Choose Theme</span>\r\n          </div>\r\n          \r\n          {getAllThemes().map((theme) => (\r\n            <button\r\n              key={theme.value}\r\n              className={`theme-option ${currentTheme === theme.value ? 'selected' : ''}`}\r\n              onClick={() => handleThemeSelect(theme.value)}\r\n            >\r\n              <div className=\"theme-preview\">\r\n                <div className={`theme-preview-colors ${theme.value}`}>\r\n                  <div className=\"color-dot primary\"></div>\r\n                  <div className=\"color-dot secondary\"></div>\r\n                  <div className=\"color-dot accent\"></div>\r\n                </div>\r\n              </div>\r\n              \r\n              <div className=\"theme-info\">\r\n                <span className=\"theme-name\">{theme.label}</span>\r\n                <span className=\"theme-description\">\r\n                  {theme.value === 'modern-clean' && 'Clean and modern design with green accents'}\r\n                  {theme.value === 'traditional-corporate' && 'Professional corporate style with blue tones'}\r\n                  {theme.value === 'modern-minimalist' && 'Minimal design with subtle colors'}\r\n                </span>\r\n              </div>\r\n              \r\n              {currentTheme === theme.value && (\r\n                <div className=\"selected-indicator\">\r\n                  <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                    <path d=\"M13.5 4.5L6 12L2.5 8.5\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\r\n                  </svg>\r\n                </div>\r\n              )}\r\n            </button>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ThemeDropdown;"],"names":["_ref","isOpen","onClose","onSuccess","user","useAuth","formData","setFormData","useState","currentPassword","newPassword","confirmPassword","isLoading","setIsLoading","error","setError","success","setSuccess","handleInputChange","e","name","value","target","prev","handleClose","_jsx","className","children","_jsxs","onClick","disabled","onSubmit","async","preventDefault","length","Promise","resolve","setTimeout","htmlFor","type","id","onChange","placeholder","required","_Fragment","variant","logout","setIsOpen","showChangePassword","setShowChangePassword","showChangeUserId","setShowChangeUserId","showNotifications","setShowNotifications","showSettings","setShowSettings","showHelp","setShowHelp","dropdownRef","useRef","userIdData","setUserIdData","currentUserId","newUserId","confirmUserId","notifications","message","time","notification","setNotification","useEffect","handleClickOutside","event","current","contains","document","addEventListener","removeEventListener","handleLogout","window","location","href","getDisplayName","userName","role","getDisplayRole","replace","getAvatarInitials","displayName","split","map","n","join","toUpperCase","slice","getUserEmail","email","ref","title","ChangePasswordModal","alert","currentTheme","changeTheme","getThemeLabel","getAllThemes","useTheme","toggleDropdown","width","height","viewBox","fill","xmlns","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","theme","handleThemeSelect","themeValue","label"],"sourceRoot":""}