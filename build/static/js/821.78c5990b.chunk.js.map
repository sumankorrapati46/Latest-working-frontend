{"version":3,"file":"static/js/821.78c5990b.chunk.js","mappings":"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","sources":["components/UserProfileDropdown.jsx","components/ThemeDropdown.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport '../styles/Dashboard.css';\r\n \r\nconst UserProfileDropdown = ({ variant = 'default' }) => {\r\n  const { user, logout } = useAuth();\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [showChangePassword, setShowChangePassword] = useState(false);\r\n  const [showChangeUserId, setShowChangeUserId] = useState(false);\r\n  const [showNotifications, setShowNotifications] = useState(false);\r\n  const [showSettings, setShowSettings] = useState(false);\r\n  const [showHelp, setShowHelp] = useState(false);\r\n  const dropdownRef = useRef(null);\r\n \r\n  // Password change form state\r\n  const [passwordData, setPasswordData] = useState({\r\n    currentPassword: '',\r\n    newPassword: '',\r\n    confirmPassword: ''\r\n  });\r\n \r\n  // User ID change form state\r\n  const [userIdData, setUserIdData] = useState({\r\n    currentUserId: '',\r\n    newUserId: '',\r\n    confirmUserId: ''\r\n  });\r\n \r\n  // Notifications state\r\n  const [notifications] = useState([\r\n    { id: 1, type: 'info', message: 'New farmer registration pending approval', time: '2 minutes ago' },\r\n    { id: 2, type: 'warning', message: 'KYC verification overdue for 3 farmers', time: '1 hour ago' },\r\n    { id: 3, type: 'success', message: 'Employee assignment completed successfully', time: '3 hours ago' }\r\n  ]);\r\n \r\n  // Close dropdown when clicking outside\r\n  useEffect(() => {\r\n    const handleClickOutside = (event) => {\r\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {\r\n        setIsOpen(false);\r\n      }\r\n    };\r\n \r\n    document.addEventListener('mousedown', handleClickOutside);\r\n    return () => {\r\n      document.removeEventListener('mousedown', handleClickOutside);\r\n    };\r\n  }, []);\r\n \r\n  // Handle logout\r\n  const handleLogout = () => {\r\n    logout();\r\n    window.location.href = '/login';\r\n  };\r\n \r\n  // Handle password change\r\n  const handleChangePassword = async (e) => {\r\n    e.preventDefault();\r\n   \r\n    if (passwordData.newPassword !== passwordData.confirmPassword) {\r\n      alert('New passwords do not match!');\r\n      return;\r\n    }\r\n \r\n    if (passwordData.newPassword.length < 6) {\r\n      alert('New password must be at least 6 characters long!');\r\n      return;\r\n    }\r\n \r\n    try {\r\n      // Here you would typically make an API call to change password\r\n      alert('Password changed successfully!');\r\n      setShowChangePassword(false);\r\n      setPasswordData({\r\n        currentPassword: '',\r\n        newPassword: '',\r\n        confirmPassword: ''\r\n      });\r\n    } catch (error) {\r\n      alert('Failed to change password. Please try again.');\r\n    }\r\n  };\r\n \r\n  // Handle user ID change\r\n  const handleChangeUserId = async (e) => {\r\n    e.preventDefault();\r\n   \r\n    if (userIdData.newUserId !== userIdData.confirmUserId) {\r\n      alert('New User IDs do not match!');\r\n      return;\r\n    }\r\n \r\n    if (userIdData.newUserId.length < 3) {\r\n      alert('New User ID must be at least 3 characters long!');\r\n      return;\r\n    }\r\n \r\n    try {\r\n      // Here you would typically make an API call to change user ID\r\n      alert('User ID changed successfully!');\r\n      setShowChangeUserId(false);\r\n      setUserIdData({\r\n        currentUserId: '',\r\n        newUserId: '',\r\n        confirmUserId: ''\r\n      });\r\n    } catch (error) {\r\n      alert('Failed to change User ID. Please try again.');\r\n    }\r\n  };\r\n \r\n  // Get user initials for avatar\r\n  const getInitials = (name) => {\r\n    if (!name) return 'U';\r\n    return name.split(' ').map(n => n[0]).join('').toUpperCase().slice(0, 2);\r\n  };\r\n \r\n  // Get display name based on user role and available data\r\n  const getDisplayName = () => {\r\n    if (user?.name) {\r\n      return user.name;\r\n    }\r\n   \r\n    if (user?.userName) {\r\n      const role = user.role || 'USER';\r\n      switch (role) {\r\n        case 'ADMIN':\r\n          return 'Admin User';\r\n        case 'SUPER_ADMIN':\r\n          return 'Super Admin User';\r\n        case 'EMPLOYEE':\r\n          return 'Employee User';\r\n        case 'FARMER':\r\n          return 'Farmer User';\r\n        default:\r\n          return user.userName;\r\n      }\r\n    }\r\n   \r\n    return 'User';\r\n  };\r\n \r\n  // Get display role\r\n  const getDisplayRole = () => {\r\n    if (user?.role) {\r\n      return user.role.replace('_', ' ');\r\n    }\r\n    return 'USER';\r\n  };\r\n \r\n  // Get avatar initials\r\n  const getAvatarInitials = () => {\r\n    const displayName = getDisplayName();\r\n    return getInitials(displayName);\r\n  };\r\n \r\n  // Get user status (online/offline)\r\n  const getUserStatus = () => {\r\n    return 'online'; // You can implement real status logic here\r\n  };\r\n \r\n  // Get user email\r\n  const getUserEmail = () => {\r\n    return user?.email || `${user?.userName || 'user'}@date.com`;\r\n  };\r\n \r\n    // Render compact variant (for mobile or minimal header)\r\n  if (variant === 'compact') {\r\n    return (\r\n      <div className=\"user-profile-dropdown-component compact\" ref={dropdownRef}>\r\n        <div\r\n          className=\"user-profile-dropdown-trigger compact\"\r\n          onClick={() => setIsOpen(!isOpen)}\r\n          title=\"User Menu\"\r\n        >\r\n          <div className=\"user-profile-dropdown-avatar-compact\">\r\n            {getAvatarInitials()}\r\n          </div>\r\n          <i className={`fas fa-chevron-down user-profile-dropdown-arrow ${isOpen ? 'rotated' : ''}`}></i>\r\n        </div>\r\n\r\n        {isOpen && (\r\n          <div className=\"user-profile-dropdown-menu compact\">\r\n            <div className=\"user-profile-dropdown-header\">\r\n              <div className=\"user-profile-dropdown-avatar-large\">\r\n                {getAvatarInitials()}\r\n              </div>\r\n              <div className=\"user-profile-dropdown-details\">\r\n                <span className=\"user-profile-dropdown-name-large\">{getDisplayName()}</span>\r\n                <span className=\"user-profile-dropdown-role\">{getDisplayRole()}</span>\r\n                <span className=\"user-profile-dropdown-email\">{getUserEmail()}</span>\r\n              </div>\r\n            </div>\r\n           \r\n            <div className=\"user-profile-dropdown-actions\">\r\n              <button\r\n                className=\"user-profile-dropdown-action-btn\"\r\n                onClick={() => setShowChangePassword(true)}\r\n              >\r\n                <i className=\"fas fa-key\"></i>\r\n                Change Password\r\n              </button>\r\n             \r\n              <button\r\n                className=\"user-profile-dropdown-action-btn\"\r\n                onClick={() => setShowChangeUserId(true)}\r\n              >\r\n                <i className=\"fas fa-user-edit\"></i>\r\n                Change User ID\r\n              </button>\r\n             \r\n              <button\r\n                className=\"user-profile-dropdown-action-btn logout\"\r\n                onClick={handleLogout}\r\n              >\r\n                <i className=\"fas fa-sign-out-alt\"></i>\r\n                Logout\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n \r\n  // Render enhanced variant (for desktop with full user info)\r\n  if (variant === 'enhanced') {\r\n    return (\r\n      <div className=\"user-profile-dropdown enhanced\" ref={dropdownRef}>\r\n        <div className=\"enhanced-user-header\">\r\n          <div className=\"user-profile-section\">\r\n            <div className=\"user-profile-info\">\r\n              <div className=\"user-avatar-container\">\r\n                <div className=\"user-avatar-large\">\r\n                  {getAvatarInitials()}\r\n                </div>\r\n                <div className={`user-status-indicator ${getUserStatus()}`}></div>\r\n              </div>\r\n              <div className=\"user-details\">\r\n                <span className=\"user-name-display\">{getDisplayName()}</span>\r\n                <span className=\"user-role-display\">{getDisplayRole()}</span>\r\n                <span className=\"user-email-display\">{getUserEmail()}</span>\r\n              </div>\r\n            </div>\r\n            <div className=\"user-actions\">\r\n              <button\r\n                className=\"header-action-btn\"\r\n                title=\"Notifications\"\r\n                onClick={() => setShowNotifications(true)}\r\n              >\r\n                <i className=\"fas fa-bell\"></i>\r\n                <span className=\"notification-badge\">{notifications.length}</span>\r\n              </button>\r\n              <button\r\n                className=\"header-action-btn\"\r\n                title=\"Settings\"\r\n                onClick={() => setShowSettings(true)}\r\n              >\r\n                <i className=\"fas fa-cog\"></i>\r\n              </button>\r\n              <button\r\n                className=\"header-action-btn\"\r\n                title=\"Help\"\r\n                onClick={() => setShowHelp(true)}\r\n              >\r\n                <i className=\"fas fa-question-circle\"></i>\r\n              </button>\r\n            </div>\r\n          </div>\r\n         \r\n          <div\r\n            className=\"user-profile-trigger\"\r\n            onClick={() => setIsOpen(!isOpen)}\r\n            title=\"User Menu\"\r\n          >\r\n            <i className={`fas fa-chevron-down dropdown-arrow ${isOpen ? 'rotated' : ''}`}></i>\r\n          </div>\r\n        </div>\r\n \r\n        {isOpen && (\r\n          <div className=\"user-dropdown-menu enhanced\">\r\n            <div className=\"dropdown-header\">\r\n              <div className=\"user-avatar-large\">\r\n                {getAvatarInitials()}\r\n              </div>\r\n              <div className=\"user-details\">\r\n                <span className=\"user-name-large\">{getDisplayName()}</span>\r\n                <span className=\"user-role\">{getDisplayRole()}</span>\r\n                <span className=\"user-email\">{getUserEmail()}</span>\r\n              </div>\r\n            </div>\r\n           \r\n            <div className=\"dropdown-actions\">\r\n              <button\r\n                className=\"dropdown-action-btn\"\r\n                onClick={() => setShowChangePassword(true)}\r\n              >\r\n                <i className=\"fas fa-key\"></i>\r\n                Change Password\r\n              </button>\r\n             \r\n              <button\r\n                className=\"dropdown-action-btn\"\r\n                onClick={() => setShowChangeUserId(true)}\r\n              >\r\n                <i className=\"fas fa-user-edit\"></i>\r\n                Change User ID\r\n              </button>\r\n             \r\n              <button\r\n                className=\"dropdown-action-btn\"\r\n                onClick={() => setShowSettings(true)}\r\n              >\r\n                <i className=\"fas fa-cog\"></i>\r\n                Settings\r\n              </button>\r\n             \r\n              <button\r\n                className=\"dropdown-action-btn\"\r\n                onClick={() => setShowHelp(true)}\r\n              >\r\n                <i className=\"fas fa-question-circle\"></i>\r\n                Help & Support\r\n              </button>\r\n             \r\n              <button\r\n                className=\"dropdown-action-btn logout\"\r\n                onClick={handleLogout}\r\n              >\r\n                <i className=\"fas fa-sign-out-alt\"></i>\r\n                Logout\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n \r\n \r\n  // Render default variant (standard dropdown)\r\n  return (\r\n    <div className=\"user-profile-dropdown\" ref={dropdownRef}>\r\n      <div\r\n        className=\"user-profile-trigger\"\r\n        onClick={() => setIsOpen(!isOpen)}\r\n      >\r\n        <div className=\"user-avatar\">\r\n          {getAvatarInitials()}\r\n        </div>\r\n        <div className=\"user-info\">\r\n          <span className=\"user-name\">{getDisplayName()}</span>\r\n          <span className=\"user-role\">{getDisplayRole()}</span>\r\n        </div>\r\n        <i className={`fas fa-chevron-down dropdown-arrow ${isOpen ? 'rotated' : ''}`}></i>\r\n      </div>\r\n \r\n      {isOpen && (\r\n        <div className=\"user-dropdown-menu\">\r\n          <div className=\"dropdown-header\">\r\n            <div className=\"user-avatar-large\">\r\n              {getAvatarInitials()}\r\n            </div>\r\n            <div className=\"user-details\">\r\n              <span className=\"user-name-large\">{getDisplayName()}</span>\r\n              <span className=\"user-role\">{getDisplayRole()}</span>\r\n              <span className=\"user-email\">{getUserEmail()}</span>\r\n            </div>\r\n          </div>\r\n         \r\n          <div className=\"dropdown-actions\">\r\n            <button\r\n              className=\"dropdown-action-btn\"\r\n              onClick={() => setShowChangePassword(true)}\r\n            >\r\n              <i className=\"fas fa-key\"></i>\r\n              Change Password\r\n            </button>\r\n           \r\n            <button\r\n              className=\"dropdown-action-btn\"\r\n              onClick={() => setShowChangeUserId(true)}\r\n            >\r\n              <i className=\"fas fa-user-edit\"></i>\r\n              Change User ID\r\n            </button>\r\n           \r\n            <button\r\n              className=\"dropdown-action-btn logout\"\r\n              onClick={handleLogout}\r\n            >\r\n              <i className=\"fas fa-sign-out-alt\"></i>\r\n              Logout\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n \r\n      {/* Change Password Modal */}\r\n      {showChangePassword && (\r\n        <div className=\"modal-overlay\">\r\n          <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n              <h3>Change Password</h3>\r\n              <button\r\n                className=\"modal-close\"\r\n                onClick={() => setShowChangePassword(false)}\r\n              >\r\n                <i className=\"fas fa-times\"></i>\r\n              </button>\r\n            </div>\r\n           \r\n            <form onSubmit={handleChangePassword}>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"currentPassword\">Current Password</label>\r\n                <input\r\n                  type=\"password\"\r\n                  id=\"currentPassword\"\r\n                  value={passwordData.currentPassword}\r\n                  onChange={(e) => setPasswordData(prev => ({\r\n                    ...prev,\r\n                    currentPassword: e.target.value\r\n                  }))}\r\n                  required\r\n                />\r\n              </div>\r\n             \r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"newPassword\">New Password</label>\r\n                <input\r\n                  type=\"password\"\r\n                  id=\"newPassword\"\r\n                  value={passwordData.newPassword}\r\n                  onChange={(e) => setPasswordData(prev => ({\r\n                    ...prev,\r\n                    newPassword: e.target.value\r\n                  }))}\r\n                  required\r\n                />\r\n              </div>\r\n             \r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"confirmPassword\">Confirm New Password</label>\r\n                <input\r\n                  type=\"password\"\r\n                  id=\"confirmPassword\"\r\n                  value={passwordData.confirmPassword}\r\n                  onChange={(e) => setPasswordData(prev => ({\r\n                    ...prev,\r\n                    confirmPassword: e.target.value\r\n                  }))}\r\n                  required\r\n                />\r\n              </div>\r\n             \r\n              <div className=\"modal-footer\">\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn-secondary\"\r\n                  onClick={() => setShowChangePassword(false)}\r\n                >\r\n                  Cancel\r\n                </button>\r\n                <button type=\"submit\" className=\"btn-primary\">\r\n                  Change Password\r\n                </button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      )}\r\n \r\n      {/* Change User ID Modal */}\r\n      {showChangeUserId && (\r\n        <div className=\"modal-overlay\">\r\n          <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n              <h3>Change User ID</h3>\r\n              <button\r\n                className=\"modal-close\"\r\n                onClick={() => setShowChangeUserId(false)}\r\n              >\r\n                <i className=\"fas fa-times\"></i>\r\n              </button>\r\n            </div>\r\n           \r\n            <form onSubmit={handleChangeUserId}>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"currentUserId\">Current User ID</label>\r\n                <input\r\n                  type=\"text\"\r\n                  id=\"currentUserId\"\r\n                  value={userIdData.currentUserId}\r\n                  onChange={(e) => setUserIdData(prev => ({\r\n                    ...prev,\r\n                    currentUserId: e.target.value\r\n                  }))}\r\n                  required\r\n                />\r\n              </div>\r\n             \r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"newUserId\">New User ID</label>\r\n                <input\r\n                  type=\"text\"\r\n                  id=\"newUserId\"\r\n                  value={userIdData.newUserId}\r\n                  onChange={(e) => setUserIdData(prev => ({\r\n                    ...prev,\r\n                    newUserId: e.target.value\r\n                  }))}\r\n                  required\r\n                />\r\n              </div>\r\n             \r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"confirmUserId\">Confirm New User ID</label>\r\n                <input\r\n                  type=\"text\"\r\n                  id=\"confirmUserId\"\r\n                  value={userIdData.confirmUserId}\r\n                  onChange={(e) => setUserIdData(prev => ({\r\n                    ...prev,\r\n                    confirmUserId: e.target.value\r\n                  }))}\r\n                  required\r\n                />\r\n              </div>\r\n             \r\n              <div className=\"modal-footer\">\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn-secondary\"\r\n                  onClick={() => setShowChangeUserId(false)}\r\n                >\r\n                  Cancel\r\n                </button>\r\n                <button type=\"submit\" className=\"btn-primary\">\r\n                  Change User ID\r\n                </button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      )}\r\n \r\n      {/* Notifications Modal */}\r\n      {showNotifications && (\r\n        <div className=\"modal-overlay\">\r\n          <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n              <h3>Notifications</h3>\r\n              <button\r\n                className=\"modal-close\"\r\n                onClick={() => setShowNotifications(false)}\r\n              >\r\n                <i className=\"fas fa-times\"></i>\r\n              </button>\r\n            </div>\r\n           \r\n            <div className=\"notifications-list\">\r\n              {notifications.map(notification => (\r\n                <div key={notification.id} className={`notification-item ${notification.type}`}>\r\n                  <div className=\"notification-icon\">\r\n                    <i className={`fas fa-${notification.type === 'info' ? 'info-circle' : notification.type === 'warning' ? 'exclamation-triangle' : 'check-circle'}`}></i>\r\n                  </div>\r\n                  <div className=\"notification-content\">\r\n                    <p className=\"notification-message\">{notification.message}</p>\r\n                    <span className=\"notification-time\">{notification.time}</span>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n           \r\n            <div className=\"modal-footer\">\r\n              <button\r\n                className=\"btn-secondary\"\r\n                onClick={() => setShowNotifications(false)}\r\n              >\r\n                Close\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n \r\n      {/* Settings Modal */}\r\n      {showSettings && (\r\n        <div className=\"modal-overlay\">\r\n          <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n              <h3>Settings</h3>\r\n              <button\r\n                className=\"modal-close\"\r\n                onClick={() => setShowSettings(false)}\r\n              >\r\n                <i className=\"fas fa-times\"></i>\r\n              </button>\r\n            </div>\r\n           \r\n            <div className=\"settings-content\">\r\n              <p>Settings functionality coming soon!</p>\r\n            </div>\r\n           \r\n            <div className=\"modal-footer\">\r\n              <button\r\n                className=\"btn-secondary\"\r\n                onClick={() => setShowSettings(false)}\r\n              >\r\n                Close\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n \r\n      {/* Help Modal */}\r\n      {showHelp && (\r\n        <div className=\"modal-overlay\">\r\n          <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n              <h3>Help & Support</h3>\r\n              <button\r\n                className=\"modal-close\"\r\n                onClick={() => setShowHelp(false)}\r\n              >\r\n                <i className=\"fas fa-times\"></i>\r\n              </button>\r\n            </div>\r\n           \r\n            <div className=\"help-content\">\r\n              <p>Help and support functionality coming soon!</p>\r\n            </div>\r\n           \r\n            <div className=\"modal-footer\">\r\n              <button\r\n                className=\"btn-secondary\"\r\n                onClick={() => setShowHelp(false)}\r\n              >\r\n                Close\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n \r\nexport default UserProfileDropdown;\r\n ","import React, { useState, useRef, useEffect } from 'react';\r\nimport { useTheme } from '../contexts/ThemeContext';\r\nimport '../styles/ThemeDropdown.css';\r\n\r\nconst ThemeDropdown = ({ className = '' }) => {\r\n  const { currentTheme, changeTheme, getThemeLabel, getAllThemes } = useTheme();\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const dropdownRef = useRef(null);\r\n\r\n  // Close dropdown when clicking outside\r\n  useEffect(() => {\r\n    const handleClickOutside = (event) => {\r\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {\r\n        setIsOpen(false);\r\n      }\r\n    };\r\n\r\n    document.addEventListener('mousedown', handleClickOutside);\r\n    return () => {\r\n      document.removeEventListener('mousedown', handleClickOutside);\r\n    };\r\n  }, []);\r\n\r\n  const handleThemeSelect = (themeValue) => {\r\n    changeTheme(themeValue);\r\n    setIsOpen(false);\r\n  };\r\n\r\n  const toggleDropdown = () => {\r\n    setIsOpen(!isOpen);\r\n  };\r\n\r\n  return (\r\n    <div className={`theme-dropdown ${className}`} ref={dropdownRef}>\r\n      <button \r\n        className=\"theme-selector-btn\"\r\n        onClick={toggleDropdown}\r\n        aria-expanded={isOpen}\r\n        aria-haspopup=\"true\"\r\n      >\r\n        <span className=\"theme-label\">Theme: {getThemeLabel()}</span>\r\n        <span className={`dropdown-arrow ${isOpen ? 'open' : ''}`}>\r\n          <svg width=\"12\" height=\"8\" viewBox=\"0 0 12 8\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n            <path d=\"M1 1.5L6 6.5L11 1.5\" stroke=\"currentColor\" strokeWidth=\"1.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\r\n          </svg>\r\n        </span>\r\n      </button>\r\n\r\n      {isOpen && (\r\n        <div className=\"theme-dropdown-menu\">\r\n          <div className=\"dropdown-header\">\r\n            <span className=\"dropdown-title\">Choose Theme</span>\r\n          </div>\r\n          \r\n          {getAllThemes().map((theme) => (\r\n            <button\r\n              key={theme.value}\r\n              className={`theme-option ${currentTheme === theme.value ? 'selected' : ''}`}\r\n              onClick={() => handleThemeSelect(theme.value)}\r\n            >\r\n              <div className=\"theme-preview\">\r\n                <div className={`theme-preview-colors ${theme.value}`}>\r\n                  <div className=\"color-dot primary\"></div>\r\n                  <div className=\"color-dot secondary\"></div>\r\n                  <div className=\"color-dot accent\"></div>\r\n                </div>\r\n              </div>\r\n              \r\n              <div className=\"theme-info\">\r\n                <span className=\"theme-name\">{theme.label}</span>\r\n                <span className=\"theme-description\">\r\n                  {theme.value === 'modern-clean' && 'Clean and modern design with green accents'}\r\n                  {theme.value === 'traditional-corporate' && 'Professional corporate style with blue tones'}\r\n                  {theme.value === 'modern-minimalist' && 'Minimal design with subtle colors'}\r\n                </span>\r\n              </div>\r\n              \r\n              {currentTheme === theme.value && (\r\n                <div className=\"selected-indicator\">\r\n                  <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                    <path d=\"M13.5 4.5L6 12L2.5 8.5\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\r\n                  </svg>\r\n                </div>\r\n              )}\r\n            </button>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ThemeDropdown;"],"names":["_ref","variant","user","logout","useAuth","isOpen","setIsOpen","useState","showChangePassword","setShowChangePassword","showChangeUserId","setShowChangeUserId","showNotifications","setShowNotifications","showSettings","setShowSettings","showHelp","setShowHelp","dropdownRef","useRef","passwordData","setPasswordData","currentPassword","newPassword","confirmPassword","userIdData","setUserIdData","currentUserId","newUserId","confirmUserId","notifications","id","type","message","time","useEffect","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","handleLogout","window","location","href","getDisplayName","name","userName","role","getDisplayRole","replace","getAvatarInitials","displayName","split","map","n","join","toUpperCase","slice","getUserEmail","email","_jsxs","className","ref","children","onClick","title","_jsx","length","onSubmit","async","e","preventDefault","alert","error","htmlFor","value","onChange","prev","required","notification","currentTheme","changeTheme","getThemeLabel","getAllThemes","useTheme","toggleDropdown","width","height","viewBox","fill","xmlns","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","theme","handleThemeSelect","themeValue","label"],"sourceRoot":""}