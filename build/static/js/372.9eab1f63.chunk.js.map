{"version":3,"file":"static/js/372.9eab1f63.chunk.js","mappings":"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","sources":["api/apiService.js","pages/RegistrationForm.jsx"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Create axios instance\r\nconst api = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8080/api',\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor to add auth token\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor for error handling\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('user');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Authentication API calls\r\nexport const authAPI = {\r\n  // Login\r\n  login: async (credentials) => {\r\n    const response = await api.post('/auth/login', credentials);\r\n    return response.data;\r\n  },\r\n\r\n  // Get user profile\r\n  getProfile: async () => {\r\n    const response = await api.get('/auth/profile');\r\n    return response.data;\r\n  },\r\n\r\n  // Register user\r\n  register: async (userData) => {\r\n    const response = await api.post('/auth/register', userData);\r\n    return response.data;\r\n  },\r\n\r\n  // Send OTP\r\n  sendOTP: async (email) => {\r\n    const response = await api.post('/auth/send-otp', { emailOrPhone: email });\r\n    return response.data;\r\n  },\r\n\r\n  // Verify OTP\r\n  verifyOTP: async (otpData) => {\r\n    const response = await api.post('/auth/verify-otp', { \r\n      emailOrPhone: otpData.email, \r\n      otp: otpData.otp \r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Resend OTP\r\n  resendOTP: async (email) => {\r\n    const response = await api.post('/auth/resend-otp', { emailOrPhone: email });\r\n    return response.data;\r\n  },\r\n\r\n  // Forgot password\r\n  forgotPassword: async (emailOrPhone) => {\r\n    const response = await api.post('/auth/forgot-password', { emailOrPhone });\r\n    return response.data;\r\n  },\r\n\r\n  // Forgot user ID\r\n  forgotUserId: async (emailOrPhone) => {\r\n    const response = await api.post('/auth/forgot-user-id', { emailOrPhone });\r\n    return response.data;\r\n  },\r\n\r\n  // Reset password\r\n  resetPassword: async (resetData) => {\r\n    const response = await api.post('/auth/reset-password', resetData);\r\n    return response.data;\r\n  },\r\n\r\n  // Change password\r\n  changePassword: async (passwordData) => {\r\n    const response = await api.post('/auth/change-password', passwordData);\r\n    return response.data;\r\n  },\r\n\r\n  // Change user ID\r\n  changeUserId: async (userIdData) => {\r\n    const response = await api.post('/auth/change-user-id', userIdData);\r\n    return response.data;\r\n  },\r\n\r\n  // Get countries\r\n  getCountries: async () => {\r\n    const response = await api.get('/auth/countries');\r\n    return response.data;\r\n  },\r\n\r\n  // Get states\r\n  getStates: async (countryId) => {\r\n    const response = await api.post('/auth/states', { countryId });\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// Super Admin API calls\r\nexport const superAdminAPI = {\r\n  // Get all users (registrations)\r\n  getAllUsers: async () => {\r\n    const response = await api.get('/super-admin/registration-list');\r\n    return response.data;\r\n  },\r\n\r\n  // Get registration list with filters\r\n  getRegistrationList: async (filters = {}) => {\r\n    const response = await api.get('/super-admin/registration-list', { params: filters });\r\n    return response.data;\r\n  },\r\n\r\n  // Get registration list by status\r\n  getRegistrationListByStatus: async (status) => {\r\n    const response = await api.get('/super-admin/registration-list/filter', { params: { status } });\r\n    return response.data;\r\n  },\r\n\r\n  // Search registrations\r\n  searchRegistrations: async (query) => {\r\n    const response = await api.get('/super-admin/registration-list/search', { params: { query } });\r\n    return response.data;\r\n  },\r\n\r\n  // Get pending registrations\r\n  getPendingRegistrations: async () => {\r\n    const response = await api.get('/super-admin/pending-registrations');\r\n    return response.data;\r\n  },\r\n\r\n  // Get approved users\r\n  getApprovedUsers: async () => {\r\n    const response = await api.get('/super-admin/approved-users');\r\n    return response.data;\r\n  },\r\n\r\n  // Get users by role\r\n  getUsersByRole: async (role) => {\r\n    const response = await api.get(`/super-admin/users/by-role/${role}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get pending users by role\r\n  getPendingUsersByRole: async (role) => {\r\n    const response = await api.get(`/super-admin/pending-users/by-role/${role}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Approve user\r\n  approveUser: async (userId, role) => {\r\n    const response = await api.put(`/auth/users/${userId}/approve`, { role });\r\n    return response.data;\r\n  },\r\n\r\n  // Reject user (update status to REJECTED)\r\n  rejectUser: async (userId, reason) => {\r\n    const response = await api.put(`/auth/users/${userId}/status`, { status: 'REJECTED' });\r\n    return response.data;\r\n  },\r\n\r\n  // Delete user\r\n  deleteUser: async (userId) => {\r\n    const response = await api.delete(`/super-admin/users/${userId}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Update user\r\n  updateUser: async (userId, userData) => {\r\n    const response = await api.put(`/super-admin/users/${userId}`, userData);\r\n    return response.data;\r\n  },\r\n\r\n  // Update user status\r\n  updateUserStatus: async (userId, status) => {\r\n    const response = await api.put(`/auth/users/${userId}/status`, { status });\r\n    return response.data;\r\n  },\r\n\r\n  // Get dashboard stats\r\n  getDashboardStats: async () => {\r\n    const response = await api.get('/super-admin/dashboard/stats');\r\n    return response.data;\r\n  },\r\n\r\n  // Bulk assign farmers to employee\r\n  bulkAssignFarmers: async (farmerIds, employeeId) => {\r\n    const response = await api.post('/super-admin/bulk-assign-farmers', { farmerIds, employeeId });\r\n    return response.data;\r\n  },\r\n\r\n  // Single assign farmer to employee (fallback)\r\n  assignFarmer: async (farmerId, employeeId) => {\r\n    const response = await api.post('/super-admin/assign-farmer', null, { \r\n      params: { farmerId, employeeId } \r\n    });\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// Farmers API calls\r\nexport const farmersAPI = {\r\n  // Get all farmers\r\n  getAllFarmers: async (filters = {}) => {\r\n    const response = await api.get('/super-admin/farmers', { params: filters });\r\n    return response.data;\r\n  },\r\n\r\n  // Get farmer by ID\r\n  getFarmerById: async (id) => {\r\n    const response = await api.get(`/super-admin/farmers/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Create farmer\r\n  createFarmer: async (farmerData) => {\r\n    const response = await api.post('/super-admin/farmers', farmerData);\r\n    return response.data;\r\n  },\r\n\r\n  // Update farmer\r\n  updateFarmer: async (id, farmerData) => {\r\n    const response = await api.put(`/super-admin/farmers/${id}`, farmerData);\r\n    return response.data;\r\n  },\r\n\r\n  // Delete farmer\r\n  deleteFarmer: async (id) => {\r\n    const response = await api.delete(`/super-admin/farmers/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Assign farmer to employee\r\n  assignFarmer: async (farmerId, employeeId) => {\r\n    const response = await api.post(`/super-admin/farmers/${farmerId}/assign`, { employeeId });\r\n    return response.data;\r\n  },\r\n\r\n  // Get farmer statistics\r\n  getFarmerStats: async () => {\r\n    const response = await api.get('/super-admin/farmers/stats');\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// Admin-specific API calls\r\nexport const adminAPI = {\r\n  // Get all farmers for admin\r\n  getAllFarmers: async (filters = {}) => {\r\n    const response = await api.get('/admin/farmers', { params: filters });\r\n    return response.data;\r\n  },\r\n\r\n  // Get all employees for admin\r\n  getAllEmployees: async (filters = {}) => {\r\n    const response = await api.get('/admin/employees', { params: filters });\r\n    return response.data;\r\n  },\r\n\r\n  // Get farmers with KYC status\r\n  getFarmersWithKyc: async () => {\r\n    const response = await api.get('/admin/farmers-with-kyc');\r\n    return response.data;\r\n  },\r\n\r\n  // Get employees with stats\r\n  getEmployeesWithStats: async () => {\r\n    const response = await api.get('/admin/employees-with-stats');\r\n    return response.data;\r\n  },\r\n\r\n  // Get farmers by employee\r\n  getFarmersByEmployee: async (employeeId) => {\r\n    const response = await api.get(`/admin/employees/${employeeId}/assigned-farmers`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get todo list for admin\r\n  getTodoList: async () => {\r\n    const response = await api.get('/admin/todo-list');\r\n    return response.data;\r\n  },\r\n\r\n  // Get enhanced todo list\r\n  getEnhancedTodoList: async () => {\r\n    const response = await api.get('/admin/enhanced-todo-list');\r\n    return response.data;\r\n  },\r\n\r\n  // Get dashboard stats\r\n  getDashboardStats: async () => {\r\n    const response = await api.get('/admin/dashboard-stats');\r\n    return response.data;\r\n  },\r\n\r\n  // Filter farmers\r\n  filterFarmers: async (filters = {}) => {\r\n    const response = await api.get('/admin/farmers/filter', { params: filters });\r\n    return response.data;\r\n  },\r\n\r\n  // Get locations\r\n  getLocations: async () => {\r\n    const response = await api.get('/admin/locations');\r\n    return response.data;\r\n  },\r\n\r\n  // Bulk assign farmers to employee\r\n  bulkAssignFarmers: async (farmerIds, employeeId) => {\r\n    const response = await api.post('/admin/bulk-assign-farmers', { farmerIds, employeeId });\r\n    return response.data;\r\n  },\r\n\r\n  // Single assign farmer to employee (fallback)\r\n  assignFarmer: async (farmerId, employeeId) => {\r\n    const response = await api.post('/admin/assign-farmer', null, { \r\n      params: { farmerId, employeeId } \r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Get assignment history\r\n  getAssignmentHistory: async (filters = {}) => {\r\n    const response = await api.get('/admin/assignment-history', { params: filters });\r\n    return response.data;\r\n  },\r\n\r\n  // Get farmers by assignment status\r\n  getFarmersByAssignmentStatus: async (assignmentStatus) => {\r\n    const response = await api.get('/admin/farmers/by-assignment-status', { \r\n      params: { assignmentStatus } \r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Get all registrations for admin\r\n  getAllRegistrations: async (filters = {}) => {\r\n    const response = await api.get('/admin/registration-list', { params: filters });\r\n    return response.data;\r\n  },\r\n\r\n  // Get registration list by status for admin\r\n  getRegistrationListByStatus: async (status) => {\r\n    const response = await api.get('/admin/registration-list/filter', { params: { status } });\r\n    return response.data;\r\n  },\r\n\r\n  // Approve registration for admin\r\n  approveRegistration: async (registrationId, approvalData) => {\r\n    const response = await api.post(`/admin/registrations/${registrationId}/approve`, approvalData);\r\n    return response.data;\r\n  },\r\n\r\n  // Reject registration for admin\r\n  rejectRegistration: async (registrationId, rejectionData) => {\r\n    const response = await api.post(`/admin/registrations/${registrationId}/reject`, rejectionData);\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// Employees API calls (for Super Admin and Admin)\r\nexport const employeesAPI = {\r\n  // Get all employees\r\n  getAllEmployees: async (filters = {}) => {\r\n    const response = await api.get('/super-admin/employees', { params: filters });\r\n    return response.data;\r\n  },\r\n\r\n  // Get employee by ID\r\n  getEmployeeById: async (id) => {\r\n    const response = await api.get(`/super-admin/employees/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Create employee\r\n  createEmployee: async (employeeData) => {\r\n    const response = await api.post('/super-admin/employees', employeeData);\r\n    return response.data;\r\n  },\r\n\r\n  // Update employee\r\n  updateEmployee: async (id, employeeData) => {\r\n    const response = await api.put(`/super-admin/employees/${id}`, employeeData);\r\n    return response.data;\r\n  },\r\n\r\n  // Delete employee\r\n  deleteEmployee: async (id) => {\r\n    const response = await api.delete(`/super-admin/employees/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get assigned farmers for employee\r\n  getAssignedFarmers: async (employeeId) => {\r\n    const response = await api.get(`/super-admin/employees/${employeeId}/assigned-farmers`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get employee statistics\r\n  getEmployeeStats: async () => {\r\n    const response = await api.get('/super-admin/employees/stats');\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// Employee-specific API calls (for Employee role)\r\nexport const employeeAPI = {\r\n  // Get assigned farmers for current employee\r\n  getAssignedFarmers: async (employeeId) => {\r\n    try {\r\n      console.log('🔄 Fetching assigned farmers from dashboard endpoint');\r\n      const response = await api.get('/employees/dashboard/assigned-farmers');\r\n      console.log('✅ Success with dashboard endpoint');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('❌ Failed to fetch assigned farmers:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get employee profile\r\n  getProfile: async () => {\r\n    const response = await api.get('/employees/profile');\r\n    return response.data;\r\n  },\r\n\r\n  // Update employee profile\r\n  updateProfile: async (profileData) => {\r\n    const response = await api.put('/employees/profile', profileData);\r\n    return response.data;\r\n  },\r\n\r\n  // Get employee statistics\r\n  getStats: async () => {\r\n    const response = await api.get('/employees/stats');\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// Registrations API calls\r\nexport const registrationsAPI = {\r\n  // Get all registrations\r\n  getAllRegistrations: async (filters = {}) => {\r\n    const response = await api.get('/registrations', { params: filters });\r\n    return response.data;\r\n  },\r\n\r\n  // Get registration by ID\r\n  getRegistrationById: async (id) => {\r\n    const response = await api.get(`/registrations/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Approve registration\r\n  approveRegistration: async (id, approvalData) => {\r\n    const response = await api.post(`/registrations/${id}/approve`, approvalData);\r\n    return response.data;\r\n  },\r\n\r\n  // Reject registration\r\n  rejectRegistration: async (id, rejectionData) => {\r\n    const response = await api.post(`/registrations/${id}/reject`, rejectionData);\r\n    return response.data;\r\n  },\r\n\r\n  // Get registration statistics\r\n  getRegistrationStats: async () => {\r\n    const response = await api.get('/registrations/stats');\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// KYC API calls\r\nexport const kycAPI = {\r\n  // Upload KYC documents\r\n  uploadDocuments: async (farmerId, documents) => {\r\n    const formData = new FormData();\r\n    Object.keys(documents).forEach(key => {\r\n      if (documents[key]) {\r\n        formData.append(key, documents[key]);\r\n      }\r\n    });\r\n    \r\n    const response = await api.post(`/employees/kyc/${farmerId}/upload`, formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Approve KYC\r\n  approveKYC: async (farmerId, approvalData) => {\r\n    const response = await api.put(`/employees/kyc/approve/${farmerId}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Reject KYC\r\n  rejectKYC: async (farmerId, rejectionData) => {\r\n    const response = await api.put(`/employees/kyc/reject/${farmerId}`, {\r\n      reason: rejectionData.reason || 'KYC rejected'\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Refer back KYC\r\n  referBackKYC: async (farmerId, referBackData) => {\r\n    const response = await api.put(`/employees/kyc/refer-back/${farmerId}`, {\r\n      reason: referBackData.reason || 'KYC referred back'\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Get KYC status\r\n  getKYCStatus: async (farmerId) => {\r\n    const response = await api.get(`/employees/kyc/${farmerId}/status`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get KYC documents\r\n  getKYCDocuments: async (farmerId) => {\r\n    const response = await api.get(`/employees/kyc/${farmerId}/documents`);\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// Dashboard API calls\r\nexport const dashboardAPI = {\r\n  // Get dashboard statistics\r\n  getDashboardStats: async () => {\r\n    const response = await api.get('/dashboard/stats');\r\n    return response.data;\r\n  },\r\n\r\n  // Get admin dashboard data\r\n  getAdminDashboardData: async () => {\r\n    const response = await api.get('/dashboard/admin');\r\n    return response.data;\r\n  },\r\n\r\n  // Get super admin dashboard data\r\n  getSuperAdminDashboardData: async () => {\r\n    const response = await api.get('/dashboard/super-admin');\r\n    return response.data;\r\n  },\r\n\r\n  // Get employee dashboard data\r\n  getEmployeeDashboardData: async (employeeId) => {\r\n    const response = await api.get(`/dashboard/employee/${employeeId}`);\r\n    return response.data;\r\n  }\r\n};\r\n\r\nexport default api; ","import React, { useEffect, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport { authAPI } from '../api/apiService';\nimport { Link, useLocation } from 'react-router-dom';\nimport logo from '../assets/rightlogo.png';\nimport '../styles/Login.css';\n\n// Update Yup schema for password validation\nconst schema = yup.object().shape({\n  name: yup.string().required('Name is required'),\n  dateOfBirth: yup\n    .string()\n    .required('Date of Birth is required')\n    .test('age-range', 'Age must be between 18 and 90 years', function (value) {\n      if (!value) return false;\n      const dob = new Date(value);\n      const today = new Date();\n      const ageDifMs = today - dob;\n      const ageDate = new Date(ageDifMs);\n      const age = Math.abs(ageDate.getUTCFullYear() - 1970);\n      return age >= 18 && age <= 90;\n    }),\n  gender: yup.string().required('Gender is required'),\n  email: yup.string()\n    .required('Email is required')\n    .matches(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, 'Email must include @ and be valid'),\n  phoneNumber: yup\n    .string()\n    .matches(/^\\d{10}$/, 'Enter a valid 10-digit phone number')\n    .required('Phone number is required'),\n  role: yup.string().required('Role is required'),\n  password: yup\n    .string()\n    .required('Password is required')\n    .min(8, 'Password must be at least 8 characters')\n    .matches(/[A-Z]/, 'Password must contain at least one uppercase letter')\n    .matches(/[a-z]/, 'Password must contain at least one lowercase letter')\n    .matches(/[0-9]/, 'Password must contain at least one number')\n    .matches(/[@$!%*?&#^()_+\\-=[\\]{};':\"\\\\|,.<>/?]/, 'Password must contain at least one special character'),\n});\n\nconst RegistrationForm = () => {\n  const location = useLocation();\n  const initialRole = location.state?.role || '';\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm({\n    resolver: yupResolver(schema),\n    defaultValues: { role: initialRole },\n  });\n\n  const [emailValue, setEmailValue] = useState('');\n  const [otpSent, setOtpSent] = useState(false);\n  const [otp, setOtp] = useState('');\n  const [emailVerified, setEmailVerified] = useState(false);\n  const [resendTimer, setResendTimer] = useState(0);\n\n  useEffect(() => {\n    if (!resendTimer) return;\n    const timer = setTimeout(() => setResendTimer((t) => t - 1), 1000);\n    return () => clearTimeout(timer);\n  }, [resendTimer]);\n\n  const handleSendOTP = async () => {\n    if (!emailValue.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/)) {\n      alert('Enter a valid email first');\n      return;\n    }\n    try {\n      await authAPI.sendOTP(emailValue);\n      setOtpSent(true);\n      setResendTimer(30);\n      alert('OTP sent');\n    } catch (e) {\n      alert(e.response?.data?.message || 'Failed to send OTP');\n      console.error(e);\n    }\n  };\n   \n  // ✅ Handle Verify OTP\n  const handleVerifyOTP = async () => {\n    try {\n      await authAPI.verifyOTP({\n        email: emailValue,\n        otp: otp,\n      });\n      alert(\"Email verified successfully!\");\n      setEmailVerified(true);\n    } catch (error) {\n      alert(\"OTP verification error.\");\n      console.error(error);\n    }\n  };\n\n  // ✅ Final Registration Submission to backend\n  const onSubmit = async (data) => {\n    if (!emailVerified) {\n      alert('Please verify your email before submitting.');\n      return;\n    }\n\n    try {\n      console.log('Submitting registration data:', data);\n      const response = await authAPI.register(data);\n      console.log('Registration successful:', response);\n      \n      // Show success message with approval notice\n      alert('Registration successful! Please wait for admin approval. You will receive an email with login credentials once approved.');\n      \n      // Reset form\n      reset();\n      setEmailVerified(false);\n      setOtpSent(false);\n      setEmailValue('');\n      setOtp('');\n      \n      // Don't navigate to login - user needs to wait for approval\n    } catch (error) {\n      console.error('Registration error:', error);\n      alert('Registration failed. Please try again.');\n    }\n  };\n\n  return (\n    <div className=\"login-page-container\">\n      <div className=\"login-page-main-content\">\n        {/* Left Section - Information Panel */}\n        <div className=\"login-page-info-panel\">\n          <div className=\"login-page-brand-header\">\n            <div className=\"login-page-brand-logo\">\n              <span className=\"login-page-brand-text\">Date</span>\n              <span className=\"login-page-brand-accent\">Agri</span>\n              <span className=\"login-page-brand-icon\">🌿</span>\n              <span className=\"login-page-brand-text\">Stack</span>\n            </div>\n            <h1 className=\"login-page-main-title\">India Farmer Registry</h1>\n          </div>\n\n          <div className=\"login-page-platform-info\">\n            <h2>Join Our Platform</h2>\n            <p className=\"login-page-tagline\">Become part of India's agricultural revolution</p>\n          </div>\n\n          {/* Feature Highlights */}\n          <div className=\"login-page-features-grid\">\n            <div className=\"login-page-feature-card\">\n              <div className=\"login-page-feature-icon\">🚀</div>\n              <div className=\"login-page-feature-content\">\n                <h3>Quick Registration</h3>\n                <p>Get started in minutes with our streamlined signup process</p>\n              </div>\n            </div>\n\n            <div className=\"login-page-feature-card\">\n              <div className=\"login-page-feature-icon\">🔒</div>\n              <div className=\"login-page-feature-content\">\n                <h3>Secure Verification</h3>\n                <p>Email verification ensures your account security</p>\n              </div>\n            </div>\n\n            <div className=\"login-page-feature-card\">\n              <div className=\"login-page-feature-icon\">📋</div>\n              <div className=\"login-page-feature-content\">\n                <h3>Easy Profile Setup</h3>\n                <p>Simple form to create your personalized account</p>\n              </div>\n            </div>\n\n            <div className=\"login-page-feature-card\">\n              <div className=\"login-page-feature-icon\">⚡</div>\n              <div className=\"login-page-feature-content\">\n                <h3>Instant Access</h3>\n                <p>Start using platform features immediately after approval</p>\n              </div>\n            </div>\n\n            <div className=\"login-page-feature-card\">\n              <div className=\"login-page-feature-icon\">🎯</div>\n              <div className=\"login-page-feature-content\">\n                <h3>Tailored Experience</h3>\n                <p>Customized dashboard based on your role and needs</p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Right Section - Registration Form */}\n        <div className=\"login-page-form-section\">\n          <div className=\"login-page-card\">\n            {/* DATE Logo at Top */}\n            <div className=\"login-page-date-logo-section\">\n              <img src={logo} alt=\"DATE Logo\" className=\"login-page-date-logo\" />\n              <div className=\"login-page-date-text\">\n                <h3>Digital Agristack Transaction Enterprises</h3>\n                <p>Empowering Agricultural Excellence</p>\n              </div>\n            </div>\n\n            {/* Form Title Section */}\n            <div className=\"login-page-login-type-section\">\n              <h3>Registration Form</h3>\n              <p>Enter your details to get started</p>\n            </div>\n\n            {/* Registration Form */}\n            <form onSubmit={handleSubmit(onSubmit)} className=\"login-page-form\">\n              {/* Role Field (Hidden) */}\n              <input type=\"hidden\" {...register('role')} value={initialRole} />\n              \n              {/* Role Display (if provided) */}\n              {initialRole && (\n                <div className=\"login-page-form-field\">\n                  <label>Role</label>\n                  <input \n                    type=\"text\" \n                    value={initialRole} \n                    readOnly \n                    className=\"login-page-form-input role-field\" \n                  />\n                </div>\n              )}\n\n              {/* Form Fields Grid Layout */}\n              <div className=\"form-fields-grid\">\n                {/* Row 1: Name and Gender */}\n                <div className=\"form-row\">\n                  <div className=\"login-page-form-field\">\n                    <label>Name <span className=\"required\">*</span></label>\n                    <input \n                      type=\"text\" \n                      {...register('name')} \n                      className={`login-page-form-input ${errors.name ? 'error' : ''}`}\n                      placeholder=\"Enter your first name\"\n                    />\n                    {errors.name && <span className=\"error-message\">{errors.name.message}</span>}\n                  </div>\n\n                  <div className=\"login-page-form-field\">\n                    <label>Gender <span className=\"required\">*</span></label>\n                    <select \n                      {...register('gender')} \n                      className={`login-page-form-input ${errors.gender ? 'error' : ''}`}\n                    >\n                      <option value=\"\">Select gender</option>\n                      <option value=\"Male\">Male</option>\n                      <option value=\"Female\">Female</option>\n                      <option value=\"Other\">Other</option>\n                    </select>\n                    {errors.gender && <span className=\"error-message\">{errors.gender.message}</span>}\n                  </div>\n                </div>\n\n                {/* Row 2: Date of Birth and Phone Number */}\n                <div className=\"form-row\">\n                  <div className=\"login-page-form-field\">\n                    <label>Date of Birth <span className=\"required\">*</span></label>\n                    <input\n                      type=\"date\"\n                      {...register('dateOfBirth')}\n                      className={`login-page-form-input ${errors.dateOfBirth ? 'error' : ''}`}\n                    />\n                    {errors.dateOfBirth && <span className=\"error-message\">{errors.dateOfBirth.message}</span>}\n                  </div>\n\n                  <div className=\"login-page-form-field\">\n                    <label>Phone Number <span className=\"required\">*</span></label>\n                    <input \n                      type=\"text\" \n                      {...register('phoneNumber')} \n                      className={`login-page-form-input ${errors.phoneNumber ? 'error' : ''}`}\n                      placeholder=\"Enter 10-digit number\"\n                    />\n                    {errors.phoneNumber && <span className=\"error-message\">{errors.phoneNumber.message}</span>}\n                  </div>\n                </div>\n\n                {/* Row 3: Email and Password */}\n                <div className=\"form-row\">\n                  <div className=\"login-page-form-field\">\n                    <label>Email Address <span className=\"required\">*</span></label>\n                    <input\n                      type=\"email\"\n                      {...register('email')}\n                      value={emailValue}\n                      onChange={(e) => {\n                        setEmailValue(e.target.value);\n                        setOtpSent(false);\n                        setEmailVerified(false);\n                      }}\n                      className={`login-page-form-input ${errors.email ? 'error' : ''}`}\n                      placeholder=\"Enter your email\"\n                    />\n                    {errors.email && <span className=\"error-message\">{errors.email.message}</span>}\n                  </div>\n\n                  <div className=\"login-page-form-field\">\n                    <label>Password <span className=\"required\">*</span></label>\n                    <input\n                      type=\"password\"\n                      {...register('password')}\n                      className={`login-page-form-input ${errors.password ? 'error' : ''}`}\n                      placeholder=\"Enter a strong password\"\n                      autoComplete=\"new-password\"\n                    />\n                    {errors.password && <span className=\"error-message\">{errors.password.message}</span>}\n                  </div>\n                </div>\n              </div>\n\n              {/* Email Verification Section */}\n              <div className=\"email-verification\">\n                {(!otpSent && !emailVerified) && (\n                  <button\n                    type=\"button\"\n                    onClick={handleSendOTP}\n                    className=\"login-page-login-btn\"\n                  >\n                    Send OTP\n                  </button>\n                )}\n                \n                {(otpSent && !emailVerified) && (\n                  <div className=\"otp-section\">\n                    <input\n                      type=\"text\"\n                      placeholder=\"Enter OTP\"\n                      value={otp}\n                      onChange={(e) => setOtp(e.target.value)}\n                      className=\"login-page-form-input\"\n                    />\n                    <div className=\"otp-buttons\">\n                      <button\n                        type=\"button\"\n                        onClick={handleSendOTP}\n                        className=\"login-page-create-account-btn\"\n                        disabled={resendTimer > 0}\n                      >\n                        {resendTimer > 0 ? `Resend (${resendTimer}s)` : 'Resend'}\n                      </button>\n                      <button\n                        type=\"button\"\n                        onClick={handleVerifyOTP}\n                        className=\"login-page-login-btn\"\n                      >\n                        Verify\n                      </button>\n                    </div>\n                  </div>\n                )}\n                \n                {emailVerified && (\n                  <div className=\"verification-success\">\n                    <span className=\"success-icon\">✓</span>\n                    Email Verified\n                  </div>\n                )}\n              </div>\n\n              {/* Submit Button */}\n              <div className=\"login-page-actions-row\">\n                <button type=\"submit\" className=\"login-page-login-btn\">\n                  Register Now\n                </button>\n              </div>\n\n              {/* Login Link */}\n              <div className=\"login-link\">\n                <p>Already have an account? <Link to=\"/login\">Sign In</Link></p>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RegistrationForm; "],"names":["api","axios","create","baseURL","process","REACT_APP_API_URL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","authAPI","login","async","post","credentials","data","getProfile","get","register","userData","sendOTP","emailOrPhone","email","verifyOTP","otpData","otp","resendOTP","forgotPassword","forgotUserId","resetPassword","resetData","changePassword","passwordData","changeUserId","userIdData","getCountries","getStates","countryId","superAdminAPI","getAllUsers","getRegistrationList","filters","arguments","length","undefined","params","getRegistrationListByStatus","searchRegistrations","query","getPendingRegistrations","getApprovedUsers","getUsersByRole","role","getPendingUsersByRole","approveUser","userId","put","rejectUser","reason","deleteUser","delete","updateUser","updateUserStatus","getDashboardStats","bulkAssignFarmers","farmerIds","employeeId","assignFarmer","farmerId","farmersAPI","getAllFarmers","getFarmerById","id","createFarmer","farmerData","updateFarmer","deleteFarmer","getFarmerStats","adminAPI","getAllEmployees","getFarmersWithKyc","getEmployeesWithStats","getFarmersByEmployee","getTodoList","getEnhancedTodoList","filterFarmers","getLocations","getAssignmentHistory","getFarmersByAssignmentStatus","assignmentStatus","getAllRegistrations","approveRegistration","registrationId","approvalData","rejectRegistration","rejectionData","employeesAPI","getEmployeeById","createEmployee","employeeData","updateEmployee","deleteEmployee","getAssignedFarmers","getEmployeeStats","employeeAPI","console","log","updateProfile","profileData","getStats","kycAPI","uploadDocuments","documents","formData","FormData","Object","keys","forEach","key","append","approveKYC","rejectKYC","referBackKYC","referBackData","getKYCStatus","getKYCDocuments","schema","yup","shape","name","required","dateOfBirth","test","value","dob","Date","today","ageDate","age","Math","abs","getUTCFullYear","gender","matches","phoneNumber","password","min","RegistrationForm","_location$state","initialRole","useLocation","state","handleSubmit","reset","formState","errors","useForm","resolver","yupResolver","defaultValues","emailValue","setEmailValue","useState","otpSent","setOtpSent","setOtp","emailVerified","setEmailVerified","resendTimer","setResendTimer","useEffect","timer","setTimeout","t","clearTimeout","handleSendOTP","match","alert","e","_e$response","_e$response$data","message","_jsx","className","children","_jsxs","src","logo","alt","onSubmit","type","readOnly","placeholder","onChange","target","autoComplete","onClick","disabled","Link","to"],"sourceRoot":""}