{"version":3,"file":"static/js/416.1f814ad4.chunk.js","mappings":"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","sources":["components/DataFetchTest.jsx","pages/AdminDashboard.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { adminAPI, superAdminAPI } from '../api/apiService';\r\n\r\nconst DataFetchTest = () => {\r\n  const [testResults, setTestResults] = useState({});\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const runTests = async () => {\r\n    setLoading(true);\r\n    const results = {};\r\n\r\n    try {\r\n      // Test 1: Admin API - Get Farmers\r\n      console.log('🧪 Testing Admin API - Get Farmers...');\r\n      try {\r\n        const farmers = await adminAPI.getFarmersWithKyc();\r\n        results.farmers = {\r\n          success: true,\r\n          count: farmers?.length || 0,\r\n          data: farmers?.slice(0, 2) || [] // Show first 2 records\r\n        };\r\n        console.log('✅ Farmers API Success:', farmers?.length, 'records');\r\n      } catch (error) {\r\n        results.farmers = {\r\n          success: false,\r\n          error: error.message\r\n        };\r\n        console.log('❌ Farmers API Failed:', error.message);\r\n      }\r\n\r\n      // Test 2: Admin API - Get Employees\r\n      console.log('🧪 Testing Admin API - Get Employees...');\r\n      try {\r\n        const employees = await adminAPI.getEmployeesWithStats();\r\n        results.employees = {\r\n          success: true,\r\n          count: employees?.length || 0,\r\n          data: employees?.slice(0, 2) || []\r\n        };\r\n        console.log('✅ Employees API Success:', employees?.length, 'records');\r\n      } catch (error) {\r\n        results.employees = {\r\n          success: false,\r\n          error: error.message\r\n        };\r\n        console.log('❌ Employees API Failed:', error.message);\r\n      }\r\n\r\n      // Test 3: Super Admin API - Get Registrations\r\n      console.log('🧪 Testing Super Admin API - Get Registrations...');\r\n      try {\r\n        const registrations = await superAdminAPI.getRegistrationList();\r\n        results.registrations = {\r\n          success: true,\r\n          count: registrations?.length || 0,\r\n          data: registrations?.slice(0, 2) || []\r\n        };\r\n        console.log('✅ Registrations API Success:', registrations?.length, 'records');\r\n      } catch (error) {\r\n        results.registrations = {\r\n          success: false,\r\n          error: error.message\r\n        };\r\n        console.log('❌ Registrations API Failed:', error.message);\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('❌ Test suite failed:', error);\r\n    }\r\n\r\n    setTestResults(results);\r\n    setLoading(false);\r\n  };\r\n\r\n  const isUsingRealData = () => {\r\n    return Object.values(testResults).some(result => \r\n      result.success && result.count > 0\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div style={{ \r\n      padding: '20px', \r\n      border: '2px solid #ccc', \r\n      borderRadius: '8px', \r\n      margin: '20px',\r\n      backgroundColor: '#f9f9f9'\r\n    }}>\r\n      <h2>🔍 Data Fetch Test Component</h2>\r\n      <p>This component helps verify if your app is fetching real data from the backend.</p>\r\n      \r\n      <button \r\n        onClick={runTests}\r\n        disabled={loading}\r\n        style={{\r\n          padding: '10px 20px',\r\n          backgroundColor: '#007bff',\r\n          color: 'white',\r\n          border: 'none',\r\n          borderRadius: '4px',\r\n          cursor: loading ? 'not-allowed' : 'pointer'\r\n        }}\r\n      >\r\n        {loading ? 'Running Tests...' : 'Run API Tests'}\r\n      </button>\r\n\r\n      {Object.keys(testResults).length > 0 && (\r\n        <div style={{ marginTop: '20px' }}>\r\n          <h3>Test Results:</h3>\r\n          \r\n          <div style={{ \r\n            padding: '10px', \r\n            backgroundColor: isUsingRealData() ? '#d4edda' : '#f8d7da',\r\n            border: `1px solid ${isUsingRealData() ? '#c3e6cb' : '#f5c6cb'}`,\r\n            borderRadius: '4px',\r\n            marginBottom: '15px'\r\n          }}>\r\n            <strong>Status: </strong>\r\n            {isUsingRealData() ? '✅ Using Real Data' : '❌ Using Mock Data or API Failed'}\r\n          </div>\r\n\r\n          {Object.entries(testResults).map(([key, result]) => (\r\n            <div key={key} style={{ \r\n              marginBottom: '10px',\r\n              padding: '10px',\r\n              border: `1px solid ${result.success ? '#c3e6cb' : '#f5c6cb'}`,\r\n              borderRadius: '4px',\r\n              backgroundColor: result.success ? '#d4edda' : '#f8d7da'\r\n            }}>\r\n              <h4>{key.charAt(0).toUpperCase() + key.slice(1)} API:</h4>\r\n              {result.success ? (\r\n                <div>\r\n                  <p>✅ Success: {result.count} records found</p>\r\n                  {result.data.length > 0 && (\r\n                    <details>\r\n                      <summary>Sample Data (first 2 records)</summary>\r\n                      <pre style={{ \r\n                        backgroundColor: '#f8f9fa', \r\n                        padding: '10px', \r\n                        borderRadius: '4px',\r\n                        fontSize: '12px',\r\n                        overflow: 'auto'\r\n                      }}>\r\n                        {JSON.stringify(result.data, null, 2)}\r\n                      </pre>\r\n                    </details>\r\n                  )}\r\n                </div>\r\n              ) : (\r\n                <p>❌ Failed: {result.error}</p>\r\n              )}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n\r\n      <div style={{ marginTop: '20px', fontSize: '14px', color: '#666' }}>\r\n        <h4>How to interpret results:</h4>\r\n        <ul>\r\n          <li><strong>✅ Success with data:</strong> Real data is being fetched from backend</li>\r\n          <li><strong>✅ Success with 0 records:</strong> API works but no data in database</li>\r\n          <li><strong>❌ Failed:</strong> Backend not running or API endpoint doesn't exist</li>\r\n        </ul>\r\n        \r\n        <h4>Next steps:</h4>\r\n        <ul>\r\n          <li>Make sure your backend server is running on port 8080</li>\r\n          <li>Check browser console for detailed error messages</li>\r\n          <li>Verify API endpoints in Network tab of Developer Tools</li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DataFetchTest;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport { farmersAPI, employeesAPI, adminAPI, superAdminAPI } from '../api/apiService';\r\nimport '../styles/Dashboard.css';\r\nimport FarmerForm from '../components/FarmerForm';\r\nimport FarmerRegistrationForm from '../components/FarmerRegistrationForm';\r\nimport EmployeeRegistrationForm from '../components/EmployeeRegistrationForm';\r\nimport AssignmentModal from '../components/AssignmentModal';\r\nimport KYCDocumentUpload from '../components/KYCDocumentUpload';\r\nimport ViewFarmerRegistrationDetails from '../components/ViewFarmerRegistrationDetails';\r\nimport ViewEditEmployeeDetails from '../components/ViewEditEmployeeDetails';\r\nimport StatsCard from '../components/StatsCard';\r\nimport DataTable from '../components/DataTable';\r\nimport UserProfileDropdown from '../components/UserProfileDropdown';\r\nimport ThemeDropdown from '../components/ThemeDropdown';\r\nimport RegistrationApprovalModal from '../components/RegistrationApprovalModal';\r\nimport RegistrationDetailModal from '../components/RegistrationDetailModal';\r\nimport ChangePasswordModal from '../components/ChangePasswordModal';\r\nimport ChangeUserIdModal from '../components/ChangeUserIdModal';\r\nimport DataFetchTest from '../components/DataFetchTest';\r\n\r\nconst AdminDashboard = () => {\r\n  const navigate = useNavigate();\r\n  const { user, logout } = useAuth();\r\n  const [activeTab, setActiveTab] = useState('overview');\r\n  const [farmers, setFarmers] = useState([]);\r\n  const [employees, setEmployees] = useState([]);\r\n  const [selectedEmployee, setSelectedEmployee] = useState('');\r\n  const [showAssignmentModal, setShowAssignmentModal] = useState(false);\r\n  const [showFarmerForm, setShowFarmerForm] = useState(false);\r\n  const [showEmployeeForm, setShowEmployeeForm] = useState(false);\r\n  const [showFarmerDetails, setShowFarmerDetails] = useState(false);\r\n  const [selectedFarmerData, setSelectedFarmerData] = useState(null);\r\n  const [showEmployeeDetails, setShowEmployeeDetails] = useState(false);\r\n  const [selectedEmployeeData, setSelectedEmployeeData] = useState(null);\r\n  const [showKYCDocumentUpload, setShowKYCDocumentUpload] = useState(false);\r\n  const [selectedFarmerForKYC, setSelectedFarmerForKYC] = useState(null);\r\n  const [editingFarmer, setEditingFarmer] = useState(null);\r\n  const [editingEmployee, setEditingEmployee] = useState(null);\r\n  const [registrations, setRegistrations] = useState([]);\r\n  const [showRegistrationModal, setShowRegistrationModal] = useState(false);\r\n  const [selectedRegistration, setSelectedRegistration] = useState(null);\r\n  const [showRegistrationDetailModal, setShowRegistrationDetailModal] = useState(false);\r\n  const [selectedRegistrationForDetail, setSelectedRegistrationForDetail] = useState(null);\r\n  const [showEmployeeRegistration, setShowEmployeeRegistration] = useState(false);\r\n  const [showFarmerRegistration, setShowFarmerRegistration] = useState(false);\r\n  const [registrationFilters, setRegistrationFilters] = useState({\r\n    role: '',\r\n    status: ''\r\n  });\r\n  const [filters, setFilters] = useState({\r\n    state: '',\r\n    district: '',\r\n    region: '',\r\n    kycStatus: '',\r\n    assignmentStatus: '',\r\n    employeeFilter: ''\r\n  });\r\n  const [showUserDropdown, setShowUserDropdown] = useState(false);\r\n  const [showViewFarmer, setShowViewFarmer] = useState(false);\r\n  const [showViewEmployee, setShowViewEmployee] = useState(false);\r\n  const [selectedFarmerForView, setSelectedFarmerForView] = useState(null);\r\n  const [selectedEmployeeForView, setSelectedEmployeeForView] = useState(null);\r\n  const [showPendingKYC, setShowPendingKYC] = useState(false);\r\n  const [showChangePassword, setShowChangePassword] = useState(false);\r\n  const [showChangeUserId, setShowChangeUserId] = useState(false);\r\n  const [notification, setNotification] = useState(null);\r\n\r\n  // Greeting function based on time of day\r\n  const getGreeting = () => {\r\n    const hour = new Date().getHours();\r\n    if (hour >= 5 && hour < 12) {\r\n      return 'Good Morning';\r\n    } else if (hour >= 12 && hour < 17) {\r\n      return 'Good Afternoon';\r\n    } else if (hour >= 17 && hour < 21) {\r\n      return 'Good Evening';\r\n    } else {\r\n      return 'Good Night';\r\n    }\r\n  };\r\n\r\n  // Load data from API\r\n  useEffect(() => {\r\n    fetchData();\r\n    \r\n    // Listen for KYC status updates from Employee Dashboard\r\n    const handleKYCUpdate = (event) => {\r\n      console.log('🔄 Admin Dashboard: KYC status updated, refreshing data...');\r\n      console.log('📊 KYC Update details:', event.detail);\r\n      // Wait 2 seconds for backend to update, then refresh\r\n      setTimeout(() => {\r\n        console.log('🔄 Refreshing Admin data after KYC update...');\r\n        fetchData();\r\n      }, 2000);\r\n    };\r\n    \r\n    window.addEventListener('kycStatusUpdated', handleKYCUpdate);\r\n    \r\n    return () => {\r\n      window.removeEventListener('kycStatusUpdated', handleKYCUpdate);\r\n    };\r\n  }, []);\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      console.log('🔍 Admin: Starting to fetch real data from API...');\r\n      \r\n      // Fetch farmers, employees, and registrations from API using admin endpoints\r\n      const [farmersData, employeesData, registrationsData] = await Promise.all([\r\n        adminAPI.getFarmersWithKyc(),\r\n        adminAPI.getEmployeesWithStats(),\r\n        superAdminAPI.getRegistrationList()\r\n      ]);\r\n      \r\n      console.log('✅ Admin API Response:', { \r\n        farmersCount: farmersData?.length || 0,\r\n        employeesCount: employeesData?.length || 0,\r\n        registrationsCount: registrationsData?.length || 0\r\n      });\r\n      \r\n      // Use real data from APIs\r\n      setFarmers(farmersData || []);\r\n      setEmployees(employeesData || []);\r\n      setRegistrations(registrationsData || []);\r\n      \r\n      console.log('✅ Admin: Using real data from APIs');\r\n      console.log('- Farmers:', farmersData?.length || 0, 'records');\r\n      console.log('- Employees:', employeesData?.length || 0, 'records');\r\n      console.log('- Registrations:', registrationsData?.length || 0, 'records');\r\n      \r\n    } catch (error) {\r\n      console.error('❌ Admin error fetching data:', error);\r\n      console.log('❌ Using fallback endpoints due to API error');\r\n      \r\n      // Try basic admin endpoints as fallback\r\n      try {\r\n        const [fallbackFarmers, fallbackEmployees, fallbackRegistrations] = await Promise.all([\r\n          adminAPI.getAllFarmers(),\r\n          adminAPI.getAllEmployees(),\r\n          superAdminAPI.getRegistrationList()\r\n        ]);\r\n        \r\n        console.log('✅ Fallback API Response:', {\r\n          farmersCount: fallbackFarmers?.length || 0,\r\n          employeesCount: fallbackEmployees?.length || 0,\r\n          registrationsCount: fallbackRegistrations?.length || 0\r\n        });\r\n        \r\n        setFarmers(fallbackFarmers || []);\r\n        setEmployees(fallbackEmployees || []);\r\n        setRegistrations(fallbackRegistrations || []);\r\n        \r\n      } catch (fallbackError) {\r\n        console.error('❌ Fallback API also failed:', fallbackError);\r\n        // Set empty arrays if all APIs fail\r\n        setFarmers([]);\r\n        setEmployees([]);\r\n        setRegistrations([]);\r\n      }\r\n    }\r\n  };\r\n\r\n  const loadMockData = () => {\r\n    const mockFarmers = [\r\n      {\r\n        id: 1,\r\n        name: 'Ramu Yadav',\r\n        phone: '9876543210',\r\n        state: 'Telangana',\r\n        district: 'Karimnagar',\r\n        region: 'Southern',\r\n        kycStatus: 'PENDING',\r\n        assignmentStatus: 'ASSIGNED',\r\n        assignedEmployee: 'harish reddy',\r\n        assignedDate: '2024-01-15'\r\n      },\r\n      {\r\n        id: 2,\r\n        name: 'Krishna Kumar',\r\n        phone: '9983733210',\r\n        state: 'Andhrapradesh',\r\n        district: 'rangareddy',\r\n        region: 'Southern',\r\n        kycStatus: 'PENDING',\r\n        assignmentStatus: 'ASSIGNED',\r\n        assignedEmployee: 'harish reddy',\r\n        assignedDate: '2024-01-18'\r\n      },\r\n      {\r\n        id: 3,\r\n        name: 'suman kurrapati',\r\n        phone: '9783733210',\r\n        state: 'Andhrapradesh',\r\n        district: 'kadapa',\r\n        region: 'Southern',\r\n        kycStatus: 'NOT_STARTED',\r\n        assignmentStatus: 'ASSIGNED',\r\n        assignedEmployee: 'harish reddy',\r\n        assignedDate: '2024-01-10'\r\n      },\r\n      {\r\n        id: 4,\r\n        name: 'vamsi krishna',\r\n        phone: '9783733210',\r\n        state: 'Andhrapradesh',\r\n        district: 'kadapa',\r\n        region: 'Southern',\r\n        kycStatus: 'NOT_STARTED',\r\n        assignmentStatus: 'ASSIGNED',\r\n        assignedEmployee: 'harish reddy',\r\n        assignedDate: '2024-01-20'\r\n      },\r\n      {\r\n        id: 5,\r\n        name: 'hari kumar chowdary',\r\n        phone: '6271979190',\r\n        state: 'Andhrapradesh',\r\n        district: 'Kadapa',\r\n        region: 'Southern',\r\n        kycStatus: 'NOT_STARTED',\r\n        assignmentStatus: 'ASSIGNED',\r\n        assignedEmployee: 'harish reddy',\r\n        assignedDate: '2024-01-25'\r\n      },\r\n      {\r\n        id: 6,\r\n        name: 'kumar sreenu chowdary',\r\n        phone: '6302949363',\r\n        state: 'Andhrapradesh',\r\n        district: 'kadpaa',\r\n        region: 'Southern',\r\n        kycStatus: 'NOT_STARTED',\r\n        assignmentStatus: 'ASSIGNED',\r\n        assignedEmployee: 'karthik kumar',\r\n        assignedDate: '2024-01-12'\r\n      },\r\n      {\r\n        id: 7,\r\n        name: 'Ainash kumar',\r\n        phone: '9798433210',\r\n        state: 'Andhrapradesh',\r\n        district: 'Kuppam',\r\n        region: 'Southern',\r\n        kycStatus: 'NOT_STARTED',\r\n        assignmentStatus: 'ASSIGNED',\r\n        assignedEmployee: 'harish reddy',\r\n        assignedDate: '2024-01-12'\r\n      }\r\n    ];\r\n\r\n    const mockEmployees = [\r\n      {\r\n        id: 1,\r\n        name: 'John Doe',\r\n        phone: '9876543201',\r\n        email: 'john.doe@company.com',\r\n        designation: 'KYC Officer',\r\n        state: 'Maharashtra',\r\n        district: 'Pune',\r\n        region: 'Western',\r\n        status: 'ACTIVE',\r\n        assignedFarmersCount: 15,\r\n        kycStats: {\r\n          approved: 8,\r\n          pending: 5,\r\n          referBack: 2,\r\n          rejected: 0\r\n        }\r\n      },\r\n      {\r\n        id: 2,\r\n        name: 'Jane Smith',\r\n        phone: '9876543202',\r\n        email: 'jane.smith@company.com',\r\n        designation: 'KYC Officer',\r\n        state: 'Gujarat',\r\n        district: 'Ahmedabad',\r\n        region: 'Western',\r\n        status: 'ACTIVE',\r\n        assignedFarmersCount: 12,\r\n        kycStats: {\r\n          approved: 6,\r\n          pending: 4,\r\n          referBack: 1,\r\n          rejected: 1\r\n        }\r\n      },\r\n      {\r\n        id: 3,\r\n        name: 'Mike Johnson',\r\n        phone: '9876543203',\r\n        email: 'mike.johnson@company.com',\r\n        designation: 'KYC Officer',\r\n        state: 'Punjab',\r\n        district: 'Amritsar',\r\n        region: 'Northern',\r\n        status: 'ACTIVE',\r\n        assignedFarmersCount: 8,\r\n        kycStats: {\r\n          approved: 5,\r\n          pending: 2,\r\n          referBack: 1,\r\n          rejected: 0\r\n        }\r\n      },\r\n      {\r\n        id: 4,\r\n        name: 'Sarah Wilson',\r\n        phone: '9876543204',\r\n        email: 'sarah.wilson@company.com',\r\n        designation: 'KYC Officer',\r\n        state: 'Karnataka',\r\n        district: 'Bangalore',\r\n        region: 'Southern',\r\n        status: 'ACTIVE',\r\n        assignedFarmersCount: 0,\r\n        kycStats: {\r\n          approved: 0,\r\n          pending: 0,\r\n          referBack: 0,\r\n          rejected: 0\r\n        }\r\n      }\r\n    ];\r\n\r\n    setFarmers(mockFarmers);\r\n    setEmployees(mockEmployees);\r\n  };\r\n\r\n  const loadMockRegistrationData = () => {\r\n    const mockRegistrations = [\r\n      {\r\n        id: 1,\r\n        name: 'Ramu Yadav',\r\n        email: 'ramu.yadav@example.com',\r\n        phoneNumber: '9876543210',\r\n        role: 'FARMER',\r\n        status: 'PENDING',\r\n        createdAt: '2024-01-15',\r\n        documents: ['Aadhar Card', 'PAN Card'],\r\n        kycStatus: 'PENDING'\r\n      },\r\n      {\r\n        id: 2,\r\n        name: 'Krishna Kumar',\r\n        email: 'krishna.kumar@example.com',\r\n        phoneNumber: '9983733210',\r\n        role: 'FARMER',\r\n        status: 'PENDING',\r\n        createdAt: '2024-01-14',\r\n        documents: ['Aadhar Card', 'PAN Card'],\r\n        kycStatus: 'PENDING'\r\n      },\r\n      {\r\n        id: 3,\r\n        name: 'Jane Smith',\r\n        email: 'jane.smith@example.com',\r\n        phoneNumber: '9876543211',\r\n        role: 'EMPLOYEE',\r\n        status: 'APPROVED',\r\n        createdAt: '2024-01-14',\r\n        documents: ['Aadhar Card', 'PAN Card', 'Educational Certificate'],\r\n        kycStatus: 'APPROVED'\r\n      },\r\n      {\r\n        id: 4,\r\n        name: 'Bob Wilson',\r\n        email: 'bob.wilson@example.com',\r\n        phoneNumber: '9876543212',\r\n        role: 'FARMER',\r\n        status: 'REJECTED',\r\n        createdAt: '2024-01-13',\r\n        documents: ['Aadhar Card'],\r\n        kycStatus: 'REJECTED',\r\n        rejectionReason: 'Incomplete documentation'\r\n      }\r\n    ];\r\n    setRegistrations(mockRegistrations);\r\n  };\r\n\r\n  const getFilteredFarmers = () => {\r\n    return (farmers || []).filter(farmer => {\r\n      const matchesState = !filters.state || farmer.state === filters.state;\r\n      const matchesDistrict = !filters.district || farmer.district === filters.district;\r\n      const matchesKycStatus = !filters.kycStatus || farmer.kycStatus === filters.kycStatus;\r\n      const matchesEmployee = !filters.employeeFilter || farmer.assignedEmployee === filters.employeeFilter;\r\n      \r\n      return matchesState && matchesDistrict && matchesKycStatus && matchesEmployee;\r\n    });\r\n  };\r\n\r\n  const getFilteredEmployees = () => {\r\n    return (employees || []).filter(employee => {\r\n      const matchesDistrict = !filters.district || employee.district === filters.district;\r\n      return matchesDistrict;\r\n    });\r\n  };\r\n\r\n  const getFilteredRegistrations = () => {\r\n    console.log('🔍 All registrations:', registrations);\r\n    console.log('🔍 Sample registration structure:', registrations[0]);\r\n    \r\n    // Apply filters\r\n    const filtered = (registrations || []).filter(registration => {\r\n      const roleMatch = !registrationFilters.role || registration.role === registrationFilters.role;\r\n      const statusMatch = !registrationFilters.status || registration.status === registrationFilters.status;\r\n      return roleMatch && statusMatch;\r\n    });\r\n    console.log('✅ Filtered registrations:', filtered);\r\n    return filtered;\r\n  };\r\n\r\n  const handleViewRegistration = (registration) => {\r\n    setSelectedRegistrationForDetail(registration);\r\n    setShowRegistrationDetailModal(true);\r\n  };\r\n\r\n  const handleCloseRegistrationDetailModal = () => {\r\n    setShowRegistrationDetailModal(false);\r\n    setSelectedRegistrationForDetail(null);\r\n  };\r\n\r\n  const handleRegistrationUpdate = () => {\r\n    // Refresh the registration data\r\n    fetchData();\r\n  };\r\n\r\n  const handleApproveRegistration = async (registrationId) => {\r\n    try {\r\n      await superAdminAPI.approveUser(registrationId, 'FARMER'); // Default role, can be updated\r\n      setRegistrations(prev => prev.map(reg => \r\n        reg.id === registrationId ? { ...reg, status: 'APPROVED' } : reg\r\n      ));\r\n      alert('Registration approved successfully!');\r\n    } catch (error) {\r\n      console.error('Error approving registration:', error);\r\n      alert('Failed to approve registration. Please try again.');\r\n    }\r\n  };\r\n\r\n  const handleRejectRegistration = async (registrationId) => {\r\n    try {\r\n      await superAdminAPI.rejectUser(registrationId, 'Rejected by Admin');\r\n      setRegistrations(prev => prev.map(reg => \r\n        reg.id === registrationId ? { ...reg, status: 'REJECTED' } : reg\r\n      ));\r\n      alert('Registration rejected successfully!');\r\n    } catch (error) {\r\n      console.error('Error rejecting registration:', error);\r\n      alert('Failed to reject registration. Please try again.');\r\n    }\r\n  };\r\n\r\n  const getStats = () => {\r\n    const totalFarmers = farmers?.length || 0;\r\n    const totalEmployees = employees?.length || 0;\r\n    const unassignedFarmers = (farmers || []).filter(f => !f.assignedEmployee || f.assignedEmployee === 'Not Assigned').length;\r\n    \r\n    // Handle different KYC status formats\r\n    const pendingKYC = (farmers || []).filter(f => \r\n      f.kycStatus === 'PENDING' || f.kycStatus === 'pending' || \r\n      f.kycStatus === 'NOT_STARTED' || f.kycStatus === 'not_started'\r\n    ).length;\r\n    \r\n    const approvedKYC = (farmers || []).filter(f => \r\n      f.kycStatus === 'APPROVED' || f.kycStatus === 'approved'\r\n    ).length;\r\n    \r\n    const referBackKYC = (farmers || []).filter(f => \r\n      f.kycStatus === 'REFER_BACK' || f.kycStatus === 'refer_back'\r\n    ).length;\r\n    \r\n    const rejectedKYC = (farmers || []).filter(f => \r\n      f.kycStatus === 'REJECTED' || f.kycStatus === 'rejected'\r\n    ).length;\r\n\r\n    console.log('Admin Stats calculated from real data:');\r\n    console.log('- Total Farmers:', totalFarmers);\r\n    console.log('- Total Employees:', totalEmployees);\r\n    console.log('- Unassigned Farmers:', unassignedFarmers);\r\n    console.log('- Pending KYC:', pendingKYC);\r\n    console.log('- Approved KYC:', approvedKYC);\r\n    console.log('- Refer Back KYC:', referBackKYC);\r\n    console.log('- Rejected KYC:', rejectedKYC);\r\n\r\n    return {\r\n      totalFarmers,\r\n      totalEmployees,\r\n      unassignedFarmers,\r\n      pendingKYC,\r\n      approvedKYC,\r\n      referBackKYC,\r\n      rejectedKYC\r\n    };\r\n  };\r\n\r\n  const getTodoList = () => {\r\n    const unassignedFarmers = (farmers || []).filter(f => !f.assignedEmployee || f.assignedEmployee === 'Not Assigned');\r\n    const overdueKYC = (farmers || []).filter(f => {\r\n      if ((f.kycStatus === 'PENDING' || f.kycStatus === 'NOT_STARTED') && f.assignedEmployee && f.assignedEmployee !== 'Not Assigned') {\r\n        // For now, consider all pending KYC as overdue if assigned\r\n        return true;\r\n      }\r\n      return false;\r\n    });\r\n    const employeesWithLargeQueues = (employees || []).filter(emp => {\r\n      const pendingCount = emp.pendingKyc || 0;\r\n      return pendingCount > 5; // Large queue if more than 5 pending\r\n    });\r\n\r\n    console.log('Admin Todo list calculated from real data:');\r\n    console.log('- Unassigned Farmers:', unassignedFarmers.length);\r\n    console.log('- Overdue KYC:', overdueKYC.length);\r\n    console.log('- Employees with Large Queues:', employeesWithLargeQueues.length);\r\n\r\n    return {\r\n      unassignedFarmers,\r\n      overdueKYC,\r\n      employeesWithLargeQueues\r\n    };\r\n  };\r\n\r\n  const handleLogout = () => {\r\n    logout();\r\n  };\r\n\r\n  const toggleUserDropdown = () => {\r\n    setShowUserDropdown(!showUserDropdown);\r\n  };\r\n\r\n  const handleChangePassword = () => {\r\n    // Navigate to change password page\r\n    window.location.href = '/change-password';\r\n  };\r\n\r\n  const handleViewFarmer = (farmer) => {\r\n    setSelectedFarmerData(farmer);\r\n    setShowFarmerDetails(true);\r\n  };\r\n\r\n  const handleCloseFarmerDetails = () => {\r\n    setShowFarmerDetails(false);\r\n    setSelectedFarmerData(null);\r\n  };\r\n\r\n  const handleViewEmployee = (employee) => {\r\n    setSelectedEmployeeForView(employee);\r\n    setShowViewEmployee(true);\r\n  };\r\n\r\n  const handleCloseEmployeeDetails = () => {\r\n    setShowEmployeeDetails(false);\r\n    setSelectedEmployeeData(null);\r\n  };\r\n\r\n  const handleUpdateEmployee = (updatedData) => {\r\n    setEmployees(prev => prev.map(emp => \r\n      emp.id === updatedData.id ? updatedData : emp\r\n    ));\r\n    setShowEmployeeDetails(false);\r\n    setSelectedEmployeeData(null);\r\n  };\r\n\r\n  const handleKYCDocumentUpload = (farmer) => {\r\n    setSelectedFarmerForKYC(farmer);\r\n    setShowKYCDocumentUpload(true);\r\n  };\r\n\r\n  const handleCloseKYCDocumentUpload = () => {\r\n    setShowKYCDocumentUpload(false);\r\n    setSelectedFarmerForKYC(null);\r\n  };\r\n\r\n  const handleKYCApprove = (farmerId, documents) => {\r\n    setFarmers(prev => prev.map(farmer => \r\n      farmer.id === farmerId \r\n        ? { ...farmer, kycStatus: 'APPROVED' }\r\n        : farmer\r\n    ));\r\n    setShowKYCDocumentUpload(false);\r\n    setSelectedFarmerForKYC(null);\r\n  };\r\n\r\n  const handleKYCReject = (farmerId, reason, documents) => {\r\n    setFarmers(prev => prev.map(farmer => \r\n      farmer.id === farmerId \r\n        ? { ...farmer, kycStatus: 'REJECTED' }\r\n        : farmer\r\n    ));\r\n    setShowKYCDocumentUpload(false);\r\n    setSelectedFarmerForKYC(null);\r\n  };\r\n\r\n  const handleKYCReferBack = (farmerId, reason, documents) => {\r\n    setFarmers(prev => prev.map(farmer => \r\n      farmer.id === farmerId \r\n        ? { ...farmer, kycStatus: 'REFER_BACK' }\r\n        : farmer\r\n    ));\r\n    setShowKYCDocumentUpload(false);\r\n    setSelectedFarmerForKYC(null);\r\n  };\r\n\r\n  const handleEditFarmer = (farmer) => {\r\n    setEditingFarmer(farmer);\r\n    setShowFarmerForm(true);\r\n  };\r\n\r\n  const handleEditEmployee = (employee) => {\r\n    setEditingEmployee(employee);\r\n    setShowEmployeeForm(true);\r\n  };\r\n\r\n  const handleAssignFarmers = async (assignments) => {\r\n    try {\r\n      // Extract farmer IDs and employee ID from assignments\r\n      const farmerIds = assignments.map(a => a.farmerId);\r\n      const employeeId = assignments[0]?.employeeId;\r\n      \r\n      if (!employeeId || farmerIds.length === 0) {\r\n        alert('Please select an employee and at least one farmer');\r\n        return;\r\n      }\r\n      \r\n      // Try bulk assign first, then fallback to individual assignments\r\n      try {\r\n        // Call admin API to bulk assign farmers\r\n        await adminAPI.bulkAssignFarmers(farmerIds, employeeId);\r\n      } catch (bulkError) {\r\n        console.log('Bulk assign failed, trying individual assignments...');\r\n        // Fallback to individual assignments\r\n        for (const farmerId of farmerIds) {\r\n          try {\r\n            await adminAPI.assignFarmer(farmerId, employeeId);\r\n          } catch (individualError) {\r\n            console.error(`Failed to assign farmer ${farmerId}:`, individualError);\r\n          }\r\n        }\r\n      }\r\n      \r\n      // Update local state for each assignment\r\n      setFarmers(prev => prev.map(farmer => {\r\n        const assignment = assignments.find(a => a.farmerId === farmer.id);\r\n        if (assignment) {\r\n          return {\r\n            ...farmer,\r\n            assignmentStatus: 'ASSIGNED',\r\n            assignedEmployee: assignment.employeeName,\r\n            assignedDate: new Date().toISOString().split('T')[0]\r\n          };\r\n        }\r\n        return farmer;\r\n      }));\r\n      \r\n      setShowAssignmentModal(false);\r\n      alert('Farmers assigned successfully!');\r\n    } catch (error) {\r\n      console.error('Error assigning farmers:', error);\r\n      alert('Failed to assign farmers');\r\n    }\r\n  };\r\n\r\n  // Quick Actions Handlers\r\n  const handleAddFarmer = () => {\r\n    setShowFarmerForm(true);\r\n    setActiveTab('overview');\r\n  };\r\n\r\n  const handleViewFarmers = () => {\r\n    setShowViewFarmer(true);\r\n    setSelectedFarmerForView(null);\r\n    setActiveTab('overview');\r\n  };\r\n\r\n  const handleAddEmployee = () => {\r\n    setShowEmployeeForm(true);\r\n    setActiveTab('overview');\r\n  };\r\n\r\n  const handleViewEmployees = () => {\r\n    setShowViewEmployee(true);\r\n    setSelectedEmployeeForView(null);\r\n    setActiveTab('overview');\r\n  };\r\n\r\n  const handleAssignFarmersQuick = () => {\r\n    setShowAssignmentModal(true);\r\n    setActiveTab('overview');\r\n  };\r\n\r\n  const handlePendingKYC = () => {\r\n    setShowPendingKYC(true);\r\n    setActiveTab('overview');\r\n  };\r\n\r\n  const handleFarmerSelect = (farmer) => {\r\n    setSelectedFarmerForView(farmer);\r\n  };\r\n\r\n  const handleEmployeeSelect = (employee) => {\r\n    setSelectedEmployeeForView(employee);\r\n  };\r\n\r\n  const handleCloseViewFarmer = () => {\r\n    if (selectedFarmerForView) {\r\n      setSelectedFarmerForView(null);\r\n    } else {\r\n      setShowViewFarmer(false);\r\n    }\r\n  };\r\n\r\n  const handleCloseViewEmployee = () => {\r\n    if (selectedEmployeeForView) {\r\n      setSelectedEmployeeForView(null);\r\n    } else {\r\n      setShowViewEmployee(false);\r\n    }\r\n  };\r\n\r\n  const handleClosePendingKYC = () => {\r\n    setShowPendingKYC(false);\r\n  };\r\n\r\n    const renderOverview = () => {\r\n    const stats = getStats();\r\n\r\n    return (\r\n      <div className=\"overview-section\">\r\n        <div className=\"overview-header\">\r\n          <h2 className=\"overview-title\">Admin Dashboard Overview</h2>\r\n          <p className=\"overview-description\">\r\n            Manage farmers, employees, and assignments efficiently.\r\n          </p>\r\n        </div>\r\n\r\n        {/* Stats Cards */}\r\n        <div className=\"stats-grid admin-stats-grid\">\r\n          <div className=\"stats-card assigned\">\r\n            <h3 className=\"stats-title\">Farmers</h3>\r\n            <div className=\"stats-number\">{stats.totalFarmers}</div>\r\n          </div>\r\n          <div className=\"stats-card approved\">\r\n            <h3 className=\"stats-title\">Employees</h3>\r\n            <div className=\"stats-number\">{stats.totalEmployees}</div>\r\n          </div>\r\n          <div className=\"stats-card refer\">\r\n            <h3 className=\"stats-title\">FPO</h3>\r\n            <div className=\"stats-number\">0</div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Recent Activities Section */}\r\n        <div className=\"bottom-sections\">\r\n          <div className=\"section-card\">\r\n            <div className=\"section-header\">\r\n              <h3>Recent Activities</h3>\r\n              <button className=\"section-link\" onClick={() => console.log('View All clicked')}>View All</button>\r\n            </div>\r\n            <div className=\"activities-list\">\r\n              <div className=\"activity-item success\">\r\n                <div className=\"activity-icon\">👤</div>\r\n                <div className=\"activity-content\">\r\n                  <div className=\"activity-text\">\r\n                    Farmer profile updated\r\n                  </div>\r\n                  <div className=\"activity-time\">20m ago</div>\r\n                  <button className=\"activity-badge success\">SUCCESS</button>\r\n                </div>\r\n              </div>\r\n              <div className=\"activity-item success\">\r\n                <div className=\"activity-icon\">👨‍💼</div>\r\n                <div className=\"activity-content\">\r\n                  <div className=\"activity-text\">\r\n                    Employee profile updated\r\n                  </div>\r\n                  <div className=\"activity-time\">10m ago</div>\r\n                  <button className=\"activity-badge success\">SUCCESS</button>\r\n                </div>\r\n              </div>\r\n              <div className=\"activity-item pending\">\r\n                <div className=\"activity-icon\">📋</div>\r\n                <div className=\"activity-content\">\r\n                  <div className=\"activity-text\">\r\n                    New registration pending approval\r\n                  </div>\r\n                  <div className=\"activity-time\">5m ago</div>\r\n                  <button className=\"activity-badge pending\">PENDING</button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Quick Actions Section */}\r\n          <div className=\"section-card\">\r\n            <div className=\"section-header\">\r\n              <h3>Quick Actions</h3>\r\n            </div>\r\n            <div className=\"quick-actions-grid\">\r\n              <button className=\"quick-action-btn primary\" onClick={handleAddFarmer}>\r\n                <i className=\"fas fa-user-plus\"></i>\r\n                Add Farmer\r\n              </button>\r\n              <button className=\"quick-action-btn secondary\" onClick={handleViewFarmers}>\r\n                <i className=\"fas fa-users\"></i>\r\n                View Farmers\r\n              </button>\r\n              <button className=\"quick-action-btn primary\" onClick={handleAddEmployee}>\r\n                <i className=\"fas fa-user-tie\"></i>\r\n                Add Employee\r\n              </button>\r\n              <button className=\"quick-action-btn secondary\" onClick={handleViewEmployees}>\r\n                <i className=\"fas fa-user-tie\"></i>\r\n                View Employee\r\n              </button>\r\n              <button className=\"quick-action-btn primary\" onClick={handleAssignFarmersQuick}>\r\n                <i className=\"fas fa-link\"></i>\r\n                Assign Farmers\r\n              </button>\r\n              <button className=\"quick-action-btn secondary\" onClick={handlePendingKYC}>\r\n                <i className=\"fas fa-clock\"></i>\r\n                Pending KYC\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderFarmers = () => {\r\n    const filteredFarmers = getFilteredFarmers();\r\n\r\n    return (\r\n      <div className=\"overview-section\">\r\n        {!showFarmerRegistration && !showFarmerDetails ? (\r\n          <>\r\n            <div className=\"overview-header\">\r\n              <h2 className=\"overview-title\">Farmer Management</h2>\r\n              <p className=\"overview-description\">\r\n                View and manage all farmer profiles with KYC status and assignments.\r\n              </p>\r\n              <div className=\"overview-actions\">\r\n                <button \r\n                  className=\"action-btn primary\"\r\n                  onClick={() => setShowFarmerRegistration(true)}\r\n                >\r\n                    Add Farmer\r\n                </button>\r\n                <button \r\n                  className=\"action-btn secondary\"\r\n                  onClick={() => setShowAssignmentModal(true)}\r\n                >\r\n                  Assign Farmers\r\n                </button>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Filters */}\r\n            <div className=\"filters-section\">\r\n              <div className=\"filter-group\">\r\n                <select \r\n                  className=\"filter-select\"\r\n                  value={filters.state}\r\n                  onChange={(e) => setFilters(prev => ({ ...prev, state: e.target.value }))}\r\n                >\r\n                  <option value=\"\">All States</option>\r\n                  <option value=\"Telangana\">Telangana</option>\r\n                  <option value=\"Andhra Pradesh\">Andhra Pradesh</option>\r\n                  <option value=\"Karnataka\">Karnataka</option>\r\n                  <option value=\"Tamil Nadu\">Tamil Nadu</option>\r\n                </select>\r\n              </div>\r\n              <div className=\"filter-group\">\r\n                <select \r\n                  className=\"filter-select\"\r\n                  value={filters.district}\r\n                  onChange={(e) => setFilters(prev => ({ ...prev, district: e.target.value }))}\r\n                >\r\n                  <option value=\"\">All Districts</option>\r\n                  <option value=\"Hanumakonda\">Hanumakonda</option>\r\n                  <option value=\"Warangal\">Warangal</option>\r\n                  <option value=\"Karimnagar\">Karimnagar</option>\r\n                  <option value=\"Nizamabad\">Nizamabad</option>\r\n                </select>\r\n              </div>\r\n              <div className=\"filter-group\">\r\n                <select \r\n                  className=\"filter-select\"\r\n                  value={filters.kycStatus}\r\n                  onChange={(e) => setFilters(prev => ({ ...prev, kycStatus: e.target.value }))}\r\n                >\r\n                  <option value=\"\">All KYC Status</option>\r\n                  <option value=\"APPROVED\">Approved</option>\r\n                  <option value=\"PENDING\">Pending</option>\r\n                  <option value=\"REFER_BACK\">Refer Back</option>\r\n                  <option value=\"REJECTED\">Rejected</option>\r\n                  <option value=\"NOT_STARTED\">Not Started</option>\r\n                </select>\r\n              </div>\r\n              <div className=\"filter-group\">\r\n                <select \r\n                  className=\"filter-select\"\r\n                  value={filters.assignmentStatus}\r\n                  onChange={(e) => setFilters(prev => ({ ...prev, assignmentStatus: e.target.value }))}\r\n                >\r\n                  <option value=\"\">All Assignment Status</option>\r\n                  <option value=\"ASSIGNED\">Assigned</option>\r\n                  <option value=\"UNASSIGNED\">Unassigned</option>\r\n                </select>\r\n              </div>\r\n              <div className=\"filter-group\">\r\n                <select \r\n                  className=\"filter-select\"\r\n                  value={filters.assignedEmployee}\r\n                  onChange={(e) => setFilters(prev => ({ ...prev, assignedEmployee: e.target.value }))}\r\n                >\r\n                  <option value=\"\">All Employees</option>\r\n                  {employees.map(employee => (\r\n                    <option key={employee.id} value={employee.id}>\r\n                      {employee.name}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n              <button \r\n                className=\"clear-filters-btn\"\r\n                onClick={() => setFilters({\r\n                  state: '',\r\n                  district: '',\r\n                  region: '',\r\n                  kycStatus: '',\r\n                  assignmentStatus: '',\r\n                  assignedEmployee: ''\r\n                })}\r\n              >\r\n                Clear Filters\r\n              </button>\r\n            </div>\r\n\r\n            {/* Farmers Table */}\r\n            <DataTable\r\n              data={filteredFarmers}\r\n              columns={[\r\n                { \r\n                  key: 'name', \r\n                  label: 'NAME',\r\n                  className: 'col-name',\r\n                  render: (value, row) => value || row.fullName || row.userName || row.firstName || 'N/A'\r\n                },\r\n                { \r\n                  key: 'phoneNumber', \r\n                  label: 'PHONE',\r\n                  className: 'col-phone',\r\n                  render: (value, row) => value || row.phone || row.contactNumber || row.mobileNumber || 'N/A'\r\n                },\r\n                { \r\n                  key: 'state', \r\n                  label: 'STATE',\r\n                  className: 'col-state',\r\n                  render: (value, row) => value || row.state || 'N/A'\r\n                },\r\n                { \r\n                  key: 'district', \r\n                  label: 'DISTRICT',\r\n                  className: 'col-district',\r\n                  render: (value, row) => value || row.district || 'N/A'\r\n                },\r\n                { \r\n                  key: 'kycStatus', \r\n                  label: 'KYC STATUS',\r\n                  className: 'col-kyc',\r\n                  type: 'status',\r\n                  render: (value, row) => value || row.kycStatus || 'NOT_STARTED'\r\n                },\r\n                { \r\n                  key: 'assignedEmployee', \r\n                  label: 'ASSIGNED EMPLOYEE',\r\n                  className: 'col-employee',\r\n                  render: (value, row) => {\r\n                    if (typeof value === 'object' && value) {\r\n                      return value.name || value.firstName + ' ' + value.lastName || 'N/A';\r\n                    }\r\n                    return value || row.assignedEmployeeName || 'Not Assigned';\r\n                  }\r\n                }\r\n              ]}\r\n              actions={[\r\n                {\r\n                  label: 'View',\r\n                  className: 'action-btn-small primary',\r\n                  onClick: handleViewFarmer\r\n                },\r\n                {\r\n                  label: 'Edit',\r\n                  className: 'action-btn-small secondary',\r\n                  onClick: handleEditFarmer\r\n                },\r\n                {\r\n                  label: 'KYC',\r\n                  className: 'action-btn-small warning',\r\n            onClick: handleKYCDocumentUpload\r\n          }\r\n        ]}\r\n      />\r\n          </>\r\n        ) : showFarmerRegistration ? (\r\n          <div className=\"farmer-registration-section\">\r\n            <div className=\"section-header\">\r\n              <div>\r\n                <h2 className=\"section-title\">Add New Farmer</h2>\r\n                <p className=\"section-description\">\r\n                  Fill in the farmer details to create a new farmer account.\r\n                </p>\r\n              </div>\r\n              <div className=\"section-actions\">\r\n                <button \r\n                  className=\"action-btn-small secondary\"\r\n                  onClick={() => setShowFarmerRegistration(false)}\r\n                >\r\n                  <i className=\"fas fa-arrow-left\"></i>\r\n                  Back to Farmers\r\n                </button>\r\n              </div>\r\n            </div>\r\n\r\n            <FarmerRegistrationForm \r\n              isInDashboard={true}\r\n              onClose={() => setShowFarmerRegistration(false)}\r\n              onSubmit={async (farmerData) => {\r\n                try {\r\n                  const newFarmer = await farmersAPI.createFarmer(farmerData);\r\n                  setFarmers(prev => [...prev, newFarmer]);\r\n                  alert('Farmer created successfully!');\r\n                  setShowFarmerRegistration(false);\r\n                } catch (error) {\r\n                  console.error('Error creating farmer:', error);\r\n                  alert('Failed to create farmer. Please try again.');\r\n                }\r\n              }}\r\n            />\r\n          </div>\r\n        ) : showFarmerDetails ? (\r\n          <div className=\"farmer-details-section\">\r\n            <div className=\"section-header\">\r\n              <div>\r\n                <h2 className=\"section-title\">Farmer Details</h2>\r\n                <p className=\"section-description\">\r\n                  View detailed information for {selectedFarmerData?.name || 'selected farmer'}.\r\n                </p>\r\n              </div>\r\n              <div className=\"section-actions\">\r\n                <button \r\n                  className=\"action-btn-small secondary\"\r\n                  onClick={() => setShowFarmerDetails(false)}\r\n                >\r\n                  <i className=\"fas fa-arrow-left\"></i>\r\n                  Back to Farmers\r\n                </button>\r\n              </div>\r\n            </div>\r\n\r\n            <ViewFarmerRegistrationDetails \r\n              isInDashboard={true}\r\n              farmerData={selectedFarmerData}\r\n              onClose={() => setShowFarmerDetails(false)}\r\n            />\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderRegistration = () => {\r\n    const filteredRegistrations = getFilteredRegistrations();\r\n\r\n    return (\r\n      <div className=\"registration-section\">\r\n        <div className=\"section-header\">\r\n          <div>\r\n            <h2 className=\"section-title\">Registration Management</h2>\r\n            <p className=\"section-description\">\r\n              Review and manage user registration requests.\r\n            </p>\r\n          </div>\r\n          <div className=\"section-actions\">\r\n            <button \r\n              className=\"action-btn-small primary\"\r\n              onClick={() => {\r\n                console.log('🔄 Manually refreshing data...');\r\n                fetchData();\r\n              }}\r\n            >\r\n              <i className=\"fas fa-sync-alt\"></i>\r\n              Refresh Data\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Filters */}\r\n      <div className=\"filters-section\">\r\n          <div className=\"filter-group\">\r\n          <select \r\n              className=\"filter-select\"\r\n              value={registrationFilters.role}\r\n              onChange={(e) => setRegistrationFilters(prev => ({ ...prev, role: e.target.value }))}\r\n            >\r\n              <option value=\"\">All Roles</option>\r\n              <option value=\"FARMER\">Farmer</option>\r\n              <option value=\"EMPLOYEE\">Employee</option>\r\n              <option value=\"ADMIN\">Admin</option>\r\n            </select>\r\n          </div>\r\n          <div className=\"filter-group\">\r\n            <select \r\n              className=\"filter-select\"\r\n              value={registrationFilters.status}\r\n              onChange={(e) => setRegistrationFilters(prev => ({ ...prev, status: e.target.value }))}\r\n            >\r\n              <option value=\"\">All Status</option>\r\n              <option value=\"PENDING\">Pending</option>\r\n              <option value=\"APPROVED\">Approved</option>\r\n              <option value=\"REJECTED\">Rejected</option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n\r\n        {/* Registration Table */}\r\n      <DataTable\r\n          data={filteredRegistrations}\r\n        columns={[\r\n          { \r\n            key: 'name', \r\n            label: 'Name',\r\n            className: 'col-name',\r\n            render: (value, row) => value || row.fullName || row.userName || row.firstName || 'N/A'\r\n          },\r\n          { \r\n            key: 'email', \r\n            label: 'Email',\r\n            className: 'col-email',\r\n            render: (value, row) => value || row.emailAddress || row.userEmail || 'N/A'\r\n          },\r\n          { \r\n            key: 'phoneNumber', \r\n            label: 'Phone',\r\n            className: 'col-phone',\r\n            render: (value, row) => value || row.phone || row.mobile || row.contactNumber || row.mobileNumber || 'N/A'\r\n          },\r\n          { \r\n            key: 'role', \r\n            label: 'Role',\r\n            className: 'col-role',\r\n            render: (value, row) => value || row.userRole || row.type || row.userType || 'N/A'\r\n          },\r\n          { \r\n            key: 'status', \r\n            label: 'Status', \r\n            className: 'col-status',\r\n            type: 'status',\r\n            render: (value, row) => value || row.registrationStatus || row.approvalStatus || row.kycStatus || 'N/A'\r\n          }\r\n        ]}\r\n          customActions={[\r\n            {\r\n              label: 'View',\r\n              className: 'action-btn-small info',\r\n              onClick: handleViewRegistration\r\n            },\r\n            {\r\n              label: 'Approve',\r\n              className: 'action-btn-small success',\r\n              onClick: (registration) => handleApproveRegistration(registration.id),\r\n              show: (registration) => registration.status === 'PENDING'\r\n            },\r\n            {\r\n              label: 'Reject',\r\n              className: 'action-btn-small danger',\r\n              onClick: (registration) => handleRejectRegistration(registration.id),\r\n              show: (registration) => registration.status === 'PENDING'\r\n            }\r\n          ]}\r\n      />\r\n    </div>\r\n  );\r\n  };\r\n\r\n  const renderEmployees = () => {\r\n    const filteredEmployees = getFilteredEmployees();\r\n\r\n  return (\r\n      <div className=\"overview-section\">\r\n        {!showEmployeeRegistration ? (\r\n          <>\r\n            <div className=\"overview-header\">\r\n              <h2 className=\"overview-title\">Employee Management</h2>\r\n              <p className=\"overview-description\">\r\n                View and manage employee profiles with KYC assignment statistics.\r\n              </p>\r\n              <div className=\"overview-actions\">\r\n                <button \r\n                  className=\"action-btn primary\"\r\n                  onClick={() => setShowEmployeeRegistration(true)}\r\n                >\r\n                  Add Employee\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n            {/* Employee Stats */}\r\n            <div className=\"employee-stats\">\r\n              <h3>Employee KYC Progress</h3>\r\n              <div className=\"employee-stats-grid\">\r\n                {employees.map(employee => {\r\n                  // Calculate real stats from farmers data\r\n                  const assignedFarmers = (farmers || []).filter(f => \r\n                    f.assignedEmployee === employee.name || \r\n                    f.assignedEmployee === employee.contactNumber ||\r\n                    f.assignedEmployeeId === employee.id\r\n                  );\r\n                  \r\n                  const approvedCount = assignedFarmers.filter(f => \r\n                    f.kycStatus === 'APPROVED' || f.kycStatus === 'approved'\r\n                  ).length;\r\n                  \r\n                  const pendingCount = assignedFarmers.filter(f => \r\n                    f.kycStatus === 'PENDING' || f.kycStatus === 'pending' || \r\n                    f.kycStatus === 'NOT_STARTED' || f.kycStatus === 'not_started'\r\n                  ).length;\r\n                  \r\n                  const referBackCount = assignedFarmers.filter(f => \r\n                    f.kycStatus === 'REFER_BACK' || f.kycStatus === 'refer_back'\r\n                  ).length;\r\n                  \r\n                  const rejectedCount = assignedFarmers.filter(f => \r\n                    f.kycStatus === 'REJECTED' || f.kycStatus === 'rejected'\r\n                  ).length;\r\n                  \r\n                  return (\r\n                    <div key={employee.id} className=\"employee-stat-card\">\r\n                      <div className=\"employee-info\">\r\n                        <h4>{employee.name}</h4>\r\n                        <p>{employee.designation} - {employee.district}</p>\r\n                      </div>\r\n                      <div className=\"employee-kyc-stats\">\r\n                        <div className=\"kyc-stat\">\r\n                          <span className=\"stat-number\">{assignedFarmers.length}</span>\r\n                          <span className=\"stat-label\">Total Assigned</span>\r\n                        </div>\r\n                        <div className=\"kyc-stat\">\r\n                          <span className=\"stat-number approved\">{approvedCount}</span>\r\n                          <span className=\"stat-label\">Approved</span>\r\n                        </div>\r\n                        <div className=\"kyc-stat\">\r\n                          <span className=\"stat-number pending\">{pendingCount}</span>\r\n                          <span className=\"stat-label\">Pending</span>\r\n                        </div>\r\n                        <div className=\"kyc-stat\">\r\n                          <span className=\"stat-number refer-back\">{referBackCount}</span>\r\n                          <span className=\"stat-label\">Refer Back</span>\r\n                        </div>\r\n                        <div className=\"kyc-stat\">\r\n                          <span className=\"stat-number rejected\">{rejectedCount}</span>\r\n                          <span className=\"stat-label\">Rejected</span>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  );\r\n                })}\r\n            </div>\r\n          </div>\r\n\r\n            {/* Employees Table */}\r\n          <DataTable\r\n            data={filteredEmployees.map(employee => {\r\n              // Calculate real stats from farmers data\r\n              const assignedFarmers = (farmers || []).filter(f => \r\n                f.assignedEmployee === employee.name || \r\n                f.assignedEmployee === employee.contactNumber ||\r\n                f.assignedEmployeeId === employee.id\r\n              );\r\n              \r\n              const approvedCount = assignedFarmers.filter(f => \r\n                f.kycStatus === 'APPROVED' || f.kycStatus === 'approved'\r\n              ).length;\r\n              \r\n              const pendingCount = assignedFarmers.filter(f => \r\n                f.kycStatus === 'PENDING' || f.kycStatus === 'pending' || \r\n                f.kycStatus === 'NOT_STARTED' || f.kycStatus === 'not_started'\r\n              ).length;\r\n              \r\n              return {\r\n                ...employee,\r\n                totalAssigned: assignedFarmers.length,\r\n                approvedKyc: approvedCount,\r\n                pendingKyc: pendingCount\r\n              };\r\n            })}\r\n            columns={[\r\n              { key: 'name', label: 'Name' },\r\n              { key: 'contactNumber', label: 'Contact' },\r\n              { key: 'email', label: 'Email' },\r\n              { key: 'state', label: 'State' },\r\n              { key: 'district', label: 'District' },\r\n              { key: 'totalAssigned', label: 'Assigned Farmers' },\r\n              { key: 'approvedKyc', label: 'Approved KYC' },\r\n              { key: 'pendingKyc', label: 'Pending KYC' }\r\n            ]}\r\n            customActions={[\r\n              {\r\n                label: 'View',\r\n                className: 'action-btn-small info',\r\n                onClick: handleViewEmployee\r\n              },\r\n              {\r\n                label: 'Edit',\r\n                className: 'action-btn-small primary',\r\n                onClick: handleEditEmployee\r\n              }\r\n            ]}\r\n          />\r\n          </>\r\n        ) : (\r\n          <div className=\"employee-registration-section\">\r\n            <div className=\"section-header\">\r\n              <div>\r\n                <h2 className=\"section-title\">Add New Employee</h2>\r\n                <p className=\"section-description\">\r\n                  Fill in the employee details to create a new employee account.\r\n                </p>\r\n              </div>\r\n              <div className=\"section-actions\">\r\n        <button \r\n                  className=\"action-btn-small secondary\"\r\n                  onClick={() => setShowEmployeeRegistration(false)}\r\n        >\r\n                  <i className=\"fas fa-arrow-left\"></i>\r\n                  Back to Employees\r\n        </button>\r\n              </div>\r\n            </div>\r\n\r\n            <EmployeeRegistrationForm \r\n              isInDashboard={true}\r\n              onClose={() => setShowEmployeeRegistration(false)}\r\n              onSubmit={async (employeeData) => {\r\n                try {\r\n                  const newEmployee = await employeesAPI.createEmployee(employeeData);\r\n                  setEmployees(prev => [...prev, newEmployee]);\r\n                  alert('Employee created successfully!');\r\n                  setShowEmployeeRegistration(false);\r\n                } catch (error) {\r\n                  console.error('Error creating employee:', error);\r\n                  alert('Failed to create employee. Please try again.');\r\n                }\r\n              }}\r\n            />\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderKYCOverview = () => {\r\n    const stats = getStats();\r\n    \r\n    return (\r\n      <div className=\"overview-section\">\r\n        <div className=\"overview-header\">\r\n          <h2 className=\"overview-title\">KYC Overview</h2>\r\n          <p className=\"overview-description\">\r\n            Comprehensive view of KYC status across all farmers and employees.\r\n          </p>\r\n        </div>\r\n\r\n        {/* KYC Status Breakdown */}\r\n        <div className=\"kyc-breakdown\">\r\n          <h3>KYC Status Breakdown</h3>\r\n          <div className=\"kyc-stats-grid\">\r\n            <div className=\"kyc-stat-card approved\">\r\n              <span className=\"kyc-stat-number\">{stats.approvedKYC}</span>\r\n              <span className=\"kyc-stat-label\">Approved</span>\r\n            </div>\r\n            <div className=\"kyc-stat-card pending\">\r\n              <span className=\"kyc-stat-number\">{stats.pendingKYC}</span>\r\n              <span className=\"kyc-stat-label\">Pending</span>\r\n            </div>\r\n            <div className=\"kyc-stat-card refer-back\">\r\n              <span className=\"kyc-stat-number\">{stats.referBackKYC}</span>\r\n              <span className=\"kyc-stat-label\">Refer Back</span>\r\n            </div>\r\n            <div className=\"kyc-stat-card rejected\">\r\n              <span className=\"kyc-stat-number\">{stats.rejectedKYC}</span>\r\n              <span className=\"kyc-stat-label\">Rejected</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Employee KYC Progress */}\r\n        <div className=\"employee-stats\">\r\n          <h3>Employee KYC Progress</h3>\r\n          <div className=\"employee-stats-grid\">\r\n            {employees.map(employee => {\r\n              // Calculate real stats from farmers data\r\n              const assignedFarmers = (farmers || []).filter(f => \r\n                f.assignedEmployee === employee.name || \r\n                f.assignedEmployee === employee.contactNumber ||\r\n                f.assignedEmployeeId === employee.id\r\n              );\r\n              \r\n              const approvedCount = assignedFarmers.filter(f => \r\n                f.kycStatus === 'APPROVED' || f.kycStatus === 'approved'\r\n              ).length;\r\n              \r\n              const pendingCount = assignedFarmers.filter(f => \r\n                f.kycStatus === 'PENDING' || f.kycStatus === 'pending' || \r\n                f.kycStatus === 'NOT_STARTED' || f.kycStatus === 'not_started'\r\n              ).length;\r\n              \r\n              const referBackCount = assignedFarmers.filter(f => \r\n                f.kycStatus === 'REFER_BACK' || f.kycStatus === 'refer_back'\r\n              ).length;\r\n              \r\n              const rejectedCount = assignedFarmers.filter(f => \r\n                f.kycStatus === 'REJECTED' || f.kycStatus === 'rejected'\r\n              ).length;\r\n              \r\n              return (\r\n                <div key={employee.id} className=\"employee-stat-card\">\r\n                  <div className=\"employee-info\">\r\n                    <h4>{employee.name}</h4>\r\n                    <p>{employee.designation} - {employee.district}</p>\r\n                  </div>\r\n                  <div className=\"employee-kyc-stats\">\r\n                    <div className=\"kyc-stat\">\r\n                      <span className=\"stat-number\">{assignedFarmers.length}</span>\r\n                      <span className=\"stat-label\">Total Assigned</span>\r\n                    </div>\r\n                    <div className=\"kyc-stat\">\r\n                      <span className=\"stat-number approved\">{approvedCount}</span>\r\n                      <span className=\"stat-label\">Approved</span>\r\n                    </div>\r\n                    <div className=\"kyc-stat\">\r\n                      <span className=\"stat-number pending\">{pendingCount}</span>\r\n                      <span className=\"stat-label\">Pending</span>\r\n                    </div>\r\n                    <div className=\"kyc-stat\">\r\n                      <span className=\"stat-number refer-back\">{referBackCount}</span>\r\n                      <span className=\"stat-label\">Refer Back</span>\r\n                    </div>\r\n                    <div className=\"kyc-stat\">\r\n                      <span className=\"stat-number rejected\">{rejectedCount}</span>\r\n                      <span className=\"stat-label\">Rejected</span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n\r\n        {/* KYC Progress Overview */}\r\n        <div className=\"kyc-progress-section\">\r\n          <h3>KYC Progress Overview</h3>\r\n          <div className=\"kyc-progress-grid\">\r\n            <div className=\"progress-card approved\">\r\n              <div className=\"progress-circle\">\r\n                <div className=\"progress-number\">{stats.approvedKYC}</div>\r\n              </div>\r\n              <div className=\"progress-label\">Approved KYC</div>\r\n            </div>\r\n            <div className=\"progress-card pending\">\r\n              <div className=\"progress-circle\">\r\n                <div className=\"progress-number\">{stats.pendingKYC}</div>\r\n              </div>\r\n              <div className=\"progress-label\">Pending KYC</div>\r\n            </div>\r\n            <div className=\"progress-card refer-back\">\r\n              <div className=\"progress-circle\">\r\n                <div className=\"progress-number\">{stats.referBackKYC}</div>\r\n              </div>\r\n              <div className=\"progress-label\">Refer Back</div>\r\n            </div>\r\n            <div className=\"progress-card rejected\">\r\n              <div className=\"progress-circle\">\r\n                <div className=\"progress-number\">{stats.rejectedKYC}</div>\r\n              </div>\r\n              <div className=\"progress-label\">Rejected KYC</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"dashboard\">\r\n      {/* Top Bar with Date, Theme and Profile */}\r\n      <div className=\"top-bar\">\r\n        <div className=\"top-bar-left\">\r\n          <div className=\"logo-container\">\r\n            <div className=\"logo-text\">\r\n              <h1 className=\"logo-title\">DATE</h1>\r\n              <p className=\"logo-subtitle\">Digital Agristack Transaction Enterprises</p>\r\n            </div>\r\n          </div>\r\n          <div className=\"date-display\">\r\n            {new Date().toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })}\r\n          </div>\r\n        </div>\r\n        <div className=\"top-bar-right\">\r\n          <ThemeDropdown />\r\n          <UserProfileDropdown \r\n            onShowChangePassword={() => setShowChangePassword(true)}\r\n            onShowChangeUserId={() => setShowChangeUserId(true)}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {/* Sidebar */}\r\n      <aside className=\"dashboard-sidebar\">\r\n        <div className=\"sidebar-header\">\r\n          <div className=\"logo\">\r\n            <div className=\"logo-text\">Welcome !!!</div>\r\n            <div className=\"logo-subtitle\">Admin</div>\r\n          </div>\r\n        </div>\r\n        <nav className=\"sidebar-nav\">\r\n          <button className={`nav-item ${activeTab === 'overview' ? 'active' : ''}`} onClick={() => setActiveTab('overview')}>📊 Overview</button>\r\n          <button className={`nav-item ${activeTab === 'kyc-overview' ? 'active' : ''}`} onClick={() => setActiveTab('kyc-overview')}>🪪 KYC Overview</button>\r\n          <button className={`nav-item ${activeTab === 'farmers' ? 'active' : ''}`} onClick={() => setActiveTab('farmers')}>👨‍🌾 Farmers</button>\r\n          <button className={`nav-item ${activeTab === 'employees' ? 'active' : ''}`} onClick={() => setActiveTab('employees')}>👥 Employees</button>\r\n          <button className={`nav-item ${activeTab === 'registration' ? 'active' : ''}`} onClick={() => setActiveTab('registration')}>📝 Registrations</button>\r\n          <button className=\"nav-item\" onClick={() => navigate('/analytical-dashboard')}>📈 Dashboard</button>\r\n        </nav>\r\n      </aside>\r\n\r\n      {/* Main */}\r\n      <main className=\"dashboard-main\">\r\n        <div className=\"dashboard-content\">\r\n          {activeTab === 'overview' && !(\r\n            showFarmerForm ||\r\n            showEmployeeForm ||\r\n            showViewFarmer ||\r\n            showViewEmployee ||\r\n            showChangePassword ||\r\n            showChangeUserId ||\r\n            showPendingKYC ||\r\n            showAssignmentModal ||\r\n            showKYCDocumentUpload ||\r\n            showRegistrationDetailModal\r\n          ) && (\r\n          <header className=\"dashboard-header\">\r\n            <div className=\"header-center\">\r\n              <div className=\"welcome-message\">\r\n                <h2 className=\"greeting\">{getGreeting()}, {user?.name || user?.email || 'Admin'}! 🎋</h2>\r\n                <p className=\"welcome-text\">Welcome to DATE Digital Agristack - Manage farmers, employees and registrations efficiently.</p>\r\n              </div>\r\n            </div>\r\n          </header>\r\n          )}\r\n\r\n          {/* Render forms and views with priority over tab content */}\r\n          {showFarmerForm ? (\r\n            <div className=\"dashboard-form-container\">\r\n              <FarmerForm \r\n                isInDashboard={true}\r\n                editData={editingFarmer}\r\n                onClose={() => {\r\n                  setShowFarmerForm(false);\r\n                  setEditingFarmer(null);\r\n                }}\r\n                onSubmit={async (farmerData) => {\r\n                  try {\r\n                    if (editingFarmer) {\r\n                      const updatedFarmer = await farmersAPI.updateFarmer(editingFarmer.id, farmerData);\r\n                      setFarmers(prev => prev.map(farmer => \r\n                        farmer.id === editingFarmer.id ? updatedFarmer : farmer\r\n                      ));\r\n                      alert('Farmer updated successfully!');\r\n                    } else {\r\n                      const newFarmer = await farmersAPI.createFarmer(farmerData);\r\n                      setFarmers(prev => [...prev, newFarmer]);\r\n                      alert('Farmer created successfully!');\r\n                    }\r\n                    setShowFarmerForm(false);\r\n                    setEditingFarmer(null);\r\n                  } catch (error) {\r\n                    console.error('Error saving farmer:', error);\r\n                    alert('Failed to save farmer. Please try again.');\r\n                  }\r\n                }}\r\n              />\r\n            </div>\r\n          ) : showEmployeeForm ? (\r\n            <div className=\"dashboard-form-container\">\r\n              <EmployeeRegistrationForm \r\n                isInDashboard={true}\r\n                editData={editingEmployee}\r\n                onClose={() => {\r\n                  setShowEmployeeForm(false);\r\n                  setEditingEmployee(null);\r\n                }}\r\n                onSubmit={async (employeeData) => {\r\n                  try {\r\n                    if (editingEmployee) {\r\n                      const updatedEmployee = await employeesAPI.updateEmployee(editingEmployee.id, employeeData);\r\n                      setEmployees(prev => prev.map(employee => \r\n                        employee.id === editingEmployee.id ? updatedEmployee : employee\r\n                      ));\r\n                      alert('Employee updated successfully!');\r\n                    } else {\r\n                      const newEmployee = await employeesAPI.createEmployee(employeeData);\r\n                      setEmployees(prev => [...prev, newEmployee]);\r\n                      alert('Employee created successfully!');\r\n                    }\r\n                    setShowEmployeeForm(false);\r\n                    setEditingEmployee(null);\r\n                  } catch (error) {\r\n                    console.error('Error saving employee:', error);\r\n                    alert('Failed to save employee. Please try again.');\r\n                  }\r\n                }}\r\n              />\r\n            </div>\r\n          ) : showViewFarmer ? (\r\n            <div className=\"dashboard-form-container\">\r\n              <ViewFarmerRegistrationDetails \r\n                isInDashboard={true}\r\n                farmerData={selectedFarmerForView || farmers}\r\n                onClose={handleCloseViewFarmer}\r\n                onFarmerSelect={handleFarmerSelect}\r\n              />\r\n            </div>\r\n          ) : showViewEmployee ? (\r\n            <div className=\"dashboard-form-container\">\r\n              <ViewEditEmployeeDetails \r\n                isInDashboard={true}\r\n                employeeData={selectedEmployeeForView || employees}\r\n                onClose={handleCloseViewEmployee}\r\n                onEmployeeSelect={handleEmployeeSelect}\r\n              />\r\n            </div>\r\n          ) : showChangePassword ? (\r\n            <div className=\"dashboard-form-container\">\r\n              <ChangePasswordModal\r\n                isOpen={true}\r\n                onClose={() => setShowChangePassword(false)}\r\n                onSuccess={() => {\r\n                  setNotification({\r\n                    type: 'success',\r\n                    message: 'Password changed successfully!'\r\n                  });\r\n                  setShowChangePassword(false);\r\n                }}\r\n                isInDashboard={true}\r\n              />\r\n            </div>\r\n          ) : showChangeUserId ? (\r\n            <div className=\"dashboard-form-container\">\r\n              <ChangeUserIdModal\r\n                isOpen={true}\r\n                onClose={() => setShowChangeUserId(false)}\r\n                onSuccess={() => {\r\n                  setNotification({\r\n                    type: 'success',\r\n                    message: 'User ID changed successfully!'\r\n                  });\r\n                  setShowChangeUserId(false);\r\n                }}\r\n                isInDashboard={true}\r\n              />\r\n            </div>\r\n          ) : showPendingKYC ? (\r\n            <div className=\"dashboard-form-container\">\r\n              <div className=\"view-farmer-dashboard\">\r\n                <div className=\"dashboard-header\">\r\n                  <div className=\"header-content\">\r\n                    <div className=\"header-text\">\r\n                      <h1 className=\"dashboard-title\">Pending KYC</h1>\r\n                      <p className=\"dashboard-subtitle\">Review and manage pending KYC applications</p>\r\n                    </div>\r\n                    <button className=\"back-button\" onClick={handleClosePendingKYC}>\r\n                      <i className=\"fas fa-arrow-left\"></i>\r\n                      Back\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n                <div className=\"dashboard-content\">\r\n                  <div className=\"farmers-table-container\">\r\n                    <table className=\"farmers-table\">\r\n                      <thead className=\"table-header\">\r\n                        <tr>\r\n                          <th>Name</th>\r\n                          <th>Phone</th>\r\n                          <th>State</th>\r\n                          <th>District</th>\r\n                          <th>KYC Status</th>\r\n                          <th>Actions</th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody className=\"table-body\">\r\n                        {farmers.filter(farmer => farmer.kycStatus === 'PENDING').map((farmer) => (\r\n                          <tr key={farmer.id} className=\"table-row\">\r\n                            <td className=\"table-cell\">{farmer.name}</td>\r\n                            <td className=\"table-cell\">{farmer.phone}</td>\r\n                            <td className=\"table-cell\">{farmer.state}</td>\r\n                            <td className=\"table-cell\">{farmer.district}</td>\r\n                            <td className=\"table-cell\">\r\n                              <span className=\"status-badge pending\">PENDING</span>\r\n                            </td>\r\n                            <td className=\"table-cell\">\r\n                              <button \r\n                                className=\"action-btn small\"\r\n                                onClick={() => handleKYCDocumentUpload(farmer)}\r\n                              >\r\n                                Review KYC\r\n                              </button>\r\n                            </td>\r\n                          </tr>\r\n                        ))}\r\n                      </tbody>\r\n                    </table>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <>\r\n              {activeTab === 'overview' && renderOverview()}\r\n              {activeTab === 'kyc-overview' && renderKYCOverview()}\r\n              {activeTab === 'farmers' && renderFarmers()}\r\n              {activeTab === 'employees' && renderEmployees()}\r\n              {activeTab === 'registration' && renderRegistration()}\r\n            </>\r\n          )}\r\n          \r\n          {/* Data Fetch Test Component - Remove this after testing */}\r\n          <DataFetchTest />\r\n        </div>\r\n      </main>\r\n\r\n      {/* Modals */}\r\n\r\n      {showAssignmentModal && (\r\n        <AssignmentModal \r\n          farmers={farmers.filter(f => {\r\n            // Check if farmer is unassigned based on backend data structure\r\n            return !f.assignedEmployee || \r\n                   f.assignedEmployee === 'Not Assigned' || \r\n                   f.assignedEmployee === null ||\r\n                   f.assignedEmployee === undefined ||\r\n                   f.assignedEmployee === '';\r\n          })}\r\n          employees={employees}\r\n          onClose={() => setShowAssignmentModal(false)}\r\n          onAssign={handleAssignFarmers}\r\n        />\r\n      )}\r\n\r\n\r\n\r\n      {showEmployeeDetails && selectedEmployeeData && (\r\n                   <ViewEditEmployeeDetails\r\n          employee={selectedEmployeeData}\r\n                     onClose={handleCloseEmployeeDetails}\r\n                     onUpdate={handleUpdateEmployee}\r\n                   />\r\n                 )}\r\n\r\n      {showKYCDocumentUpload && selectedFarmerForKYC && (\r\n                   <KYCDocumentUpload\r\n                     farmer={selectedFarmerForKYC}\r\n                     onClose={handleCloseKYCDocumentUpload}\r\n                     onApprove={handleKYCApprove}\r\n                     onReject={handleKYCReject}\r\n                     onReferBack={handleKYCReferBack}\r\n                   />\r\n                 )}\r\n\r\n      {showRegistrationDetailModal && selectedRegistrationForDetail && (\r\n        <RegistrationDetailModal\r\n          registration={selectedRegistrationForDetail}\r\n          onClose={handleCloseRegistrationDetailModal}\r\n          onUpdate={handleRegistrationUpdate}\r\n          onApprove={handleApproveRegistration}\r\n          onReject={handleRejectRegistration}\r\n                   />\r\n                 )}\r\n\r\n      {/* Notification Toast */}\r\n      {notification && (\r\n        <div className={`notification-toast ${notification.type}`}>\r\n          <span>{notification.message}</span>\r\n          <button onClick={() => setNotification(null)}>×</button>\r\n        </div>\r\n      )}\r\n               </div>\r\n             );\r\n};\r\n\r\nexport default AdminDashboard; "],"names":["DataFetchTest","testResults","setTestResults","useState","loading","setLoading","isUsingRealData","Object","values","some","result","success","count","_jsxs","style","padding","border","borderRadius","margin","backgroundColor","children","_jsx","onClick","async","results","console","log","farmers","adminAPI","getFarmersWithKyc","length","data","slice","error","message","employees","getEmployeesWithStats","registrations","superAdminAPI","getRegistrationList","disabled","color","cursor","keys","marginTop","marginBottom","entries","map","_ref","key","charAt","toUpperCase","fontSize","overflow","JSON","stringify","AdminDashboard","navigate","useNavigate","user","logout","useAuth","activeTab","setActiveTab","setFarmers","setEmployees","selectedEmployee","setSelectedEmployee","showAssignmentModal","setShowAssignmentModal","showFarmerForm","setShowFarmerForm","showEmployeeForm","setShowEmployeeForm","showFarmerDetails","setShowFarmerDetails","selectedFarmerData","setSelectedFarmerData","showEmployeeDetails","setShowEmployeeDetails","selectedEmployeeData","setSelectedEmployeeData","showKYCDocumentUpload","setShowKYCDocumentUpload","selectedFarmerForKYC","setSelectedFarmerForKYC","editingFarmer","setEditingFarmer","editingEmployee","setEditingEmployee","setRegistrations","showRegistrationModal","setShowRegistrationModal","selectedRegistration","setSelectedRegistration","showRegistrationDetailModal","setShowRegistrationDetailModal","selectedRegistrationForDetail","setSelectedRegistrationForDetail","showEmployeeRegistration","setShowEmployeeRegistration","showFarmerRegistration","setShowFarmerRegistration","registrationFilters","setRegistrationFilters","role","status","filters","setFilters","state","district","region","kycStatus","assignmentStatus","employeeFilter","showUserDropdown","setShowUserDropdown","showViewFarmer","setShowViewFarmer","showViewEmployee","setShowViewEmployee","selectedFarmerForView","setSelectedFarmerForView","selectedEmployeeForView","setSelectedEmployeeForView","showPendingKYC","setShowPendingKYC","showChangePassword","setShowChangePassword","showChangeUserId","setShowChangeUserId","notification","setNotification","useEffect","fetchData","handleKYCUpdate","event","detail","setTimeout","window","addEventListener","removeEventListener","farmersData","employeesData","registrationsData","Promise","all","farmersCount","employeesCount","registrationsCount","fallbackFarmers","fallbackEmployees","fallbackRegistrations","getAllFarmers","getAllEmployees","fallbackError","handleViewRegistration","registration","handleApproveRegistration","approveUser","registrationId","prev","reg","id","alert","handleRejectRegistration","rejectUser","getStats","totalFarmers","totalEmployees","unassignedFarmers","filter","f","assignedEmployee","pendingKYC","approvedKYC","referBackKYC","rejectedKYC","handleViewFarmer","farmer","handleViewEmployee","employee","handleKYCDocumentUpload","handleEditFarmer","handleEditEmployee","handleAddFarmer","handleViewFarmers","handleAddEmployee","handleViewEmployees","handleAssignFarmersQuick","handlePendingKYC","className","Date","toLocaleDateString","weekday","year","month","day","ThemeDropdown","UserProfileDropdown","onShowChangePassword","onShowChangeUserId","getGreeting","hour","getHours","name","email","FarmerForm","isInDashboard","editData","onClose","onSubmit","updatedFarmer","farmersAPI","updateFarmer","farmerData","newFarmer","createFarmer","EmployeeRegistrationForm","updatedEmployee","employeesAPI","updateEmployee","employeeData","newEmployee","createEmployee","ViewFarmerRegistrationDetails","handleCloseViewFarmer","onFarmerSelect","ViewEditEmployeeDetails","handleCloseViewEmployee","onEmployeeSelect","ChangePasswordModal","isOpen","onSuccess","type","ChangeUserIdModal","handleClosePendingKYC","phone","_Fragment","renderOverview","stats","renderKYCOverview","assignedFarmers","contactNumber","assignedEmployeeId","approvedCount","pendingCount","referBackCount","rejectedCount","designation","renderFarmers","filteredFarmers","matchesState","matchesDistrict","matchesKycStatus","matchesEmployee","FarmerRegistrationForm","value","onChange","e","target","DataTable","columns","label","render","row","fullName","userName","firstName","mobileNumber","lastName","assignedEmployeeName","actions","renderEmployees","filteredEmployees","totalAssigned","approvedKyc","pendingKyc","customActions","renderRegistration","filteredRegistrations","getFilteredRegistrations","filtered","roleMatch","statusMatch","emailAddress","userEmail","mobile","userRole","userType","registrationStatus","approvalStatus","show","AssignmentModal","undefined","onAssign","_assignments$","farmerIds","assignments","a","farmerId","employeeId","bulkAssignFarmers","bulkError","assignFarmer","individualError","assignment","find","employeeName","assignedDate","toISOString","split","handleCloseEmployeeDetails","onUpdate","updatedData","emp","KYCDocumentUpload","handleCloseKYCDocumentUpload","onApprove","handleKYCApprove","documents","onReject","handleKYCReject","reason","onReferBack","handleKYCReferBack","RegistrationDetailModal","handleCloseRegistrationDetailModal","handleRegistrationUpdate"],"sourceRoot":""}