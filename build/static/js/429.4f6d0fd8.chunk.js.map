{"version":3,"file":"static/js/429.4f6d0fd8.chunk.js","mappings":"8NAGA,MAAMA,EAAMC,EAAAA,EAAMC,OAAO,CACvBC,QAASC,CAAAA,SAAAA,aAAAA,WAAAA,GAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,cAAAA,GAAYC,mBAAqB,4BAC1CC,QAAS,IACTC,QAAS,CACP,eAAgB,sBAKpBP,EAAIQ,aAAaC,QAAQC,KACtBC,IACC,MAAMC,EAAQC,aAAaC,QAAQ,SAWnC,OAVAC,QAAQC,IAAI,sDAA6CJ,EAAQ,UAAY,WAC7EG,QAAQC,IAAI,kCAAyBL,EAAOM,KAC5CF,QAAQC,IAAI,qCAA4BL,EAAOO,QAE3CN,GACFD,EAAOJ,QAAQY,cAAgB,UAAUP,IACzCG,QAAQC,IAAI,0DAEZD,QAAQC,IAAI,6DAEPL,CAAM,IAEdS,IACCL,QAAQK,MAAM,wCAAoCA,GAC3CC,QAAQC,OAAOF,MAK1BpB,EAAIQ,aAAae,SAASb,KACvBa,GAAaA,IACbH,IAAW,IAADI,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAST,GARAd,QAAQK,MAAM,6BAAyB,CACrCU,OAAsB,QAAhBN,EAAEJ,EAAMG,gBAAQ,IAAAC,OAAA,EAAdA,EAAgBM,OACxBC,WAA0B,QAAhBN,EAAEL,EAAMG,gBAAQ,IAAAE,OAAA,EAAdA,EAAgBM,WAC5Bd,IAAiB,QAAdS,EAAEN,EAAMT,cAAM,IAAAe,OAAA,EAAZA,EAAcT,IACnBC,OAAoB,QAAdS,EAAEP,EAAMT,cAAM,IAAAgB,OAAA,EAAZA,EAAcT,OACtBc,QAASZ,EAAMY,UAGc,OAAb,QAAdJ,EAAAR,EAAMG,gBAAQ,IAAAK,OAAA,EAAdA,EAAgBE,SAA6C,OAAb,QAAdD,EAAAT,EAAMG,gBAAQ,IAAAM,OAAA,EAAdA,EAAgBC,QAAgB,CACpEf,QAAQK,MAAM,iFAGO,CACnB,QAAS,OAAQ,YAAa,WAAY,cAC1C,eAAgB,OAAQ,UAAW,SAGxBa,SAAQC,IACnBrB,aAAasB,WAAWD,GACxBE,eAAeD,WAAWD,EAAI,IAIhCrB,aAAawB,QACbD,eAAeC,QAGfC,SAASC,OAAOC,MAAM,KAAKP,SAAQ,SAASQ,GAC1CH,SAASC,OAASE,EAAEC,QAAQ,MAAO,IAAIA,QAAQ,MAAO,cAAe,IAAIC,MAAOC,cAAgB,UAClG,IAGKC,OAAOC,SAASC,SAASC,SAAS,YACrCH,OAAOC,SAASG,KAAO,SAE3B,CACA,OAAO5B,QAAQC,OAAOF,EAAM,IAKzB,MAAM8B,EAAU,CAErBC,MAAOC,gBACkBpD,EAAIqD,KAAK,cAAeC,IAC/BC,KAIlBC,WAAYJ,gBACapD,EAAIyD,IAAI,kBACfF,KAIlBG,SAAUN,gBACepD,EAAIqD,KAAK,iBAAkBM,IAClCJ,KAIlBK,QAASR,gBACgBpD,EAAIqD,KAAK,iBAAkB,CAAEQ,aAAcC,KAClDP,KAIlBQ,UAAWX,gBACcpD,EAAIqD,KAAK,mBAAoB,CAClDQ,aAAcG,EAAQF,MACtBG,IAAKD,EAAQC,OAECV,KAIlBW,UAAWd,gBACcpD,EAAIqD,KAAK,mBAAoB,CAAEQ,aAAcC,KACpDP,KAIlBY,eAAgBf,gBACSpD,EAAIqD,KAAK,wBAAyB,CAAEQ,kBAC3CN,KAIlBa,aAAchB,gBACWpD,EAAIqD,KAAK,uBAAwB,CAAEQ,kBAC1CN,KAIlBc,cAAejB,gBACUpD,EAAIqD,KAAK,uBAAwBiB,IACxCf,KAIlBgB,eAAgBnB,gBACSpD,EAAIqD,KAAK,wBAAyBmB,IACzCjB,KAIlBkB,qBAAsBrB,gBACGpD,EAAIqD,KAAK,+BAAgCiB,IAChDf,KAIlBmB,aAActB,gBACWpD,EAAIqD,KAAK,uBAAwBsB,IACxCpB,KAIlBqB,aAAcxB,gBACWpD,EAAIyD,IAAI,oBACfF,KAIlBsB,UAAWzB,gBACcpD,EAAIqD,KAAK,eAAgB,CAAEyB,eAClCvB,MAKPwB,EAAgB,CAE3BC,YAAa5B,gBACYpD,EAAIyD,IAAI,mCACfF,KAIlB0B,oBAAqB7B,iBAAyB,IAAlB8B,EAAOC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAErC,aADuBnF,EAAIyD,IAAI,iCAAkC,CAAE6B,OAAQJ,KAC3D3B,IAClB,EAGAgC,4BAA6BnC,gBACJpD,EAAIyD,IAAI,wCAAyC,CAAE6B,OAAQ,CAAExD,aACpEyB,KAIlBiC,oBAAqBpC,gBACIpD,EAAIyD,IAAI,wCAAyC,CAAE6B,OAAQ,CAAEG,YACpElC,KAIlBmC,wBAAyBtC,gBACApD,EAAIyD,IAAI,uCACfF,KAIlBoC,iBAAkBvC,gBACOpD,EAAIyD,IAAI,gCACfF,KAIlBqC,eAAgBxC,gBACSpD,EAAIyD,IAAI,8BAA8BoC,MAC7CtC,KAIlBuC,sBAAuB1C,gBACEpD,EAAIyD,IAAI,sCAAsCoC,MACrDtC,KAIlBwC,YAAa3C,MAAO4C,EAAQH,WACH7F,EAAIiG,IAAI,eAAeD,YAAkB,CAAEH,UAClDtC,KAIlB2C,WAAY9C,MAAO4C,EAAQG,WACFnG,EAAIiG,IAAI,eAAeD,WAAiB,CAAElE,OAAQ,cACzDyB,KAIlB6C,WAAYhD,gBACapD,EAAIqG,OAAO,sBAAsBL,MACxCzC,KAIlB+C,WAAYlD,MAAO4C,EAAQrC,WACF3D,EAAIiG,IAAI,sBAAsBD,IAAUrC,IAC/CJ,KAIlBgD,iBAAkBnD,MAAO4C,EAAQlE,WACR9B,EAAIiG,IAAI,eAAeD,WAAiB,CAAElE,YACjDyB,KAIlBiD,kBAAmBpD,gBACMpD,EAAIyD,IAAI,iCACfF,KAIlBkD,kBAAmBrD,MAAOsD,EAAWC,WACZ3G,EAAIqD,KAAK,mCAAoC,CAAEqD,YAAWC,gBACjEpD,KAIlBqD,aAAcxD,MAAOyD,EAAUF,WACN3G,EAAIqD,KAAK,6BAA8B,KAAM,CAClEiC,OAAQ,CAAEuB,WAAUF,iBAENpD,MAKPuD,EAAa,CAExBC,cAAe3D,iBAAyB,IAAlB8B,EAAOC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAE/B,aADuBnF,EAAIyD,IAAI,uBAAwB,CAAE6B,OAAQJ,KACjD3B,IAClB,EAGAyD,cAAe5D,gBACUpD,EAAIyD,IAAI,wBAAwBwD,MACvC1D,KAIlB2D,aAAc9D,gBACWpD,EAAIqD,KAAK,uBAAwB8D,IACxC5D,KAIlB6D,aAAchE,MAAO6D,EAAIE,WACAnH,EAAIiG,IAAI,wBAAwBgB,IAAME,IAC7C5D,KAIlB8D,aAAcjE,gBACWpD,EAAIqG,OAAO,wBAAwBY,MAC1C1D,KAIlBqD,aAAcxD,MAAOyD,EAAUF,WACN3G,EAAIqD,KAAK,wBAAwBwD,WAAmB,CAAEF,gBAC7DpD,KAIlB+D,eAAgBlE,gBACSpD,EAAIyD,IAAI,+BACfF,MAKPgE,EAAW,CAEtBR,cAAe3D,iBAAyB,IAAlB8B,EAAOC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAE/B,aADuBnF,EAAIyD,IAAI,iBAAkB,CAAE6B,OAAQJ,KAC3C3B,IAClB,EAGAiE,gBAAiBpE,iBAAyB,IAAlB8B,EAAOC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAEjC,aADuBnF,EAAIyD,IAAI,mBAAoB,CAAE6B,OAAQJ,KAC7C3B,IAClB,EAGAkE,kBAAmBrE,gBACMpD,EAAIyD,IAAI,4BACfF,KAIlBmE,sBAAuBtE,gBACEpD,EAAIyD,IAAI,gCACfF,KAIlBoE,qBAAsBvE,gBACGpD,EAAIyD,IAAI,oBAAoBkD,uBACnCpD,KAIlBqE,YAAaxE,gBACYpD,EAAIyD,IAAI,qBACfF,KAIlBsE,oBAAqBzE,gBACIpD,EAAIyD,IAAI,8BACfF,KAIlBiD,kBAAmBpD,gBACMpD,EAAIyD,IAAI,2BACfF,KAIlBuE,cAAe1E,iBAAyB,IAAlB8B,EAAOC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAE/B,aADuBnF,EAAIyD,IAAI,wBAAyB,CAAE6B,OAAQJ,KAClD3B,IAClB,EAGAwE,aAAc3E,gBACWpD,EAAIyD,IAAI,qBACfF,KAIlBkD,kBAAmBrD,MAAOsD,EAAWC,WACZ3G,EAAIqD,KAAK,6BAA8B,CAAEqD,YAAWC,gBAC3DpD,KAIlBqD,aAAcxD,MAAOyD,EAAUF,WACN3G,EAAIqD,KAAK,uBAAwB,KAAM,CAC5DiC,OAAQ,CAAEuB,WAAUF,iBAENpD,KAIlByE,qBAAsB5E,iBAAyB,IAAlB8B,EAAOC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAEtC,aADuBnF,EAAIyD,IAAI,4BAA6B,CAAE6B,OAAQJ,KACtD3B,IAClB,EAGA0E,6BAA8B7E,gBACLpD,EAAIyD,IAAI,sCAAuC,CACpE6B,OAAQ,CAAE4C,uBAEI3E,KAIlB4E,oBAAqB/E,iBAAyB,IAAlB8B,EAAOC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAErC,aADuBnF,EAAIyD,IAAI,2BAA4B,CAAE6B,OAAQJ,KACrD3B,IAClB,EAGAgC,4BAA6BnC,gBACJpD,EAAIyD,IAAI,kCAAmC,CAAE6B,OAAQ,CAAExD,aAC9DyB,KAIlB6E,oBAAqBhF,MAAOiF,EAAgBC,WACnBtI,EAAIqD,KAAK,wBAAwBgF,YAA0BC,IAClE/E,KAIlBgF,mBAAoBnF,MAAOiF,EAAgBG,WAClBxI,EAAIqD,KAAK,wBAAwBgF,WAAyBG,IACjEjF,MAKPkF,EAAe,CAE1BjB,gBAAiBpE,iBAAyB,IAAlB8B,EAAOC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAEjC,aADuBnF,EAAIyD,IAAI,yBAA0B,CAAE6B,OAAQJ,KACnD3B,IAClB,EAGAmF,gBAAiBtF,gBACQpD,EAAIyD,IAAI,0BAA0BwD,MACzC1D,KAIlBoF,eAAgBvF,gBACSpD,EAAIqD,KAAK,yBAA0BuF,IAC1CrF,KAIlBsF,eAAgBzF,MAAO6D,EAAI2B,WACF5I,EAAIiG,IAAI,0BAA0BgB,IAAM2B,IAC/CrF,KAIlBuF,eAAgB1F,gBACSpD,EAAIqG,OAAO,0BAA0BY,MAC5C1D,KAIlBwF,iBAAkB3F,gBACOpD,EAAIyD,IAAI,iCACfF,MAKPyF,EAAc,CAEzBC,mBAAoB7F,gBACKpD,EAAIyD,IAAI,+BACfF,KAIlByD,cAAe5D,gBACUpD,EAAIyD,IAAI,qBAAqBoD,MACpCtD,KAIlB6D,aAAchE,MAAOyD,EAAUM,WACNnH,EAAIiG,IAAI,qBAAqBY,IAAYM,IAChD5D,KAIlBC,WAAYJ,gBACapD,EAAIyD,IAAI,sBACfF,KAIlB2F,cAAe9F,gBACUpD,EAAIiG,IAAI,oBAAqBkD,IACpC5F,MAKP6F,EAAS,CAEpBC,WAAYjG,MAAOyD,EAAUyB,WACJtI,EAAIqD,KAAK,QAAQwD,YAAoByB,IAC5C/E,KAIlB+F,UAAWlG,MAAOyD,EAAU2B,WACHxI,EAAIqD,KAAK,QAAQwD,WAAmB2B,IAC3CjF,KAIlBgG,aAAcnG,MAAOyD,EAAU2C,WACNxJ,EAAIqD,KAAK,QAAQwD,eAAuB2C,IAC/CjG,KAIlBkG,aAAcrG,gBACWpD,EAAIyD,IAAI,QAAQoD,aACvBtD,KAIlBmG,mBAAoBtG,MAAOyD,EAAU8C,KAEnC,MAAMC,EAAW,IAAIC,SAGrBC,OAAOC,KAAKJ,GAAW1H,SAAQC,IACzByH,EAAUzH,KACR8H,MAAMC,QAAQN,EAAUzH,IAE1ByH,EAAUzH,GAAKD,SAAQ,CAACiI,EAAMC,KAC5BP,EAASQ,OAAO,GAAGlI,KAAOiI,KAAUD,EAAK,IAI3CN,EAASQ,OAAOlI,EAAKyH,EAAUzH,IAEnC,IAIF,MAAMmI,EAAYpK,EAAAA,EAAMC,OAAO,CAC7BC,QAASC,CAAAA,SAAAA,aAAAA,WAAAA,GAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,cAAAA,GAAYC,mBAAqB,4BAC1CC,QAAS,MAIX+J,EAAU7J,aAAaC,QAAQC,KAAKC,IAClC,MAAMC,EAAQC,aAAaC,QAAQ,SAInC,OAHIF,IACFD,EAAOJ,QAAQY,cAAgB,UAAUP,KAEpCD,CAAM,IAQf,aALuB0J,EAAUhH,KAAK,QAAQwD,WAAmB+C,EAAU,CACzErJ,QAAS,CACP,eAAgB,0BAGJgD,IAAI,EAItB+G,cAAelH,gBACUpD,EAAIyD,IAAI,QAAQoD,cACvBtD,KAIlBgH,kBAAmBnH,MAAOyD,EAAU2D,WACXxK,EAAIyD,IAAI,QAAQoD,eAAsB2D,eAC7CjH,KAIlBkH,kBAAmBrH,MAAOyD,EAAU2D,WACXxK,EAAIqG,OAAO,QAAQQ,eAAsB2D,MAChDjH,K,uFCpkBpB,MA+CA,EA/C6BmH,KAwCzBC,EAAAA,EAAAA,KAACC,EAAAA,EAAwB,CACvBC,eAAe,EACfC,SAzCiB1H,UACnB,IACErC,QAAQC,IAAI,mCAAoCuC,GAGhD,MAAMwH,EAAwB,CAC5BC,KAAM,GAAGzH,EAAK0H,WAAa,MAAM1H,EAAK2H,YAAc,MAAM3H,EAAK4H,UAAY,KAAKC,OAChFC,OAAQ9H,EAAK8H,QAAU,GACvBC,YAAa/H,EAAKgI,KAAO,GACzBzH,MAAOP,EAAKO,OAAS,GACrB0H,YAAajI,EAAKkI,eAAiB,GACnC5F,KAAM,WACN6F,SAAU,oBAIZ,IAAKX,EAAsBC,OAASD,EAAsBjH,QAAUiH,EAAsBS,YAExF,YADAG,MAAM,6EAIR5K,QAAQC,IAAI,sCAAuC+J,GAGnD,MAAMxJ,QAAiB2B,EAAAA,GAAQQ,SAASqH,GACxChK,QAAQC,IAAI,oCAAqCO,GAEjDoK,MAAM,kIAKR,CAAE,MAAOvK,GACPL,QAAQK,MAAM,0CAA2CA,GACzDuK,MAAM,2CACR,I","sources":["api/apiService.js","pages/EmployeeRegistration.jsx"],"sourcesContent":["import axios from 'axios';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8080/api',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    console.log('🔐 API Request - Token from localStorage:', token ? 'Present' : 'Missing');\n    console.log('🔐 API Request - URL:', config.url);\n    console.log('🔐 API Request - Method:', config.method);\n    \n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n      console.log('🔐 API Request - Authorization header added');\n    } else {\n      console.log('⚠️ API Request - No token found in localStorage');\n    }\n    return config;\n  },\n  (error) => {\n    console.error('❌ API Request interceptor error:', error);\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor for error handling\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    console.error('❌ API Response Error:', {\n      status: error.response?.status,\n      statusText: error.response?.statusText,\n      url: error.config?.url,\n      method: error.config?.method,\n      message: error.message\n    });\n    \n    if (error.response?.status === 401 || error.response?.status === 403) {\n      console.error('🔐 Authentication failed - clearing tokens and redirecting to login');\n      \n      // Comprehensive token clearing\n      const keysToRemove = [\n        'token', 'user', 'authToken', 'jwtToken', 'accessToken', \n        'refreshToken', 'auth', 'session', 'login'\n      ];\n      \n      keysToRemove.forEach(key => {\n        localStorage.removeItem(key);\n        sessionStorage.removeItem(key);\n      });\n      \n      // Clear all storage\n      localStorage.clear();\n      sessionStorage.clear();\n      \n      // Clear all cookies\n      document.cookie.split(\";\").forEach(function(c) { \n        document.cookie = c.replace(/^ +/, \"\").replace(/=.*/, \"=;expires=\" + new Date().toUTCString() + \";path=/\"); \n      });\n      \n      // Only redirect if not already on login page\n      if (!window.location.pathname.includes('/login')) {\n        window.location.href = '/login';\n      }\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Authentication API calls\nexport const authAPI = {\n  // Login\n  login: async (credentials) => {\n    const response = await api.post('/auth/login', credentials);\n    return response.data;\n  },\n\n  // Get user profile\n  getProfile: async () => {\n    const response = await api.get('/auth/profile');\n    return response.data;\n  },\n\n  // Register user\n  register: async (userData) => {\n    const response = await api.post('/auth/register', userData);\n    return response.data;\n  },\n\n  // Send OTP\n  sendOTP: async (email) => {\n    const response = await api.post('/auth/send-otp', { emailOrPhone: email });\n    return response.data;\n  },\n\n  // Verify OTP\n  verifyOTP: async (otpData) => {\n    const response = await api.post('/auth/verify-otp', { \n      emailOrPhone: otpData.email, \n      otp: otpData.otp \n    });\n    return response.data;\n  },\n\n  // Resend OTP\n  resendOTP: async (email) => {\n    const response = await api.post('/auth/resend-otp', { emailOrPhone: email });\n    return response.data;\n  },\n\n  // Forgot password\n  forgotPassword: async (emailOrPhone) => {\n    const response = await api.post('/auth/forgot-password', { emailOrPhone });\n    return response.data;\n  },\n\n  // Forgot user ID\n  forgotUserId: async (emailOrPhone) => {\n    const response = await api.post('/auth/forgot-user-id', { emailOrPhone });\n    return response.data;\n  },\n\n  // Reset password\n  resetPassword: async (resetData) => {\n    const response = await api.post('/auth/reset-password', resetData);\n    return response.data;\n  },\n\n  // Change password\n  changePassword: async (passwordData) => {\n    const response = await api.post('/auth/change-password', passwordData);\n    return response.data;\n  },\n\n  // Reset password (for first-time password change)\n  resetPasswordConfirm: async (resetData) => {\n    const response = await api.post('/auth/reset-password/confirm', resetData);\n    return response.data;\n  },\n\n  // Change user ID\n  changeUserId: async (userIdData) => {\n    const response = await api.post('/auth/change-user-id', userIdData);\n    return response.data;\n  },\n\n  // Get countries\n  getCountries: async () => {\n    const response = await api.get('/auth/countries');\n    return response.data;\n  },\n\n  // Get states\n  getStates: async (countryId) => {\n    const response = await api.post('/auth/states', { countryId });\n    return response.data;\n  }\n};\n\n// Super Admin API calls\nexport const superAdminAPI = {\n  // Get all users (registrations)\n  getAllUsers: async () => {\n    const response = await api.get('/super-admin/registration-list');\n    return response.data;\n  },\n\n  // Get registration list with filters\n  getRegistrationList: async (filters = {}) => {\n    const response = await api.get('/super-admin/registration-list', { params: filters });\n    return response.data;\n  },\n\n  // Get registration list by status\n  getRegistrationListByStatus: async (status) => {\n    const response = await api.get('/super-admin/registration-list/filter', { params: { status } });\n    return response.data;\n  },\n\n  // Search registrations\n  searchRegistrations: async (query) => {\n    const response = await api.get('/super-admin/registration-list/search', { params: { query } });\n    return response.data;\n  },\n\n  // Get pending registrations\n  getPendingRegistrations: async () => {\n    const response = await api.get('/super-admin/pending-registrations');\n    return response.data;\n  },\n\n  // Get approved users\n  getApprovedUsers: async () => {\n    const response = await api.get('/super-admin/approved-users');\n    return response.data;\n  },\n\n  // Get users by role\n  getUsersByRole: async (role) => {\n    const response = await api.get(`/super-admin/users/by-role/${role}`);\n    return response.data;\n  },\n\n  // Get pending users by role\n  getPendingUsersByRole: async (role) => {\n    const response = await api.get(`/super-admin/pending-users/by-role/${role}`);\n    return response.data;\n  },\n\n  // Approve user\n  approveUser: async (userId, role) => {\n    const response = await api.put(`/auth/users/${userId}/approve`, { role });\n    return response.data;\n  },\n\n  // Reject user (update status to REJECTED)\n  rejectUser: async (userId, reason) => {\n    const response = await api.put(`/auth/users/${userId}/status`, { status: 'REJECTED' });\n    return response.data;\n  },\n\n  // Delete user\n  deleteUser: async (userId) => {\n    const response = await api.delete(`/super-admin/users/${userId}`);\n    return response.data;\n  },\n\n  // Update user\n  updateUser: async (userId, userData) => {\n    const response = await api.put(`/super-admin/users/${userId}`, userData);\n    return response.data;\n  },\n\n  // Update user status\n  updateUserStatus: async (userId, status) => {\n    const response = await api.put(`/auth/users/${userId}/status`, { status });\n    return response.data;\n  },\n\n  // Get dashboard stats\n  getDashboardStats: async () => {\n    const response = await api.get('/super-admin/dashboard/stats');\n    return response.data;\n  },\n\n  // Bulk assign farmers to employee\n  bulkAssignFarmers: async (farmerIds, employeeId) => {\n    const response = await api.post('/super-admin/bulk-assign-farmers', { farmerIds, employeeId });\n    return response.data;\n  },\n\n  // Single assign farmer to employee (fallback)\n  assignFarmer: async (farmerId, employeeId) => {\n    const response = await api.post('/super-admin/assign-farmer', null, { \n      params: { farmerId, employeeId } \n    });\n    return response.data;\n  }\n};\n\n// Farmers API calls\nexport const farmersAPI = {\n  // Get all farmers\n  getAllFarmers: async (filters = {}) => {\n    const response = await api.get('/super-admin/farmers', { params: filters });\n    return response.data;\n  },\n\n  // Get farmer by ID\n  getFarmerById: async (id) => {\n    const response = await api.get(`/super-admin/farmers/${id}`);\n    return response.data;\n  },\n\n  // Create farmer\n  createFarmer: async (farmerData) => {\n    const response = await api.post('/super-admin/farmers', farmerData);\n    return response.data;\n  },\n\n  // Update farmer\n  updateFarmer: async (id, farmerData) => {\n    const response = await api.put(`/super-admin/farmers/${id}`, farmerData);\n    return response.data;\n  },\n\n  // Delete farmer\n  deleteFarmer: async (id) => {\n    const response = await api.delete(`/super-admin/farmers/${id}`);\n    return response.data;\n  },\n\n  // Assign farmer to employee\n  assignFarmer: async (farmerId, employeeId) => {\n    const response = await api.post(`/super-admin/farmers/${farmerId}/assign`, { employeeId });\n    return response.data;\n  },\n\n  // Get farmer statistics\n  getFarmerStats: async () => {\n    const response = await api.get('/super-admin/farmers/stats');\n    return response.data;\n  }\n};\n\n// Admin-specific API calls\nexport const adminAPI = {\n  // Get all farmers for admin\n  getAllFarmers: async (filters = {}) => {\n    const response = await api.get('/admin/farmers', { params: filters });\n    return response.data;\n  },\n\n  // Get all employees for admin\n  getAllEmployees: async (filters = {}) => {\n    const response = await api.get('/admin/employees', { params: filters });\n    return response.data;\n  },\n\n  // Get farmers with KYC status\n  getFarmersWithKyc: async () => {\n    const response = await api.get('/admin/farmers-with-kyc');\n    return response.data;\n  },\n\n  // Get employees with stats\n  getEmployeesWithStats: async () => {\n    const response = await api.get('/admin/employees-with-stats');\n    return response.data;\n  },\n\n  // Get farmers by employee\n  getFarmersByEmployee: async (employeeId) => {\n    const response = await api.get(`/admin/employees/${employeeId}/assigned-farmers`);\n    return response.data;\n  },\n\n  // Get todo list for admin\n  getTodoList: async () => {\n    const response = await api.get('/admin/todo-list');\n    return response.data;\n  },\n\n  // Get enhanced todo list\n  getEnhancedTodoList: async () => {\n    const response = await api.get('/admin/enhanced-todo-list');\n    return response.data;\n  },\n\n  // Get dashboard stats\n  getDashboardStats: async () => {\n    const response = await api.get('/admin/dashboard-stats');\n    return response.data;\n  },\n\n  // Filter farmers\n  filterFarmers: async (filters = {}) => {\n    const response = await api.get('/admin/farmers/filter', { params: filters });\n    return response.data;\n  },\n\n  // Get locations\n  getLocations: async () => {\n    const response = await api.get('/admin/locations');\n    return response.data;\n  },\n\n  // Bulk assign farmers to employee\n  bulkAssignFarmers: async (farmerIds, employeeId) => {\n    const response = await api.post('/admin/bulk-assign-farmers', { farmerIds, employeeId });\n    return response.data;\n  },\n\n  // Single assign farmer to employee (fallback)\n  assignFarmer: async (farmerId, employeeId) => {\n    const response = await api.post('/admin/assign-farmer', null, { \n      params: { farmerId, employeeId } \n    });\n    return response.data;\n  },\n\n  // Get assignment history\n  getAssignmentHistory: async (filters = {}) => {\n    const response = await api.get('/admin/assignment-history', { params: filters });\n    return response.data;\n  },\n\n  // Get farmers by assignment status\n  getFarmersByAssignmentStatus: async (assignmentStatus) => {\n    const response = await api.get('/admin/farmers/by-assignment-status', { \n      params: { assignmentStatus } \n    });\n    return response.data;\n  },\n\n  // Get all registrations for admin\n  getAllRegistrations: async (filters = {}) => {\n    const response = await api.get('/admin/registration-list', { params: filters });\n    return response.data;\n  },\n\n  // Get registration list by status for admin\n  getRegistrationListByStatus: async (status) => {\n    const response = await api.get('/admin/registration-list/filter', { params: { status } });\n    return response.data;\n  },\n\n  // Approve registration for admin\n  approveRegistration: async (registrationId, approvalData) => {\n    const response = await api.post(`/admin/registrations/${registrationId}/approve`, approvalData);\n    return response.data;\n  },\n\n  // Reject registration for admin\n  rejectRegistration: async (registrationId, rejectionData) => {\n    const response = await api.post(`/admin/registrations/${registrationId}/reject`, rejectionData);\n    return response.data;\n  }\n};\n\n// Employees API calls\nexport const employeesAPI = {\n  // Get all employees\n  getAllEmployees: async (filters = {}) => {\n    const response = await api.get('/super-admin/employees', { params: filters });\n    return response.data;\n  },\n\n  // Get employee by ID\n  getEmployeeById: async (id) => {\n    const response = await api.get(`/super-admin/employees/${id}`);\n    return response.data;\n  },\n\n  // Create employee\n  createEmployee: async (employeeData) => {\n    const response = await api.post('/super-admin/employees', employeeData);\n    return response.data;\n  },\n\n  // Update employee\n  updateEmployee: async (id, employeeData) => {\n    const response = await api.put(`/super-admin/employees/${id}`, employeeData);\n    return response.data;\n  },\n\n  // Delete employee\n  deleteEmployee: async (id) => {\n    const response = await api.delete(`/super-admin/employees/${id}`);\n    return response.data;\n  },\n\n  // Get employee statistics\n  getEmployeeStats: async () => {\n    const response = await api.get('/super-admin/employees/stats');\n    return response.data;\n  }\n};\n\n// Employee-specific API calls (for employee dashboard)\nexport const employeeAPI = {\n  // Get assigned farmers for employee\n  getAssignedFarmers: async () => {\n    const response = await api.get('/employee/assigned-farmers');\n    return response.data;\n  },\n\n  // Get farmer details by ID\n  getFarmerById: async (farmerId) => {\n    const response = await api.get(`/employee/farmers/${farmerId}`);\n    return response.data;\n  },\n\n  // Update farmer information\n  updateFarmer: async (farmerId, farmerData) => {\n    const response = await api.put(`/employee/farmers/${farmerId}`, farmerData);\n    return response.data;\n  },\n\n  // Get employee profile\n  getProfile: async () => {\n    const response = await api.get('/employee/profile');\n    return response.data;\n  },\n\n  // Update employee profile\n  updateProfile: async (profileData) => {\n    const response = await api.put('/employee/profile', profileData);\n    return response.data;\n  }\n};\n\n// KYC API calls\nexport const kycAPI = {\n  // Approve KYC\n  approveKYC: async (farmerId, approvalData) => {\n    const response = await api.post(`/kyc/${farmerId}/approve`, approvalData);\n    return response.data;\n  },\n\n  // Reject KYC\n  rejectKYC: async (farmerId, rejectionData) => {\n    const response = await api.post(`/kyc/${farmerId}/reject`, rejectionData);\n    return response.data;\n  },\n\n  // Refer back KYC\n  referBackKYC: async (farmerId, referralData) => {\n    const response = await api.post(`/kyc/${farmerId}/refer-back`, referralData);\n    return response.data;\n  },\n\n  // Get KYC status\n  getKYCStatus: async (farmerId) => {\n    const response = await api.get(`/kyc/${farmerId}/status`);\n    return response.data;\n  },\n\n  // Upload KYC documents\n  uploadKYCDocuments: async (farmerId, documents) => {\n    // Create FormData for file upload\n    const formData = new FormData();\n    \n    // Add files to FormData\n    Object.keys(documents).forEach(key => {\n      if (documents[key]) {\n        if (Array.isArray(documents[key])) {\n          // Handle multiple files\n          documents[key].forEach((file, index) => {\n            formData.append(`${key}[${index}]`, file);\n          });\n        } else {\n          // Handle single file\n          formData.append(key, documents[key]);\n        }\n      }\n    });\n\n    // Use separate axios instance for file uploads (no Content-Type header)\n    const uploadApi = axios.create({\n      baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8080/api',\n      timeout: 30000, // Longer timeout for file uploads\n    });\n\n    // Add auth token to upload requests\n    uploadApi.interceptors.request.use((config) => {\n      const token = localStorage.getItem('token');\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    });\n\n    const response = await uploadApi.post(`/kyc/${farmerId}/upload`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    return response.data;\n  },\n\n  // Get KYC history\n  getKYCHistory: async (farmerId) => {\n    const response = await api.get(`/kyc/${farmerId}/history`);\n    return response.data;\n  },\n\n  // Get KYC document download URL\n  getKYCDocumentUrl: async (farmerId, documentType) => {\n    const response = await api.get(`/kyc/${farmerId}/documents/${documentType}/download`);\n    return response.data;\n  },\n\n  // Delete KYC document\n  deleteKYCDocument: async (farmerId, documentType) => {\n    const response = await api.delete(`/kyc/${farmerId}/documents/${documentType}`);\n    return response.data;\n  }\n};\n\nexport default api;","import React from 'react';\r\nimport EmployeeRegistrationForm from '../components/EmployeeRegistrationForm';\r\nimport { authAPI } from '../api/apiService';\r\n\r\nconst EmployeeRegistration = () => {\r\n  const handleSubmit = async (data) => {\r\n    try {\r\n      console.log('Employee registration submitted:', data);\r\n      \r\n      // Extract basic registration data from the detailed form (flat structure)\r\n      const basicRegistrationData = {\r\n        name: `${data.firstName || ''} ${data.middleName || ''} ${data.lastName || ''}`.trim(),\r\n        gender: data.gender || '',\r\n        dateOfBirth: data.dob || '',\r\n        email: data.email || '',\r\n        phoneNumber: data.contactNumber || '',\r\n        role: 'EMPLOYEE',\r\n        password: 'TempPassword123!' // Generate a temporary password\r\n      };\r\n      \r\n      // Validate that we have the required basic fields\r\n      if (!basicRegistrationData.name || !basicRegistrationData.email || !basicRegistrationData.phoneNumber) {\r\n        alert('Please fill in all required basic information (name, email, phone number)');\r\n        return;\r\n      }\r\n      \r\n      console.log('Submitting basic registration data:', basicRegistrationData);\r\n      \r\n      // Submit basic registration to backend using authAPI.register\r\n      const response = await authAPI.register(basicRegistrationData);\r\n      console.log('Employee registration successful:', response);\r\n      \r\n      alert('Employee registration completed successfully! Please wait for admin approval. You will receive login credentials once approved.');\r\n      \r\n      // Note: The detailed profile data can be saved later when the user is approved\r\n      // and logs in for the first time, or through a separate API endpoint\r\n      \r\n    } catch (error) {\r\n      console.error('Error submitting employee registration:', error);\r\n      alert('Error submitting form. Please try again.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <EmployeeRegistrationForm\r\n      isInDashboard={false}\r\n      onSubmit={handleSubmit}\r\n    />\r\n  );\r\n};\r\n\r\nexport default EmployeeRegistration; "],"names":["api","axios","create","baseURL","process","REACT_APP_API_URL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","console","log","url","method","Authorization","error","Promise","reject","response","_error$response","_error$response2","_error$config","_error$config2","_error$response3","_error$response4","status","statusText","message","forEach","key","removeItem","sessionStorage","clear","document","cookie","split","c","replace","Date","toUTCString","window","location","pathname","includes","href","authAPI","login","async","post","credentials","data","getProfile","get","register","userData","sendOTP","emailOrPhone","email","verifyOTP","otpData","otp","resendOTP","forgotPassword","forgotUserId","resetPassword","resetData","changePassword","passwordData","resetPasswordConfirm","changeUserId","userIdData","getCountries","getStates","countryId","superAdminAPI","getAllUsers","getRegistrationList","filters","arguments","length","undefined","params","getRegistrationListByStatus","searchRegistrations","query","getPendingRegistrations","getApprovedUsers","getUsersByRole","role","getPendingUsersByRole","approveUser","userId","put","rejectUser","reason","deleteUser","delete","updateUser","updateUserStatus","getDashboardStats","bulkAssignFarmers","farmerIds","employeeId","assignFarmer","farmerId","farmersAPI","getAllFarmers","getFarmerById","id","createFarmer","farmerData","updateFarmer","deleteFarmer","getFarmerStats","adminAPI","getAllEmployees","getFarmersWithKyc","getEmployeesWithStats","getFarmersByEmployee","getTodoList","getEnhancedTodoList","filterFarmers","getLocations","getAssignmentHistory","getFarmersByAssignmentStatus","assignmentStatus","getAllRegistrations","approveRegistration","registrationId","approvalData","rejectRegistration","rejectionData","employeesAPI","getEmployeeById","createEmployee","employeeData","updateEmployee","deleteEmployee","getEmployeeStats","employeeAPI","getAssignedFarmers","updateProfile","profileData","kycAPI","approveKYC","rejectKYC","referBackKYC","referralData","getKYCStatus","uploadKYCDocuments","documents","formData","FormData","Object","keys","Array","isArray","file","index","append","uploadApi","getKYCHistory","getKYCDocumentUrl","documentType","deleteKYCDocument","EmployeeRegistration","_jsx","EmployeeRegistrationForm","isInDashboard","onSubmit","basicRegistrationData","name","firstName","middleName","lastName","trim","gender","dateOfBirth","dob","phoneNumber","contactNumber","password","alert"],"sourceRoot":""}