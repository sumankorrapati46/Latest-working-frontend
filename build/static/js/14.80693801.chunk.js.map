{"version":3,"file":"static/js/14.80693801.chunk.js","mappings":"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","sources":["api/apiService.js","pages/Login.jsx"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Create axios instance\r\nconst api = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8080/api',\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor to add auth token\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor for error handling\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('user');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Authentication API calls\r\nexport const authAPI = {\r\n  // Login\r\n  login: async (credentials) => {\r\n    const response = await api.post('/auth/login', credentials);\r\n    return response.data;\r\n  },\r\n\r\n  // Get user profile\r\n  getProfile: async () => {\r\n    const response = await api.get('/auth/profile');\r\n    return response.data;\r\n  },\r\n\r\n  // Register user\r\n  register: async (userData) => {\r\n    const response = await api.post('/auth/register', userData);\r\n    return response.data;\r\n  },\r\n\r\n  // Send OTP\r\n  sendOTP: async (email) => {\r\n    const response = await api.post('/auth/send-otp', { emailOrPhone: email });\r\n    return response.data;\r\n  },\r\n\r\n  // Verify OTP\r\n  verifyOTP: async (otpData) => {\r\n    const response = await api.post('/auth/verify-otp', { \r\n      emailOrPhone: otpData.email, \r\n      otp: otpData.otp \r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Resend OTP\r\n  resendOTP: async (email) => {\r\n    const response = await api.post('/auth/resend-otp', { emailOrPhone: email });\r\n    return response.data;\r\n  },\r\n\r\n  // Forgot password\r\n  forgotPassword: async (emailOrPhone) => {\r\n    const response = await api.post('/auth/forgot-password', { emailOrPhone });\r\n    return response.data;\r\n  },\r\n\r\n  // Forgot user ID\r\n  forgotUserId: async (emailOrPhone) => {\r\n    const response = await api.post('/auth/forgot-user-id', { emailOrPhone });\r\n    return response.data;\r\n  },\r\n\r\n  // Reset password\r\n  resetPassword: async (resetData) => {\r\n    const response = await api.post('/auth/reset-password', resetData);\r\n    return response.data;\r\n  },\r\n\r\n  // Change password\r\n  changePassword: async (passwordData) => {\r\n    const response = await api.post('/auth/change-password', passwordData);\r\n    return response.data;\r\n  },\r\n\r\n  // Change user ID\r\n  changeUserId: async (userIdData) => {\r\n    const response = await api.post('/auth/change-user-id', userIdData);\r\n    return response.data;\r\n  },\r\n\r\n  // Get countries\r\n  getCountries: async () => {\r\n    const response = await api.get('/auth/countries');\r\n    return response.data;\r\n  },\r\n\r\n  // Get states\r\n  getStates: async (countryId) => {\r\n    const response = await api.post('/auth/states', { countryId });\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// Super Admin API calls\r\nexport const superAdminAPI = {\r\n  // Get all users (registrations)\r\n  getAllUsers: async () => {\r\n    const response = await api.get('/super-admin/registration-list');\r\n    return response.data;\r\n  },\r\n\r\n  // Get registration list with filters\r\n  getRegistrationList: async (filters = {}) => {\r\n    const response = await api.get('/super-admin/registration-list', { params: filters });\r\n    return response.data;\r\n  },\r\n\r\n  // Get registration list by status\r\n  getRegistrationListByStatus: async (status) => {\r\n    const response = await api.get('/super-admin/registration-list/filter', { params: { status } });\r\n    return response.data;\r\n  },\r\n\r\n  // Search registrations\r\n  searchRegistrations: async (query) => {\r\n    const response = await api.get('/super-admin/registration-list/search', { params: { query } });\r\n    return response.data;\r\n  },\r\n\r\n  // Get pending registrations\r\n  getPendingRegistrations: async () => {\r\n    const response = await api.get('/super-admin/pending-registrations');\r\n    return response.data;\r\n  },\r\n\r\n  // Get approved users\r\n  getApprovedUsers: async () => {\r\n    const response = await api.get('/super-admin/approved-users');\r\n    return response.data;\r\n  },\r\n\r\n  // Get users by role\r\n  getUsersByRole: async (role) => {\r\n    const response = await api.get(`/super-admin/users/by-role/${role}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get pending users by role\r\n  getPendingUsersByRole: async (role) => {\r\n    const response = await api.get(`/super-admin/pending-users/by-role/${role}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Approve user\r\n  approveUser: async (userId, role) => {\r\n    const response = await api.put(`/auth/users/${userId}/approve`, { role });\r\n    return response.data;\r\n  },\r\n\r\n  // Reject user (update status to REJECTED)\r\n  rejectUser: async (userId, reason) => {\r\n    const response = await api.put(`/auth/users/${userId}/status`, { status: 'REJECTED' });\r\n    return response.data;\r\n  },\r\n\r\n  // Delete user\r\n  deleteUser: async (userId) => {\r\n    const response = await api.delete(`/super-admin/users/${userId}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Update user\r\n  updateUser: async (userId, userData) => {\r\n    const response = await api.put(`/super-admin/users/${userId}`, userData);\r\n    return response.data;\r\n  },\r\n\r\n  // Update user status\r\n  updateUserStatus: async (userId, status) => {\r\n    const response = await api.put(`/auth/users/${userId}/status`, { status });\r\n    return response.data;\r\n  },\r\n\r\n  // Get dashboard stats\r\n  getDashboardStats: async () => {\r\n    const response = await api.get('/super-admin/dashboard/stats');\r\n    return response.data;\r\n  },\r\n\r\n  // Bulk assign farmers to employee\r\n  bulkAssignFarmers: async (farmerIds, employeeId) => {\r\n    const response = await api.post('/super-admin/bulk-assign-farmers', { farmerIds, employeeId });\r\n    return response.data;\r\n  },\r\n\r\n  // Single assign farmer to employee (fallback)\r\n  assignFarmer: async (farmerId, employeeId) => {\r\n    const response = await api.post('/super-admin/assign-farmer', null, { \r\n      params: { farmerId, employeeId } \r\n    });\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// Farmers API calls\r\nexport const farmersAPI = {\r\n  // Get all farmers\r\n  getAllFarmers: async (filters = {}) => {\r\n    const response = await api.get('/super-admin/farmers', { params: filters });\r\n    return response.data;\r\n  },\r\n\r\n  // Get farmer by ID\r\n  getFarmerById: async (id) => {\r\n    const response = await api.get(`/super-admin/farmers/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Create farmer\r\n  createFarmer: async (farmerData) => {\r\n    const response = await api.post('/super-admin/farmers', farmerData);\r\n    return response.data;\r\n  },\r\n\r\n  // Update farmer\r\n  updateFarmer: async (id, farmerData) => {\r\n    const response = await api.put(`/super-admin/farmers/${id}`, farmerData);\r\n    return response.data;\r\n  },\r\n\r\n  // Delete farmer\r\n  deleteFarmer: async (id) => {\r\n    const response = await api.delete(`/super-admin/farmers/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Assign farmer to employee\r\n  assignFarmer: async (farmerId, employeeId) => {\r\n    const response = await api.post(`/super-admin/farmers/${farmerId}/assign`, { employeeId });\r\n    return response.data;\r\n  },\r\n\r\n  // Get farmer statistics\r\n  getFarmerStats: async () => {\r\n    const response = await api.get('/super-admin/farmers/stats');\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// Admin-specific API calls\r\nexport const adminAPI = {\r\n  // Get all farmers for admin\r\n  getAllFarmers: async (filters = {}) => {\r\n    const response = await api.get('/admin/farmers', { params: filters });\r\n    return response.data;\r\n  },\r\n\r\n  // Get all employees for admin\r\n  getAllEmployees: async (filters = {}) => {\r\n    const response = await api.get('/admin/employees', { params: filters });\r\n    return response.data;\r\n  },\r\n\r\n  // Get farmers with KYC status\r\n  getFarmersWithKyc: async () => {\r\n    const response = await api.get('/admin/farmers-with-kyc');\r\n    return response.data;\r\n  },\r\n\r\n  // Get employees with stats\r\n  getEmployeesWithStats: async () => {\r\n    const response = await api.get('/admin/employees-with-stats');\r\n    return response.data;\r\n  },\r\n\r\n  // Get farmers by employee\r\n  getFarmersByEmployee: async (employeeId) => {\r\n    const response = await api.get(`/admin/employees/${employeeId}/assigned-farmers`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get todo list for admin\r\n  getTodoList: async () => {\r\n    const response = await api.get('/admin/todo-list');\r\n    return response.data;\r\n  },\r\n\r\n  // Get enhanced todo list\r\n  getEnhancedTodoList: async () => {\r\n    const response = await api.get('/admin/enhanced-todo-list');\r\n    return response.data;\r\n  },\r\n\r\n  // Get dashboard stats\r\n  getDashboardStats: async () => {\r\n    const response = await api.get('/admin/dashboard-stats');\r\n    return response.data;\r\n  },\r\n\r\n  // Filter farmers\r\n  filterFarmers: async (filters = {}) => {\r\n    const response = await api.get('/admin/farmers/filter', { params: filters });\r\n    return response.data;\r\n  },\r\n\r\n  // Get locations\r\n  getLocations: async () => {\r\n    const response = await api.get('/admin/locations');\r\n    return response.data;\r\n  },\r\n\r\n  // Bulk assign farmers to employee\r\n  bulkAssignFarmers: async (farmerIds, employeeId) => {\r\n    const response = await api.post('/admin/bulk-assign-farmers', { farmerIds, employeeId });\r\n    return response.data;\r\n  },\r\n\r\n  // Single assign farmer to employee (fallback)\r\n  assignFarmer: async (farmerId, employeeId) => {\r\n    const response = await api.post('/admin/assign-farmer', null, { \r\n      params: { farmerId, employeeId } \r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Get assignment history\r\n  getAssignmentHistory: async (filters = {}) => {\r\n    const response = await api.get('/admin/assignment-history', { params: filters });\r\n    return response.data;\r\n  },\r\n\r\n  // Get farmers by assignment status\r\n  getFarmersByAssignmentStatus: async (assignmentStatus) => {\r\n    const response = await api.get('/admin/farmers/by-assignment-status', { \r\n      params: { assignmentStatus } \r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Get all registrations for admin\r\n  getAllRegistrations: async (filters = {}) => {\r\n    const response = await api.get('/admin/registration-list', { params: filters });\r\n    return response.data;\r\n  },\r\n\r\n  // Get registration list by status for admin\r\n  getRegistrationListByStatus: async (status) => {\r\n    const response = await api.get('/admin/registration-list/filter', { params: { status } });\r\n    return response.data;\r\n  },\r\n\r\n  // Approve registration for admin\r\n  approveRegistration: async (registrationId, approvalData) => {\r\n    const response = await api.post(`/admin/registrations/${registrationId}/approve`, approvalData);\r\n    return response.data;\r\n  },\r\n\r\n  // Reject registration for admin\r\n  rejectRegistration: async (registrationId, rejectionData) => {\r\n    const response = await api.post(`/admin/registrations/${registrationId}/reject`, rejectionData);\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// Employees API calls (for Super Admin and Admin)\r\nexport const employeesAPI = {\r\n  // Get all employees\r\n  getAllEmployees: async (filters = {}) => {\r\n    const response = await api.get('/super-admin/employees', { params: filters });\r\n    return response.data;\r\n  },\r\n\r\n  // Get employee by ID\r\n  getEmployeeById: async (id) => {\r\n    const response = await api.get(`/super-admin/employees/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Create employee\r\n  createEmployee: async (employeeData) => {\r\n    const response = await api.post('/super-admin/employees', employeeData);\r\n    return response.data;\r\n  },\r\n\r\n  // Update employee\r\n  updateEmployee: async (id, employeeData) => {\r\n    const response = await api.put(`/super-admin/employees/${id}`, employeeData);\r\n    return response.data;\r\n  },\r\n\r\n  // Delete employee\r\n  deleteEmployee: async (id) => {\r\n    const response = await api.delete(`/super-admin/employees/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get assigned farmers for employee\r\n  getAssignedFarmers: async (employeeId) => {\r\n    const response = await api.get(`/super-admin/employees/${employeeId}/assigned-farmers`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get employee statistics\r\n  getEmployeeStats: async () => {\r\n    const response = await api.get('/super-admin/employees/stats');\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// Employee-specific API calls (for Employee role)\r\nexport const employeeAPI = {\r\n  // Get assigned farmers for current employee\r\n  getAssignedFarmers: async (employeeId) => {\r\n    try {\r\n      console.log('🔄 Fetching assigned farmers from dashboard endpoint');\r\n      const response = await api.get('/employees/dashboard/assigned-farmers');\r\n      console.log('✅ Success with dashboard endpoint');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('❌ Failed to fetch assigned farmers:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get employee profile\r\n  getProfile: async () => {\r\n    const response = await api.get('/employees/profile');\r\n    return response.data;\r\n  },\r\n\r\n  // Update employee profile\r\n  updateProfile: async (profileData) => {\r\n    const response = await api.put('/employees/profile', profileData);\r\n    return response.data;\r\n  },\r\n\r\n  // Get employee statistics\r\n  getStats: async () => {\r\n    const response = await api.get('/employees/stats');\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// Registrations API calls\r\nexport const registrationsAPI = {\r\n  // Get all registrations\r\n  getAllRegistrations: async (filters = {}) => {\r\n    const response = await api.get('/registrations', { params: filters });\r\n    return response.data;\r\n  },\r\n\r\n  // Get registration by ID\r\n  getRegistrationById: async (id) => {\r\n    const response = await api.get(`/registrations/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Approve registration\r\n  approveRegistration: async (id, approvalData) => {\r\n    const response = await api.post(`/registrations/${id}/approve`, approvalData);\r\n    return response.data;\r\n  },\r\n\r\n  // Reject registration\r\n  rejectRegistration: async (id, rejectionData) => {\r\n    const response = await api.post(`/registrations/${id}/reject`, rejectionData);\r\n    return response.data;\r\n  },\r\n\r\n  // Get registration statistics\r\n  getRegistrationStats: async () => {\r\n    const response = await api.get('/registrations/stats');\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// KYC API calls\r\nexport const kycAPI = {\r\n  // Upload KYC documents\r\n  uploadDocuments: async (farmerId, documents) => {\r\n    const formData = new FormData();\r\n    Object.keys(documents).forEach(key => {\r\n      if (documents[key]) {\r\n        formData.append(key, documents[key]);\r\n      }\r\n    });\r\n    \r\n    const response = await api.post(`/employees/kyc/${farmerId}/upload`, formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Approve KYC\r\n  approveKYC: async (farmerId, approvalData) => {\r\n    const response = await api.put(`/employees/kyc/approve/${farmerId}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Reject KYC\r\n  rejectKYC: async (farmerId, rejectionData) => {\r\n    const response = await api.put(`/employees/kyc/reject/${farmerId}`, {\r\n      reason: rejectionData.reason || 'KYC rejected'\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Refer back KYC\r\n  referBackKYC: async (farmerId, referBackData) => {\r\n    const response = await api.put(`/employees/kyc/refer-back/${farmerId}`, {\r\n      reason: referBackData.reason || 'KYC referred back'\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Get KYC status\r\n  getKYCStatus: async (farmerId) => {\r\n    const response = await api.get(`/employees/kyc/${farmerId}/status`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get KYC documents\r\n  getKYCDocuments: async (farmerId) => {\r\n    const response = await api.get(`/employees/kyc/${farmerId}/documents`);\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// Dashboard API calls\r\nexport const dashboardAPI = {\r\n  // Get dashboard statistics\r\n  getDashboardStats: async () => {\r\n    const response = await api.get('/dashboard/stats');\r\n    return response.data;\r\n  },\r\n\r\n  // Get admin dashboard data\r\n  getAdminDashboardData: async () => {\r\n    const response = await api.get('/dashboard/admin');\r\n    return response.data;\r\n  },\r\n\r\n  // Get super admin dashboard data\r\n  getSuperAdminDashboardData: async () => {\r\n    const response = await api.get('/dashboard/super-admin');\r\n    return response.data;\r\n  },\r\n\r\n  // Get employee dashboard data\r\n  getEmployeeDashboardData: async (employeeId) => {\r\n    const response = await api.get(`/dashboard/employee/${employeeId}`);\r\n    return response.data;\r\n  }\r\n};\r\n\r\nexport default api; ","import React, { useState, useContext } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { AuthContext } from '../contexts/AuthContext';\r\nimport { authAPI } from '../api/apiService';\r\nimport logo from '../assets/rightlogo.png';\r\nimport '../styles/Login.css';\r\n\r\nconst generateCaptcha = () => {\r\n  // Random captcha generation\r\n  const chars = 'abcdefghijklmnopqrstuvwxyz0123456789';\r\n  let captcha = '';\r\n  for (let i = 0; i < 5; i++) {\r\n    captcha += chars.charAt(Math.floor(Math.random() * chars.length));\r\n  }\r\n  return captcha;\r\n};\r\n\r\nconst Login = () => {\r\n  const { login } = useContext(AuthContext);\r\n  const [userName, setUserName] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [loginType, setLoginType] = useState('official'); // 'official', 'fpo', 'employee', 'farmer'\r\n  const [captcha, setCaptcha] = useState('');\r\n  const [captchaValue, setCaptchaValue] = useState(generateCaptcha());\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  const handleLoginType = (type) => {\r\n    setLoginType(type);\r\n    setError('');\r\n    setCaptcha('');\r\n    setCaptchaValue(generateCaptcha());\r\n  };\r\n\r\n  const handleRefreshCaptcha = () => {\r\n    setCaptchaValue(generateCaptcha());\r\n    setCaptcha('');\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setError('');\r\n    setLoading(true);\r\n    if (captcha.trim().toLowerCase() !== captchaValue.toLowerCase()) {\r\n      setError('Captcha does not match.');\r\n      setLoading(false);\r\n      setCaptchaValue(generateCaptcha());\r\n      setCaptcha('');\r\n      return;\r\n    }\r\n    try {\r\n      const loginData = { userName, password };\r\n      const response = await authAPI.login(loginData);\r\n      console.log('Login - Full login response:', response);\r\n      console.log('Login - Login response data keys:', Object.keys(response || {}));\r\n      const { token } = response;\r\n      // Immediately persist token so profile call includes Authorization header\r\n      if (token) {\r\n        localStorage.setItem('token', token);\r\n      }\r\n      \r\n      // Helpers to sanitize and map roles consistently\r\n      const normalizeRawRole = (role) => (role || '').toString().toUpperCase().trim();\r\n      const toKnownRole = (role) => {\r\n        const r = normalizeRawRole(role)\r\n          .replace(/^ROLE[ _-]*/, '')\r\n          .replace(/-/g, '_')\r\n          .replace(/\\s+/g, '_');\r\n        if (r.includes('SUPER') && r.includes('ADMIN')) return 'SUPER_ADMIN';\r\n        if (r === 'SUPERADMIN') return 'SUPER_ADMIN';\r\n        if (r.includes('ADMIN') && !r.includes('SUPER')) return 'ADMIN';\r\n        if (r.includes('EMPLOYEE') || r.includes('STAFF')) return 'EMPLOYEE';\r\n        if (r.includes('FARMER')) return 'FARMER';\r\n        return '';\r\n      };\r\n      const roleFromLoginType = () => {\r\n        switch (loginType) {\r\n          case 'official':\r\n            return 'ADMIN';\r\n          case 'employee':\r\n            return 'EMPLOYEE';\r\n          case 'farmer':\r\n            return 'FARMER';\r\n          case 'fpo':\r\n            return 'ADMIN';\r\n          default:\r\n            return '';\r\n        }\r\n      };\r\n      try {\r\n        // Get user profile with token\r\n        const userData = await authAPI.getProfile();\r\n        console.log('Login - Profile response data:', userData);\r\n        console.log('Login - Profile response data keys:', Object.keys(userData || {}));\r\n        const user = {\r\n          userName: userData.userName || userName,\r\n          name: userData.name,\r\n          email: userData.email,\r\n          role: toKnownRole(userData.role) || roleFromLoginType() || 'FARMER',\r\n          forcePasswordChange: userData.forcePasswordChange || false,\r\n          status: userData.status\r\n        };\r\n        \r\n        // For users with temporary passwords, force password change\r\n        if (password.includes('Temp@')) {\r\n          user.forcePasswordChange = true;\r\n          console.log('Login - Detected temporary password, forcing password change');\r\n        }\r\n        \r\n        console.log('Login - User data from profile:', user);\r\n        console.log('Login - User role from profile:', userData.role);\r\n        login(user, token);\r\n        \r\n        // Check if user needs to change password (first time login with temp password)\r\n        console.log('Login - Checking forcePasswordChange:', user.forcePasswordChange);\r\n        console.log('Login - Password contains Temp@:', password.includes('Temp@'));\r\n        \r\n        if (user.forcePasswordChange) {\r\n          console.log('Login - Redirecting to change password page');\r\n          navigate('/change-password');\r\n          return;\r\n        }\r\n        \r\n        // Role-based navigation after password change or normal login\r\n        console.log('Login - User role for navigation (known):', user.role);\r\n        console.log('Login - User role type:', typeof user.role);\r\n        console.log('Login - User role length:', user.role?.length);\r\n        console.log('Login - User role includes spaces:', user.role?.includes(' '));\r\n        \r\n        const normalizedRole = toKnownRole(user.role) || roleFromLoginType() || '';\r\n        console.log('Login - Known role:', normalizedRole);\r\n        \r\n        if (normalizedRole === 'SUPER_ADMIN') {\r\n          console.log('Login - Redirecting SUPER_ADMIN to /super-admin/dashboard');\r\n          navigate('/super-admin/dashboard');\r\n        } else if (normalizedRole === 'ADMIN') {\r\n          console.log('Login - Redirecting ADMIN to /admin/dashboard');\r\n          navigate('/admin/dashboard');\r\n        } else if (normalizedRole === 'EMPLOYEE') {\r\n          console.log('Login - Redirecting EMPLOYEE to /employee/dashboard');\r\n          navigate('/employee/dashboard');\r\n        } else {\r\n          console.log('Login - Redirecting FARMER to /dashboard');\r\n          navigate('/dashboard');\r\n        }\r\n      } catch (profileErr) {\r\n        console.log('Profile fetch failed, trying alternative methods');\r\n        console.log('Profile error:', profileErr);\r\n        \r\n        // Try to get role from login response first\r\n        let role = toKnownRole(response.data?.role);\r\n        let forcePasswordChange = response.data?.forcePasswordChange || false;\r\n        \r\n        // For users with temporary passwords, force password change\r\n        if (password.includes('Temp@')) {\r\n          forcePasswordChange = true;\r\n          console.log('Login - Detected temporary password, forcing password change');\r\n        }\r\n        \r\n        // If role is not in login response, try to get it from the backend\r\n        if (!role) {\r\n          try {\r\n            console.log('Login - Trying to get role from /auth/me endpoint');\r\n            const meResponse = await authAPI.getProfile();\r\n            console.log('Login - /auth/me response:', meResponse);\r\n            role = toKnownRole(meResponse?.role);\r\n            console.log('Login - Role from /auth/me:', role);\r\n          } catch (meErr) {\r\n            console.log('Login - /auth/me failed:', meErr);\r\n            \r\n            // Try another common endpoint\r\n            try {\r\n              console.log('Login - Trying to get role from /api/auth/users/profile endpoint');\r\n              const altProfileResponse = await authAPI.getProfile();\r\n              console.log('Login - /api/auth/users/profile response:', altProfileResponse);\r\n              role = toKnownRole(altProfileResponse?.role);\r\n              console.log('Login - Role from /api/auth/users/profile:', role);\r\n            } catch (altErr) {\r\n              console.log('Login - /api/auth/users/profile failed:', altErr);\r\n            }\r\n          }\r\n        }\r\n        \r\n        // If still no role, try to determine from username or use a default\r\n        if (!role) {\r\n          console.log('Login - No role found, trying to determine from username');\r\n          console.log('Login - Username being checked:', userName);\r\n          // Check if username contains admin indicators\r\n          const lowerUserName = userName.toLowerCase();\r\n          \r\n          // Specific username mapping for known accounts\r\n          const superAdminUsernames = [\r\n            'projecthinfintiy@12.in',\r\n            'superadmin@hinfinity.in'\r\n          ];\r\n          \r\n          const adminUsernames = [\r\n            'karthik.m@hinfinity.in',\r\n            'admin@hinfinity.in'\r\n          ];\r\n          \r\n          const employeeUsernames = [\r\n            'employee@hinfinity.in',\r\n            'emp@hinfinity.in',\r\n            'testemployee@hinfinity.in',\r\n            'hari2912@gmail.com',\r\n            'harish134@gmail.com',\r\n            'employee2@hinfinity.in',\r\n            'test@employee.com'\r\n          ];\r\n          \r\n          console.log('Login - Checking against employee usernames:', employeeUsernames);\r\n          console.log('Login - Username in employee list?', employeeUsernames.includes(userName));\r\n          \r\n          if (superAdminUsernames.includes(userName)) {\r\n            role = 'SUPER_ADMIN';\r\n            console.log('Login - Determined role as SUPER_ADMIN from specific username mapping');\r\n          } else if (adminUsernames.includes(userName)) {\r\n            role = 'ADMIN';\r\n            console.log('Login - Determined role as ADMIN from specific username mapping');\r\n          } else if (employeeUsernames.includes(userName)) {\r\n            role = 'EMPLOYEE';\r\n            console.log('Login - Determined role as EMPLOYEE from specific username mapping');\r\n            console.log('Login - Employee username detected:', userName);\r\n          } else {\r\n            // Fall back to chosen login type mapping\r\n            role = roleFromLoginType() || 'FARMER';\r\n            console.log('Login - Falling back to loginType role:', role);\r\n          }\r\n        }\r\n        \r\n        const user = {\r\n          userName: userName,\r\n          name: response.data?.name || userName,\r\n          email: response.data?.email || userName,\r\n          role: role,\r\n          forcePasswordChange: forcePasswordChange,\r\n          status: response.data?.status || 'ACTIVE'\r\n        };\r\n        \r\n        console.log('Login - Fallback user data:', user);\r\n        login(user, token);\r\n        \r\n        if (user.forcePasswordChange) {\r\n          console.log('Login - Fallback: Redirecting to change password page');\r\n          navigate('/change-password');\r\n          return;\r\n        }\r\n        \r\n        const normalizedRole = toKnownRole(role) || roleFromLoginType() || '';\r\n        console.log('Login - Fallback: Known role:', normalizedRole);\r\n        \r\n        if (normalizedRole === 'SUPER_ADMIN') {\r\n          console.log('Login - Fallback: Redirecting SUPER_ADMIN to /super-admin/dashboard');\r\n          navigate('/super-admin/dashboard');\r\n        } else if (normalizedRole === 'ADMIN') {\r\n          console.log('Login - Fallback: Redirecting ADMIN to /admin/dashboard');\r\n          navigate('/admin/dashboard');\r\n        } else if (normalizedRole === 'EMPLOYEE') {\r\n          console.log('Login - Fallback: Redirecting EMPLOYEE to /employee/dashboard');\r\n          navigate('/employee/dashboard');\r\n        } else {\r\n          console.log('Login - Fallback: Redirecting FARMER to /dashboard');\r\n          navigate('/dashboard');\r\n        }\r\n      }\r\n    } catch (err) {\r\n      console.error('Login error:', err);\r\n      console.error('Login error response:', err.response);\r\n      console.error('Login error message:', err.message);\r\n      setError(`Login failed: ${err.response?.data?.message || err.message || 'Invalid credentials or server error.'}`);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleCreateAccount = () => {\r\n    if (loginType === 'employee') {\r\n      navigate('/register-employee', { state: { role: 'EMPLOYEE' } });\r\n    } else if (loginType === 'farmer') {\r\n      navigate('/register-farmer', { state: { role: 'FARMER' } });\r\n    } else if (loginType === 'fpo') {\r\n      navigate('/register-fpo', { state: { role: 'FPO' } });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"login-page-container\">\r\n      {/* Top Navigation Bar */}\r\n      <nav className=\"login-page-navbar\">\r\n        <div className=\"login-page-logo\">\r\n          <span>एनआईसी</span>\r\n          <div className=\"login-page-logo-text\">National Informatics Centre</div>\r\n        </div>\r\n        <div className=\"login-page-nav-links\">\r\n          <a href=\"#dashboard\">Dashboard</a>\r\n          <span className=\"login-page-nav-dot\">•</span>\r\n          <a href=\"#enrollment\">Check Enrollment Status</a>\r\n        </div>\r\n      </nav>\r\n\r\n      <div className=\"login-page-main-content\">\r\n        {/* Left Section - Information Panel */}\r\n        <div className=\"login-page-info-panel\">\r\n          <div className=\"login-page-agri-stack-header\">\r\n            <h1 className=\"login-page-agri-stack-title\">\r\n              <span className=\"login-page-agri-text\">Digital</span>\r\n              <span className=\"login-page-stack-text\">Agristack</span>\r\n              <span className=\"login-page-leaf-icon\">🌿</span>\r\n            </h1>\r\n            <h2 className=\"login-page-registry-title\">India Farmer Registry</h2>\r\n          </div>\r\n          <div className=\"login-page-registry-info\">\r\n            <p className=\"login-page-registry-description\">\r\n              Farmer Registry in India enables farmers to receive a unique Farmer ID to access government benefits. \r\n              Register now to ensure seamless access to agricultural schemes and services!\r\n            </p>\r\n          </div>\r\n          \r\n          <div className=\"login-page-help-desk\">\r\n            <p>Help Desk : 1800-425-1661</p>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Right Section - Login Form */}\r\n        <div className=\"login-page-form-section\">\r\n          <div className=\"login-page-card\">\r\n            {/* DATE Logo at Top */}\r\n            <div className=\"login-page-date-logo-section\">\r\n              <img src={logo} alt=\"DATE Logo\" className=\"login-page-date-logo\" />\r\n              <div className=\"login-page-date-text\">\r\n                <h3>Digital Agristack Transaction Enterprises</h3>\r\n                <p>Empowering Agricultural Excellence</p>\r\n              </div>\r\n            </div>\r\n            {/* Login Type Section */}\r\n            <div className=\"login-page-login-type-section\">\r\n              <h3>Log In as</h3>\r\n              <div className=\"login-page-login-type-toggle\">\r\n                <button \r\n                  type=\"button\"\r\n                  className={`login-page-toggle-btn ${loginType === 'official' ? 'login-page-active' : ''}`}\r\n                  onClick={() => handleLoginType('official')}\r\n                >\r\n                  Official\r\n                </button>\r\n                <button \r\n                  type=\"button\"\r\n                  className={`login-page-toggle-btn ${loginType === 'fpo' ? 'login-page-active' : ''}`}\r\n                  onClick={() => handleLoginType('fpo')}\r\n                >\r\n                  FPO\r\n                </button>\r\n                <button \r\n                  type=\"button\"\r\n                  className={`login-page-toggle-btn ${loginType === 'employee' ? 'login-page-active' : ''}`}\r\n                  onClick={() => handleLoginType('employee')}\r\n                >\r\n                  Employee\r\n                </button>\r\n                <button \r\n                  type=\"button\"\r\n                  className={`login-page-toggle-btn ${loginType === 'farmer' ? 'login-page-active' : ''}`}\r\n                  onClick={() => handleLoginType('farmer')}\r\n                >\r\n                  Farmer\r\n                </button>\r\n              </div>\r\n            </div>\r\n\r\n            <form onSubmit={handleSubmit} className=\"login-page-form\">\r\n              {/* Username Field */}\r\n              <div className=\"login-page-form-field\">\r\n                <label>Insert Registered Mobile Number as Username</label>\r\n                <input\r\n                  type=\"text\"\r\n                  value={userName}\r\n                  onChange={e => setUserName(e.target.value)}\r\n                  required\r\n                  disabled={loading}\r\n                  placeholder=\"Enter username\"\r\n                />\r\n              </div>\r\n\r\n              {/* Password Field */}\r\n              <div className=\"login-page-form-field\">\r\n                <label>Enter password</label>\r\n                <div className=\"login-page-password-input-container\">\r\n                  <input\r\n                    type={showPassword ? \"text\" : \"password\"}\r\n                    value={password}\r\n                    onChange={e => setPassword(e.target.value)}\r\n                    required\r\n                    disabled={loading}\r\n                    placeholder=\"Enter password\"\r\n                  />\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"login-page-eye-icon\"\r\n                    onClick={() => setShowPassword(!showPassword)}\r\n                  >\r\n                    👁️\r\n                  </button>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Forgot Password Link */}\r\n              <div className=\"login-page-forgot-password\">\r\n                <a href=\"/forgot-password\">Forgot Password?</a>\r\n                <span className=\"login-page-separator\">|</span>\r\n                <a href=\"/forgot-userid\">Forgot User ID?</a>\r\n              </div>\r\n\r\n              {/* Captcha Section */}\r\n              <div className=\"login-page-captcha-section\">\r\n                <label>Captcha</label>\r\n                <div className=\"login-page-captcha-container\">\r\n                  <div className=\"login-page-captcha-image\">\r\n                    <span>{captchaValue}</span>\r\n                  </div>\r\n                  <button type=\"button\" className=\"login-page-refresh-captcha\" onClick={handleRefreshCaptcha}>\r\n                    🔄\r\n                  </button>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={captcha}\r\n                    onChange={e => setCaptcha(e.target.value)}\r\n                    placeholder=\"Enter Captcha\"\r\n                    className=\"login-page-captcha-input\"\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              {error && <div className=\"login-page-error-message\">{error}</div>}\r\n              \r\n              <div className=\"login-page-actions-row\">\r\n                <button type=\"submit\" className=\"login-page-login-btn\" disabled={loading}>\r\n                  {loading ? 'Logging in...' : 'Log In'}\r\n                </button>\r\n                {(loginType === 'employee' || loginType === 'farmer' || loginType === 'fpo') && (\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"login-page-create-account-btn\"\r\n                    onClick={handleCreateAccount}\r\n                  >\r\n                    Create New user Acount\r\n                  </button>\r\n                )}\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login; "],"names":["api","axios","create","baseURL","process","REACT_APP_API_URL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","authAPI","login","async","post","credentials","data","getProfile","get","register","userData","sendOTP","emailOrPhone","email","verifyOTP","otpData","otp","resendOTP","forgotPassword","forgotUserId","resetPassword","resetData","changePassword","passwordData","changeUserId","userIdData","getCountries","getStates","countryId","superAdminAPI","getAllUsers","getRegistrationList","filters","arguments","length","undefined","params","getRegistrationListByStatus","searchRegistrations","query","getPendingRegistrations","getApprovedUsers","getUsersByRole","role","getPendingUsersByRole","approveUser","userId","put","rejectUser","reason","deleteUser","delete","updateUser","updateUserStatus","getDashboardStats","bulkAssignFarmers","farmerIds","employeeId","assignFarmer","farmerId","farmersAPI","getAllFarmers","getFarmerById","id","createFarmer","farmerData","updateFarmer","deleteFarmer","getFarmerStats","adminAPI","getAllEmployees","getFarmersWithKyc","getEmployeesWithStats","getFarmersByEmployee","getTodoList","getEnhancedTodoList","filterFarmers","getLocations","getAssignmentHistory","getFarmersByAssignmentStatus","assignmentStatus","getAllRegistrations","approveRegistration","registrationId","approvalData","rejectRegistration","rejectionData","employeesAPI","getEmployeeById","createEmployee","employeeData","updateEmployee","deleteEmployee","getAssignedFarmers","getEmployeeStats","employeeAPI","console","log","updateProfile","profileData","getStats","kycAPI","uploadDocuments","documents","formData","FormData","Object","keys","forEach","key","append","approveKYC","rejectKYC","referBackKYC","referBackData","getKYCStatus","getKYCDocuments","generateCaptcha","chars","captcha","i","charAt","Math","floor","random","Login","useContext","AuthContext","userName","setUserName","useState","password","setPassword","loginType","setLoginType","setCaptcha","captchaValue","setCaptchaValue","showPassword","setShowPassword","setError","loading","setLoading","navigate","useNavigate","handleLoginType","type","_jsxs","className","children","_jsx","src","logo","alt","onClick","onSubmit","e","preventDefault","trim","toLowerCase","loginData","setItem","normalizeRawRole","toString","toUpperCase","toKnownRole","r","replace","includes","roleFromLoginType","_user$role","_user$role2","user","name","forcePasswordChange","normalizedRole","profileErr","_response$data","_response$data2","_response$data3","_response$data4","_response$data5","meResponse","meErr","altProfileResponse","altErr","superAdminUsernames","adminUsernames","employeeUsernames","err","_err$response","_err$response$data","message","value","onChange","target","required","disabled","placeholder","handleRefreshCaptcha","handleCreateAccount","state"],"sourceRoot":""}