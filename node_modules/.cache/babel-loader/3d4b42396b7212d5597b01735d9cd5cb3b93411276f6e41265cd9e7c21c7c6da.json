{"ast":null,"code":"import{useState,useEffect,useCallback}from'react';export const useLocalStorage=(key,initialValue)=>{// Get from local storage then parse stored json or return initialValue\nconst[storedValue,setStoredValue]=useState(()=>{try{const item=window.localStorage.getItem(key);return item?JSON.parse(item):initialValue;}catch(error){console.error(`Error reading localStorage key \"${key}\":`,error);return initialValue;}});// Return a wrapped version of useState's setter function that persists the new value to localStorage\nconst setValue=useCallback(value=>{try{// Allow value to be a function so we have the same API as useState\nconst valueToStore=value instanceof Function?value(storedValue):value;setStoredValue(valueToStore);// Save to local storage\nwindow.localStorage.setItem(key,JSON.stringify(valueToStore));}catch(error){console.error(`Error setting localStorage key \"${key}\":`,error);}},[key,storedValue]);// Remove item from localStorage\nconst removeValue=useCallback(()=>{try{setStoredValue(initialValue);window.localStorage.removeItem(key);}catch(error){console.error(`Error removing localStorage key \"${key}\":`,error);}},[key,initialValue]);// Listen for changes to this localStorage key in other tabs/windows\nuseEffect(()=>{const handleStorageChange=e=>{if(e.key===key&&e.newValue!==null){try{setStoredValue(JSON.parse(e.newValue));}catch(error){console.error(`Error parsing localStorage key \"${key}\":`,error);}}};window.addEventListener('storage',handleStorageChange);return()=>window.removeEventListener('storage',handleStorageChange);},[key]);return[storedValue,setValue,removeValue];};","map":{"version":3,"names":["useState","useEffect","useCallback","useLocalStorage","key","initialValue","storedValue","setStoredValue","item","window","localStorage","getItem","JSON","parse","error","console","setValue","value","valueToStore","Function","setItem","stringify","removeValue","removeItem","handleStorageChange","e","newValue","addEventListener","removeEventListener"],"sources":["D:/Fronted-dev/src/hooks/useLocalStorage.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\r\n\r\nexport const useLocalStorage = (key, initialValue) => {\r\n  // Get from local storage then parse stored json or return initialValue\r\n  const [storedValue, setStoredValue] = useState(() => {\r\n    try {\r\n      const item = window.localStorage.getItem(key);\r\n      return item ? JSON.parse(item) : initialValue;\r\n    } catch (error) {\r\n      console.error(`Error reading localStorage key \"${key}\":`, error);\r\n      return initialValue;\r\n    }\r\n  });\r\n\r\n  // Return a wrapped version of useState's setter function that persists the new value to localStorage\r\n  const setValue = useCallback((value) => {\r\n    try {\r\n      // Allow value to be a function so we have the same API as useState\r\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\r\n      setStoredValue(valueToStore);\r\n      \r\n      // Save to local storage\r\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\r\n    } catch (error) {\r\n      console.error(`Error setting localStorage key \"${key}\":`, error);\r\n    }\r\n  }, [key, storedValue]);\r\n\r\n  // Remove item from localStorage\r\n  const removeValue = useCallback(() => {\r\n    try {\r\n      setStoredValue(initialValue);\r\n      window.localStorage.removeItem(key);\r\n    } catch (error) {\r\n      console.error(`Error removing localStorage key \"${key}\":`, error);\r\n    }\r\n  }, [key, initialValue]);\r\n\r\n  // Listen for changes to this localStorage key in other tabs/windows\r\n  useEffect(() => {\r\n    const handleStorageChange = (e) => {\r\n      if (e.key === key && e.newValue !== null) {\r\n        try {\r\n          setStoredValue(JSON.parse(e.newValue));\r\n        } catch (error) {\r\n          console.error(`Error parsing localStorage key \"${key}\":`, error);\r\n        }\r\n      }\r\n    };\r\n\r\n    window.addEventListener('storage', handleStorageChange);\r\n    return () => window.removeEventListener('storage', handleStorageChange);\r\n  }, [key]);\r\n\r\n  return [storedValue, setValue, removeValue];\r\n}; "],"mappings":"AAAA,OAASA,QAAQ,CAAEC,SAAS,CAAEC,WAAW,KAAQ,OAAO,CAExD,MAAO,MAAM,CAAAC,eAAe,CAAGA,CAACC,GAAG,CAAEC,YAAY,GAAK,CACpD;AACA,KAAM,CAACC,WAAW,CAAEC,cAAc,CAAC,CAAGP,QAAQ,CAAC,IAAM,CACnD,GAAI,CACF,KAAM,CAAAQ,IAAI,CAAGC,MAAM,CAACC,YAAY,CAACC,OAAO,CAACP,GAAG,CAAC,CAC7C,MAAO,CAAAI,IAAI,CAAGI,IAAI,CAACC,KAAK,CAACL,IAAI,CAAC,CAAGH,YAAY,CAC/C,CAAE,MAAOS,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,mCAAmCV,GAAG,IAAI,CAAEU,KAAK,CAAC,CAChE,MAAO,CAAAT,YAAY,CACrB,CACF,CAAC,CAAC,CAEF;AACA,KAAM,CAAAW,QAAQ,CAAGd,WAAW,CAAEe,KAAK,EAAK,CACtC,GAAI,CACF;AACA,KAAM,CAAAC,YAAY,CAAGD,KAAK,WAAY,CAAAE,QAAQ,CAAGF,KAAK,CAACX,WAAW,CAAC,CAAGW,KAAK,CAC3EV,cAAc,CAACW,YAAY,CAAC,CAE5B;AACAT,MAAM,CAACC,YAAY,CAACU,OAAO,CAAChB,GAAG,CAAEQ,IAAI,CAACS,SAAS,CAACH,YAAY,CAAC,CAAC,CAChE,CAAE,MAAOJ,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,mCAAmCV,GAAG,IAAI,CAAEU,KAAK,CAAC,CAClE,CACF,CAAC,CAAE,CAACV,GAAG,CAAEE,WAAW,CAAC,CAAC,CAEtB;AACA,KAAM,CAAAgB,WAAW,CAAGpB,WAAW,CAAC,IAAM,CACpC,GAAI,CACFK,cAAc,CAACF,YAAY,CAAC,CAC5BI,MAAM,CAACC,YAAY,CAACa,UAAU,CAACnB,GAAG,CAAC,CACrC,CAAE,MAAOU,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,oCAAoCV,GAAG,IAAI,CAAEU,KAAK,CAAC,CACnE,CACF,CAAC,CAAE,CAACV,GAAG,CAAEC,YAAY,CAAC,CAAC,CAEvB;AACAJ,SAAS,CAAC,IAAM,CACd,KAAM,CAAAuB,mBAAmB,CAAIC,CAAC,EAAK,CACjC,GAAIA,CAAC,CAACrB,GAAG,GAAKA,GAAG,EAAIqB,CAAC,CAACC,QAAQ,GAAK,IAAI,CAAE,CACxC,GAAI,CACFnB,cAAc,CAACK,IAAI,CAACC,KAAK,CAACY,CAAC,CAACC,QAAQ,CAAC,CAAC,CACxC,CAAE,MAAOZ,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,mCAAmCV,GAAG,IAAI,CAAEU,KAAK,CAAC,CAClE,CACF,CACF,CAAC,CAEDL,MAAM,CAACkB,gBAAgB,CAAC,SAAS,CAAEH,mBAAmB,CAAC,CACvD,MAAO,IAAMf,MAAM,CAACmB,mBAAmB,CAAC,SAAS,CAAEJ,mBAAmB,CAAC,CACzE,CAAC,CAAE,CAACpB,GAAG,CAAC,CAAC,CAET,MAAO,CAACE,WAAW,CAAEU,QAAQ,CAAEM,WAAW,CAAC,CAC7C,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}