{"ast":null,"code":"import axios from 'axios';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8080',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor to handle common errors\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // Unauthorized - clear token and redirect to login\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Mock API responses for development\nconst mockResponses = {\n  '/auth/login': {\n    success: true,\n    token: 'mock-jwt-token-123',\n    role: 'ADMIN',\n    forcePasswordChange: false\n  },\n  '/api/auth/users/profile': {\n    userName: 'admin@hinfinity.in',\n    name: 'Admin User',\n    email: 'admin@hinfinity.in',\n    role: 'ADMIN',\n    status: 'ACTIVE',\n    forcePasswordChange: false\n  },\n  '/auth/me': {\n    userName: 'admin@hinfinity.in',\n    name: 'Admin User',\n    email: 'admin@hinfinity.in',\n    role: 'ADMIN',\n    status: 'ACTIVE'\n  }\n};\n\n// Override axios methods to provide mock responses in development\nif (process.env.NODE_ENV === 'development') {\n  const originalGet = api.get;\n  const originalPost = api.post;\n  api.get = async (url, config) => {\n    try {\n      return await originalGet(url, config);\n    } catch (error) {\n      // If real API fails, return mock data\n      if (mockResponses[url]) {\n        return {\n          data: mockResponses[url],\n          status: 200,\n          statusText: 'OK'\n        };\n      }\n      throw error;\n    }\n  };\n  api.post = async (url, data, config) => {\n    try {\n      return await originalPost(url, data, config);\n    } catch (error) {\n      // If real API fails, return mock data for login\n      if (url === '/auth/login') {\n        const {\n          userName,\n          password\n        } = data;\n\n        // Mock user mapping\n        const mockUsers = {\n          'admin@hinfinity.in': {\n            token: 'admin-token-123',\n            role: 'ADMIN',\n            forcePasswordChange: false\n          },\n          'superadmin@hinfinity.in': {\n            token: 'superadmin-token-456',\n            role: 'SUPER_ADMIN',\n            forcePasswordChange: false\n          },\n          'employee@hinfinity.in': {\n            token: 'employee-token-789',\n            role: 'EMPLOYEE',\n            forcePasswordChange: false\n          },\n          'farmer@test.com': {\n            token: 'farmer-token-101',\n            role: 'FARMER',\n            forcePasswordChange: false\n          }\n        };\n        const user = mockUsers[userName];\n        if (user && password === 'password123') {\n          return {\n            data: user,\n            status: 200,\n            statusText: 'OK'\n          };\n        } else {\n          throw new Error('Invalid credentials');\n        }\n      }\n      throw error;\n    }\n  };\n}\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","mockResponses","success","role","forcePasswordChange","userName","name","email","NODE_ENV","originalGet","get","originalPost","post","url","data","statusText","password","mockUsers","user","Error"],"sources":["D:/fullstac/Working-frontend/src/api/apiService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Create axios instance with default config\r\nconst api = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8080',\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor to add auth token\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor to handle common errors\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      // Unauthorized - clear token and redirect to login\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('user');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Mock API responses for development\r\nconst mockResponses = {\r\n  '/auth/login': {\r\n    success: true,\r\n    token: 'mock-jwt-token-123',\r\n    role: 'ADMIN',\r\n    forcePasswordChange: false\r\n  },\r\n  '/api/auth/users/profile': {\r\n    userName: 'admin@hinfinity.in',\r\n    name: 'Admin User',\r\n    email: 'admin@hinfinity.in',\r\n    role: 'ADMIN',\r\n    status: 'ACTIVE',\r\n    forcePasswordChange: false\r\n  },\r\n  '/auth/me': {\r\n    userName: 'admin@hinfinity.in',\r\n    name: 'Admin User',\r\n    email: 'admin@hinfinity.in',\r\n    role: 'ADMIN',\r\n    status: 'ACTIVE'\r\n  }\r\n};\r\n\r\n// Override axios methods to provide mock responses in development\r\nif (process.env.NODE_ENV === 'development') {\r\n  const originalGet = api.get;\r\n  const originalPost = api.post;\r\n\r\n  api.get = async (url, config) => {\r\n    try {\r\n      return await originalGet(url, config);\r\n    } catch (error) {\r\n      // If real API fails, return mock data\r\n      if (mockResponses[url]) {\r\n        return {\r\n          data: mockResponses[url],\r\n          status: 200,\r\n          statusText: 'OK'\r\n        };\r\n      }\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  api.post = async (url, data, config) => {\r\n    try {\r\n      return await originalPost(url, data, config);\r\n    } catch (error) {\r\n      // If real API fails, return mock data for login\r\n      if (url === '/auth/login') {\r\n        const { userName, password } = data;\r\n        \r\n        // Mock user mapping\r\n        const mockUsers = {\r\n          'admin@hinfinity.in': {\r\n            token: 'admin-token-123',\r\n            role: 'ADMIN',\r\n            forcePasswordChange: false\r\n          },\r\n          'superadmin@hinfinity.in': {\r\n            token: 'superadmin-token-456',\r\n            role: 'SUPER_ADMIN',\r\n            forcePasswordChange: false\r\n          },\r\n          'employee@hinfinity.in': {\r\n            token: 'employee-token-789',\r\n            role: 'EMPLOYEE',\r\n            forcePasswordChange: false\r\n          },\r\n          'farmer@test.com': {\r\n            token: 'farmer-token-101',\r\n            role: 'FARMER',\r\n            forcePasswordChange: false\r\n          }\r\n        };\r\n\r\n        const user = mockUsers[userName];\r\n        if (user && password === 'password123') {\r\n          return {\r\n            data: user,\r\n            status: 200,\r\n            statusText: 'OK'\r\n          };\r\n        } else {\r\n          throw new Error('Invalid credentials');\r\n        }\r\n      }\r\n      throw error;\r\n    }\r\n  };\r\n}\r\n\r\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}