{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback, useRef } from 'react';\nexport const useApi = () => {\n  _s();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const cache = useRef(new Map());\n  const abortController = useRef(null);\n  const executeApiCall = useCallback(async (apiFunction, options = {}) => {\n    const {\n      cacheKey = null,\n      cacheTime = 5 * 60 * 1000,\n      // 5 minutes\n      skipCache = false,\n      showError = true,\n      onSuccess = null,\n      onError = null\n    } = options;\n\n    // Cancel previous request if it exists\n    if (abortController.current) {\n      abortController.current.abort();\n    }\n\n    // Create new abort controller\n    abortController.current = new AbortController();\n\n    // Check cache first\n    if (cacheKey && !skipCache) {\n      const cached = cache.current.get(cacheKey);\n      if (cached && Date.now() - cached.timestamp < cacheTime) {\n        return cached.data;\n      }\n    }\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await apiFunction(abortController.current.signal);\n\n      // Cache the response\n      if (cacheKey) {\n        cache.current.set(cacheKey, {\n          data: response,\n          timestamp: Date.now()\n        });\n      }\n      if (onSuccess) {\n        onSuccess(response);\n      }\n      return response;\n    } catch (err) {\n      var _err$response, _err$response$data;\n      if (err.name === 'AbortError') {\n        return; // Request was cancelled\n      }\n      const errorMessage = ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || err.message || 'An error occurred';\n      setError(errorMessage);\n      if (onError) {\n        onError(err);\n      }\n      if (showError) {\n        console.error('API Error:', err);\n      }\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  const clearCache = useCallback((key = null) => {\n    if (key) {\n      cache.current.delete(key);\n    } else {\n      cache.current.clear();\n    }\n  }, []);\n  const cancelRequest = useCallback(() => {\n    if (abortController.current) {\n      abortController.current.abort();\n    }\n  }, []);\n  return {\n    loading,\n    error,\n    executeApiCall,\n    clearCache,\n    cancelRequest\n  };\n};\n_s(useApi, \"B0d//Rp/iUcuxAXq+nkB50LQXO8=\");","map":{"version":3,"names":["useState","useCallback","useRef","useApi","_s","loading","setLoading","error","setError","cache","Map","abortController","executeApiCall","apiFunction","options","cacheKey","cacheTime","skipCache","showError","onSuccess","onError","current","abort","AbortController","cached","get","Date","now","timestamp","data","response","signal","set","err","_err$response","_err$response$data","name","errorMessage","message","console","clearCache","key","delete","clear","cancelRequest"],"sources":["D:/Fronted-dev/Latest-working-frontend/src/hooks/useApi.js"],"sourcesContent":["import { useState, useCallback, useRef } from 'react';\r\n\r\nexport const useApi = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const cache = useRef(new Map());\r\n  const abortController = useRef(null);\r\n\r\n  const executeApiCall = useCallback(async (apiFunction, options = {}) => {\r\n    const {\r\n      cacheKey = null,\r\n      cacheTime = 5 * 60 * 1000, // 5 minutes\r\n      skipCache = false,\r\n      showError = true,\r\n      onSuccess = null,\r\n      onError = null\r\n    } = options;\r\n\r\n    // Cancel previous request if it exists\r\n    if (abortController.current) {\r\n      abortController.current.abort();\r\n    }\r\n\r\n    // Create new abort controller\r\n    abortController.current = new AbortController();\r\n\r\n    // Check cache first\r\n    if (cacheKey && !skipCache) {\r\n      const cached = cache.current.get(cacheKey);\r\n      if (cached && Date.now() - cached.timestamp < cacheTime) {\r\n        return cached.data;\r\n      }\r\n    }\r\n\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const response = await apiFunction(abortController.current.signal);\r\n      \r\n      // Cache the response\r\n      if (cacheKey) {\r\n        cache.current.set(cacheKey, {\r\n          data: response,\r\n          timestamp: Date.now()\r\n        });\r\n      }\r\n\r\n      if (onSuccess) {\r\n        onSuccess(response);\r\n      }\r\n\r\n      return response;\r\n    } catch (err) {\r\n      if (err.name === 'AbortError') {\r\n        return; // Request was cancelled\r\n      }\r\n\r\n      const errorMessage = err.response?.data?.message || err.message || 'An error occurred';\r\n      setError(errorMessage);\r\n\r\n      if (onError) {\r\n        onError(err);\r\n      }\r\n\r\n      if (showError) {\r\n        console.error('API Error:', err);\r\n      }\r\n\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  const clearCache = useCallback((key = null) => {\r\n    if (key) {\r\n      cache.current.delete(key);\r\n    } else {\r\n      cache.current.clear();\r\n    }\r\n  }, []);\r\n\r\n  const cancelRequest = useCallback(() => {\r\n    if (abortController.current) {\r\n      abortController.current.abort();\r\n    }\r\n  }, []);\r\n\r\n  return {\r\n    loading,\r\n    error,\r\n    executeApiCall,\r\n    clearCache,\r\n    cancelRequest\r\n  };\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}