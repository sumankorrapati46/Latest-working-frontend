{"ast":null,"code":"import axios from 'axios';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8080',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Hardcoded credentials for frontend testing\nconst HARDCODED_CREDENTIALS = {\n  'admin': {\n    password: 'Admin@123',\n    role: 'ADMIN',\n    name: 'Admin User',\n    email: 'admin@agristack.com'\n  },\n  'superadmin': {\n    password: 'SuperAdmin@123',\n    role: 'SUPER_ADMIN',\n    name: 'Super Admin User',\n    email: 'superadmin@agristack.com'\n  },\n  'employee': {\n    password: 'Employee@123',\n    role: 'EMPLOYEE',\n    name: 'Employee User',\n    email: 'employee@agristack.com'\n  },\n  'farmer': {\n    password: 'Farmer@123',\n    role: 'FARMER',\n    name: 'Farmer User',\n    email: 'farmer@agristack.com'\n  },\n  'fpo': {\n    password: 'FPO@123',\n    role: 'FPO',\n    name: 'FPO User',\n    email: 'fpo@agristack.com'\n  },\n  // Additional test credentials\n  'testadmin': {\n    password: 'Admin@123',\n    role: 'ADMIN',\n    name: 'Test Admin',\n    email: 'testadmin@agristack.com'\n  },\n  'testemployee': {\n    password: 'Employee@123',\n    role: 'EMPLOYEE',\n    name: 'Test Employee',\n    email: 'testemployee@agristack.com'\n  },\n  'testfarmer': {\n    password: 'Farmer@123',\n    role: 'FARMER',\n    name: 'Test Farmer',\n    email: 'testfarmer@agristack.com'\n  }\n};\n\n// Request interceptor to add auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor for error handling\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Mock API responses for development\nconst mockResponses = {\n  // Login endpoint\n  '/auth/login': config => {\n    const {\n      userName,\n      password\n    } = JSON.parse(config.data);\n    console.log('Mock API - Login attempt:', {\n      userName,\n      password\n    });\n    const userCreds = HARDCODED_CREDENTIALS[userName];\n    if (userCreds && userCreds.password === password) {\n      console.log('Mock API - Login successful for:', userName);\n      return {\n        status: 200,\n        data: {\n          token: `mock-token-${userName}-${Date.now()}`,\n          role: userCreds.role,\n          userName: userName,\n          name: userCreds.name,\n          email: userCreds.email,\n          forcePasswordChange: false,\n          status: 'ACTIVE'\n        }\n      };\n    } else {\n      console.log('Mock API - Login failed for:', userName);\n      throw new Error('Invalid credentials');\n    }\n  },\n  // User profile endpoint\n  '/api/auth/users/profile': config => {\n    const token = config.headers.Authorization;\n    console.log('Mock API - Profile request with token:', token);\n\n    // Extract username from token for demo purposes\n    let userName = 'admin'; // default\n    if (token && token.includes('mock-token-')) {\n      const tokenParts = token.split('-');\n      if (tokenParts.length >= 3) {\n        userName = tokenParts[2];\n      }\n    }\n    const userCreds = HARDCODED_CREDENTIALS[userName] || HARDCODED_CREDENTIALS['admin'];\n    return {\n      status: 200,\n      data: {\n        userName: userName,\n        name: userCreds.name,\n        email: userCreds.email,\n        role: userCreds.role,\n        forcePasswordChange: false,\n        status: 'ACTIVE'\n      }\n    };\n  },\n  // Alternative profile endpoint\n  '/auth/me': config => {\n    const token = config.headers.Authorization;\n    console.log('Mock API - /auth/me request with token:', token);\n    let userName = 'admin'; // default\n    if (token && token.includes('mock-token-')) {\n      const tokenParts = token.split('-');\n      if (tokenParts.length >= 3) {\n        userName = tokenParts[2];\n      }\n    }\n    const userCreds = HARDCODED_CREDENTIALS[userName] || HARDCODED_CREDENTIALS['admin'];\n    return {\n      status: 200,\n      data: {\n        userName: userName,\n        name: userCreds.name,\n        email: userCreds.email,\n        role: userCreds.role,\n        forcePasswordChange: false,\n        status: 'ACTIVE'\n      }\n    };\n  },\n  // Registration endpoints\n  '/api/auth/register': config => {\n    console.log('Mock API - Registration request');\n    return {\n      status: 200,\n      data: {\n        message: 'User registered successfully',\n        userId: `user-${Date.now()}`\n      }\n    };\n  },\n  '/api/auth/send-otp': config => {\n    console.log('Mock API - Send OTP request');\n    return {\n      status: 200,\n      data: {\n        message: 'OTP sent successfully',\n        otp: '123456' // Hardcoded OTP for testing\n      }\n    };\n  },\n  '/api/auth/verify-otp': config => {\n    const {\n      otp\n    } = JSON.parse(config.data);\n    console.log('Mock API - Verify OTP request:', otp);\n    if (otp === '123456') {\n      return {\n        status: 200,\n        data: {\n          message: 'OTP verified successfully',\n          verified: true\n        }\n      };\n    } else {\n      throw new Error('Invalid OTP');\n    }\n  },\n  // Country and state endpoints\n  '/api/auth/countries': () => {\n    return {\n      status: 200,\n      data: [{\n        id: 1,\n        name: 'India'\n      }, {\n        id: 2,\n        name: 'United States'\n      }, {\n        id: 3,\n        name: 'United Kingdom'\n      }]\n    };\n  },\n  '/api/auth/states': config => {\n    const {\n      countryId\n    } = JSON.parse(config.data);\n    console.log('Mock API - States request for country:', countryId);\n    return {\n      status: 200,\n      data: [{\n        id: 1,\n        name: 'Maharashtra',\n        countryId: 1\n      }, {\n        id: 2,\n        name: 'Karnataka',\n        countryId: 1\n      }, {\n        id: 3,\n        name: 'Tamil Nadu',\n        countryId: 1\n      }, {\n        id: 4,\n        name: 'Kerala',\n        countryId: 1\n      }, {\n        id: 5,\n        name: 'Andhra Pradesh',\n        countryId: 1\n      }]\n    };\n  }\n};\n\n// Override axios methods to provide mock responses\nconst originalGet = api.get;\nconst originalPost = api.post;\napi.get = async (url, config = {}) => {\n  console.log('Mock API - GET request:', url);\n  if (mockResponses[url]) {\n    const response = mockResponses[url](config);\n    console.log('Mock API - GET response:', response);\n    return response;\n  }\n  return originalGet(url, config);\n};\napi.post = async (url, data, config = {}) => {\n  console.log('Mock API - POST request:', url, data);\n  if (mockResponses[url]) {\n    const mockConfig = {\n      ...config,\n      data: JSON.stringify(data)\n    };\n    const response = mockResponses[url](mockConfig);\n    console.log('Mock API - POST response:', response);\n    return response;\n  }\n  return originalPost(url, data, config);\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","timeout","headers","HARDCODED_CREDENTIALS","password","role","name","email","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","mockResponses","userName","JSON","parse","data","console","log","userCreds","Date","now","forcePasswordChange","Error","includes","tokenParts","split","length","message","userId","otp","verified","/api/auth/countries","id","countryId","originalGet","get","originalPost","post","url","mockConfig","stringify"],"sources":["D:/fullstac/Working-frontend/src/api/apiService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Create axios instance\r\nconst api = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8080',\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Hardcoded credentials for frontend testing\r\nconst HARDCODED_CREDENTIALS = {\r\n  'admin': { password: 'Admin@123', role: 'ADMIN', name: 'Admin User', email: 'admin@agristack.com' },\r\n  'superadmin': { password: 'SuperAdmin@123', role: 'SUPER_ADMIN', name: 'Super Admin User', email: 'superadmin@agristack.com' },\r\n  'employee': { password: 'Employee@123', role: 'EMPLOYEE', name: 'Employee User', email: 'employee@agristack.com' },\r\n  'farmer': { password: 'Farmer@123', role: 'FARMER', name: 'Farmer User', email: 'farmer@agristack.com' },\r\n  'fpo': { password: 'FPO@123', role: 'FPO', name: 'FPO User', email: 'fpo@agristack.com' },\r\n  // Additional test credentials\r\n  'testadmin': { password: 'Admin@123', role: 'ADMIN', name: 'Test Admin', email: 'testadmin@agristack.com' },\r\n  'testemployee': { password: 'Employee@123', role: 'EMPLOYEE', name: 'Test Employee', email: 'testemployee@agristack.com' },\r\n  'testfarmer': { password: 'Farmer@123', role: 'FARMER', name: 'Test Farmer', email: 'testfarmer@agristack.com' }\r\n};\r\n\r\n// Request interceptor to add auth token\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor for error handling\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('user');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Mock API responses for development\r\nconst mockResponses = {\r\n  // Login endpoint\r\n  '/auth/login': (config) => {\r\n    const { userName, password } = JSON.parse(config.data);\r\n    console.log('Mock API - Login attempt:', { userName, password });\r\n    \r\n    const userCreds = HARDCODED_CREDENTIALS[userName];\r\n    \r\n    if (userCreds && userCreds.password === password) {\r\n      console.log('Mock API - Login successful for:', userName);\r\n      return {\r\n        status: 200,\r\n        data: {\r\n          token: `mock-token-${userName}-${Date.now()}`,\r\n          role: userCreds.role,\r\n          userName: userName,\r\n          name: userCreds.name,\r\n          email: userCreds.email,\r\n          forcePasswordChange: false,\r\n          status: 'ACTIVE'\r\n        }\r\n      };\r\n    } else {\r\n      console.log('Mock API - Login failed for:', userName);\r\n      throw new Error('Invalid credentials');\r\n    }\r\n  },\r\n\r\n  // User profile endpoint\r\n  '/api/auth/users/profile': (config) => {\r\n    const token = config.headers.Authorization;\r\n    console.log('Mock API - Profile request with token:', token);\r\n    \r\n    // Extract username from token for demo purposes\r\n    let userName = 'admin'; // default\r\n    if (token && token.includes('mock-token-')) {\r\n      const tokenParts = token.split('-');\r\n      if (tokenParts.length >= 3) {\r\n        userName = tokenParts[2];\r\n      }\r\n    }\r\n    \r\n    const userCreds = HARDCODED_CREDENTIALS[userName] || HARDCODED_CREDENTIALS['admin'];\r\n    \r\n    return {\r\n      status: 200,\r\n      data: {\r\n        userName: userName,\r\n        name: userCreds.name,\r\n        email: userCreds.email,\r\n        role: userCreds.role,\r\n        forcePasswordChange: false,\r\n        status: 'ACTIVE'\r\n      }\r\n    };\r\n  },\r\n\r\n  // Alternative profile endpoint\r\n  '/auth/me': (config) => {\r\n    const token = config.headers.Authorization;\r\n    console.log('Mock API - /auth/me request with token:', token);\r\n    \r\n    let userName = 'admin'; // default\r\n    if (token && token.includes('mock-token-')) {\r\n      const tokenParts = token.split('-');\r\n      if (tokenParts.length >= 3) {\r\n        userName = tokenParts[2];\r\n      }\r\n    }\r\n    \r\n    const userCreds = HARDCODED_CREDENTIALS[userName] || HARDCODED_CREDENTIALS['admin'];\r\n    \r\n    return {\r\n      status: 200,\r\n      data: {\r\n        userName: userName,\r\n        name: userCreds.name,\r\n        email: userCreds.email,\r\n        role: userCreds.role,\r\n        forcePasswordChange: false,\r\n        status: 'ACTIVE'\r\n      }\r\n    };\r\n  },\r\n\r\n  // Registration endpoints\r\n  '/api/auth/register': (config) => {\r\n    console.log('Mock API - Registration request');\r\n    return {\r\n      status: 200,\r\n      data: {\r\n        message: 'User registered successfully',\r\n        userId: `user-${Date.now()}`\r\n      }\r\n    };\r\n  },\r\n\r\n  '/api/auth/send-otp': (config) => {\r\n    console.log('Mock API - Send OTP request');\r\n    return {\r\n      status: 200,\r\n      data: {\r\n        message: 'OTP sent successfully',\r\n        otp: '123456' // Hardcoded OTP for testing\r\n      }\r\n    };\r\n  },\r\n\r\n  '/api/auth/verify-otp': (config) => {\r\n    const { otp } = JSON.parse(config.data);\r\n    console.log('Mock API - Verify OTP request:', otp);\r\n    \r\n    if (otp === '123456') {\r\n      return {\r\n        status: 200,\r\n        data: {\r\n          message: 'OTP verified successfully',\r\n          verified: true\r\n        }\r\n      };\r\n    } else {\r\n      throw new Error('Invalid OTP');\r\n    }\r\n  },\r\n\r\n  // Country and state endpoints\r\n  '/api/auth/countries': () => {\r\n    return {\r\n      status: 200,\r\n      data: [\r\n        { id: 1, name: 'India' },\r\n        { id: 2, name: 'United States' },\r\n        { id: 3, name: 'United Kingdom' }\r\n      ]\r\n    };\r\n  },\r\n\r\n  '/api/auth/states': (config) => {\r\n    const { countryId } = JSON.parse(config.data);\r\n    console.log('Mock API - States request for country:', countryId);\r\n    \r\n    return {\r\n      status: 200,\r\n      data: [\r\n        { id: 1, name: 'Maharashtra', countryId: 1 },\r\n        { id: 2, name: 'Karnataka', countryId: 1 },\r\n        { id: 3, name: 'Tamil Nadu', countryId: 1 },\r\n        { id: 4, name: 'Kerala', countryId: 1 },\r\n        { id: 5, name: 'Andhra Pradesh', countryId: 1 }\r\n      ]\r\n    };\r\n  }\r\n};\r\n\r\n// Override axios methods to provide mock responses\r\nconst originalGet = api.get;\r\nconst originalPost = api.post;\r\n\r\napi.get = async (url, config = {}) => {\r\n  console.log('Mock API - GET request:', url);\r\n  \r\n  if (mockResponses[url]) {\r\n    const response = mockResponses[url](config);\r\n    console.log('Mock API - GET response:', response);\r\n    return response;\r\n  }\r\n  \r\n  return originalGet(url, config);\r\n};\r\n\r\napi.post = async (url, data, config = {}) => {\r\n  console.log('Mock API - POST request:', url, data);\r\n  \r\n  if (mockResponses[url]) {\r\n    const mockConfig = { ...config, data: JSON.stringify(data) };\r\n    const response = mockResponses[url](mockConfig);\r\n    console.log('Mock API - POST response:', response);\r\n    return response;\r\n  }\r\n  \r\n  return originalPost(url, data, config);\r\n};\r\n\r\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}